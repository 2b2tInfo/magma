
/**
 * @file /magma/providers/symbols.h
 *
 * @brief External function pointers/definitions.
 *
 * $Author$
 * $Date$
 * $Revision$
 *
 */

#ifndef MAGMA_PROVIDERS_SYMBOLS_H
#define MAGMA_PROVIDERS_SYMBOLS_H

// System Headers
#include <sys/types.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <arpa/nameser.h>

// SPF
#include <spf.h>
#include <spf_dns_zone.h>

// ClamAV
#include <clamav.h>

// MySQL
#include <mysql.h>

// OpenSSL
#include <openssl/conf.h>
#include <openssl/ssl.h>
#include <openssl/crypto.h>
#include <openssl/rand.h>
#include <openssl/engine.h>
#include <openssl/x509.h>
#include <openssl/x509v3.h>
#include <openssl/ec.h>
#include <openssl/dh.h>
#include <openssl/err.h>
#include <openssl/ocsp.h>

// LZO
#include <lzo/lzodefs.h>
#include <lzo/lzoconf.h>
#include <lzo/lzoutil.h>
#include <lzo/lzo1x.h>

// XML2
#include <libxml/xmlmemory.h>
#include <libxml/tree.h>
#include <libxml/valid.h>
#include <libxml/xpath.h>
#include <libxml/xpathInternals.h>
#include <libxml/parserInternals.h>
#include <libxml/xmlerror.h>

// ZLIB
#include <zlib.h>

// BZIP
#include <bzlib.h>

// TOKYO
#include <tcutil.h>
#include <tcadb.h>

#include <tchdb.h>
#include <tcbdb.h>

// Memcached
#include <libmemcached/memcached.h>

// DKIM
#define lint
#include <dkim.h>
#undef lint

// DSPAM
#define CONFIG_DEFAULT ""
#define LOGDIR "~/"
#include <libdspam.h>
#include <mysql_drv.h>

// Jansson
#include <jansson.h>

// GD
#include <gd.h>

// PNG
#include <png.h>

// JPEG
#include <jpeglib.h>

// FreeType
#include <ft2build.h>
#include FT_FREETYPE_H

// UTF8
#include <utf8proc.h>

// Our macro for declaring external symbol binding points
#define M_BIND(x) 		{ \
                        .name = #x, \
                        .pointer = (void *)&x##_d \
                        }

//! MEMCACHED
extern memcached_return_t (*memcached_flush_d)(memcached_st *ptr, time_t expiration);
extern void (*memcached_free_d)(memcached_st *ptr);
extern const char * (*memcached_lib_version_d)(void);
extern memcached_st * (*memcached_create_d)(memcached_st *ptr);
extern const char * (*memcached_strerror_d)(const memcached_st *ptr, memcached_return_t rc);
extern memcached_return_t (*memcached_behavior_set_d)(memcached_st *ptr, const memcached_behavior_t flag, uint64_t data);
extern memcached_return_t (*memcached_delete_d)(memcached_st *ptr, const char *key, size_t key_length, time_t expiration);
extern memcached_return_t (*memcached_server_add_with_weight_d)(memcached_st *ptr, const char *hostname, in_port_t port, uint32_t weight);
extern memcached_return_t (*memcached_decrement_d)(memcached_st *ptr, const char *key, size_t key_length, uint32_t offset, uint64_t *value);
extern memcached_return_t (*memcached_increment_d)(memcached_st *ptr, const char *key, size_t key_length, uint32_t offset, uint64_t *value);
extern char * (*memcached_get_d)(memcached_st *ptr, const char *key, size_t key_length, size_t *value_length, uint32_t *flags, memcached_return_t *error);
extern memcached_return_t (*memcached_add_d)(memcached_st *ptr, const char *key, size_t key_length, const char *value, size_t value_length, time_t expiration, uint32_t flags);
extern memcached_return_t (*memcached_set_d)(memcached_st *ptr, const char *key, size_t key_length, const char *value, size_t value_length, time_t expiration, uint32_t flags);
extern memcached_return_t (*memcached_append_d)(memcached_st *ptr, const char *key, size_t key_length, const char *value, size_t value_length, time_t expiration, uint32_t flags);
extern memcached_return_t (*memcached_prepend_d)(memcached_st *ptr, const char *key, size_t key_length, const char *value, size_t value_length, time_t expiration, uint32_t flags);
extern memcached_return_t (*memcached_replace_d)(memcached_st *ptr, const char *key, size_t key_length, const char *value, size_t value_length, time_t expiration, uint32_t flags);
extern memcached_return_t (*memcached_cas_d)(memcached_st *ptr, const char *key, size_t key_length, const char *value, size_t value_length, time_t expiration, uint32_t flags, uint64_t cas);
extern memcached_return_t (*memcached_decrement_with_initial_d)(memcached_st *ptr, const char *key, size_t key_length, uint64_t offset, uint64_t initial, time_t expiration, uint64_t *value);
extern memcached_return_t (*memcached_increment_with_initial_d)(memcached_st *ptr, const char *key, size_t key_length, uint64_t offset, uint64_t initial, time_t expiration, uint64_t *value);

//! BZIP
extern const char * (*BZ2_bzlibVersion_d)(void);
extern int (*BZ2_bzBuffToBuffDecompress_d)(char *dest, unsigned int *destLen, char *source, unsigned int sourceLen, int small, int verbosity);
extern int (*BZ2_bzBuffToBuffCompress_d)(char *dest, unsigned int *destLen, char *source, unsigned int sourceLen, int blockSize100k, int verbosity, int workFactor);

//! CLAMAV
extern void (*cl_shutdown_d)(void);
extern int (*lt_dlexit_d)(void);
extern const char * (*cl_retver_d)(void);
extern int (*cl_init_d)(unsigned int initoptions);
extern const char * (*cl_strerror_d)(int clerror);
extern struct cl_engine * (*cl_engine_new_d)(void);
extern int (*cl_statfree_d)(struct cl_stat *dbstat);
extern int (*cl_engine_free_d)(struct cl_engine *engine);
extern int (*cl_engine_compile_d)(struct cl_engine *engine);
extern int (*cl_statchkdir_d)(const struct cl_stat *dbstat);
extern int (*cl_statinidir_d)(const char *dirname, struct cl_stat *dbstat);
extern int (*cl_countsigs_d)(const char *path, unsigned int countoptions, unsigned int *sigs);
extern int (*cl_engine_set_num_d)(struct cl_engine *engine, enum cl_engine_field field, long long num);
extern int (*cl_engine_set_str_d)(struct cl_engine *engine, enum cl_engine_field field, const char *str);
extern int (*cl_load_d)(const char *path, struct cl_engine *engine, unsigned int *signo, unsigned int dboptions);
extern int (*cl_scandesc_d)(int desc, const char **virname, unsigned long int *scanned, const struct cl_engine *engine, unsigned int scanoptions);

//! DSPAM
extern const char * (*dspam_version_d)(void);
extern int (*dspam_detach_d)(DSPAM_CTX *CTX);
extern void (*dspam_destroy_d)(DSPAM_CTX * CTX);
extern int (*dspam_init_driver_d)(DRIVER_CTX *DTX);
extern int (*dspam_shutdown_driver_d)(DRIVER_CTX *DTX);
extern int (*dspam_attach_d)(DSPAM_CTX *CTX, void *dbh);
extern int (*dspam_process_d)(DSPAM_CTX * CTX, const char *message);
extern DSPAM_CTX * (*dspam_create_d)(const char *username, const char *group, const char *home, int operating_mode, u_int32_t flags);

//! DKIM
/// Note that dkim_getsighdr_d is used by the library, so were using dkim_getsighdrx_d.
extern DKIM_STAT (*dkim_eoh_d)(DKIM *dkim);
extern void (*dkim_close_d)(DKIM_LIB *lib);
extern DKIM_STAT (*dkim_free_d)(DKIM *dkim);
extern uint32_t (*dkim_libversion_d)(void);
extern DKIM_STAT (*dkim_eom_d)(DKIM *dkim, _Bool *testkey);
extern const char * (*dkim_getresultstr_d)(DKIM_STAT result);
extern DKIM_STAT (*dkim_body_d)(DKIM *dkim, u_char *buf, size_t len);
extern DKIM_STAT (*dkim_header_d)(DKIM *dkim, u_char *hdr, size_t len);
extern DKIM_STAT (*dkim_getsighdrx_d)(DKIM *dkim, u_char *buf, size_t len, size_t initial);
extern DKIM * (*dkim_verify_d)(DKIM_LIB *libhandle, const unsigned char *id, void *memclosure, DKIM_STAT *statp);
extern DKIM_LIB * (*dkim_init_d)(void *(*mallocf)(void *closure, size_t nbytes), void (*freef)(void *closure, void *p));
extern DKIM * (*dkim_sign_d)(DKIM_LIB *libhandle, const unsigned char *id, void *memclosure, const dkim_sigkey_t secretkey, const unsigned char *selector, const unsigned char *domain, dkim_canon_t hdr_canon_alg, dkim_canon_t body_canon_alg, dkim_alg_t sign_alg,	off_t length, DKIM_STAT *statp);
extern DKIM_STAT (*dkim_chunk_d)(DKIM *dkim, unsigned char *chunkp, size_t len);
extern char * (*dkim_geterror_d)(DKIM *dkim);

//! FreeType
extern FT_Error (*FT_Done_FreeType_d)(FT_Library library);
extern FT_Error (*FT_Init_FreeType_d)(FT_Library *alibrary);
extern void (*FT_Library_Version_d)(FT_Library library, FT_Int *amajor, FT_Int *aminor, FT_Int *apatch);

//! GD
extern const char * (*gd_version_d)(void);
extern void (*gdFree_d)(void *m);
extern void * (*gdImageGifPtr_d)(gdImagePtr im, int *size);
extern void (*gdImageDestroy_d)(gdImagePtr im);
extern void * (*gdImageJpegPtr_d)(gdImagePtr im, int *size, int quality);
extern void (*gdImageSetPixel_d)(gdImagePtr im, int x, int y, int color);
extern gdImagePtr (*gdImageCreate_d)(int sx, int sy);
extern int (*gdImageColorResolve_d)(gdImagePtr im, int r, int g, int b);
extern char * (*gdImageStringFT_d)(gdImage * im, int *brect, int fg, char *fontlist, double ptsize, double angle, int x, int y, char *string);

//! JPEG
extern const char * (*jpeg_version_d)(void);

//! LZO
extern const char * (*lzo_version_string_d)(void);
extern int (*__lzo_init_v2_d)(unsigned, int, int, int, int, int, int, int, int, int);
extern lzo_uint32 (*lzo_adler32_d)(lzo_uint32 _adler, const lzo_bytep _buf, lzo_uint _len);
extern int (*lzo1x_1_compress_d)(const lzo_byte *src, lzo_uint src_len, lzo_byte *dst, lzo_uintp dst_len, lzo_voidp wrkmem);
extern int (*lzo1x_decompress_safe_d)(const lzo_byte *src, lzo_uint src_len, lzo_byte *dst, lzo_uintp dst_len, lzo_voidp wrkmem);

//! MYSQL
extern void (*my_once_free_d)(void);
extern void (*mysql_server_end_d)(void);
extern void (*mysql_thread_end_d)(void);
extern int (*mysql_ping_d)(MYSQL *mysql);
extern void (*mysql_close_d)(MYSQL *mysql);
extern my_bool (*mysql_thread_init_d)(void);
extern const char * (*mysql_get_server_info_d)(MYSQL *mysql);
extern MYSQL * (*mysql_init_d)(MYSQL *mysql);
extern unsigned int (*mysql_thread_safe_d)(void);
extern int (*mysql_stmt_fetch_d)(MYSQL_STMT *stmt);
extern my_bool (*mysql_stmt_close_d)(MYSQL_STMT *);
extern unsigned int (*mysql_errno_d)(MYSQL *mysql);
extern const char * (*mysql_error_d)(MYSQL *mysql);
extern int (*mysql_stmt_execute_d)(MYSQL_STMT *stmt);
extern my_bool	(*mysql_embedded_d)(void);
extern void (*mysql_free_result_d)(MYSQL_RES *result);
extern my_bool (*mysql_stmt_reset_d)(MYSQL_STMT *stmt);
extern my_ulonglong (*mysql_insert_id_d)(MYSQL *mysql);
extern unsigned long (*mysql_thread_id_d)(MYSQL *mysql);
extern MYSQL_STMT * (*mysql_stmt_init_d)(MYSQL * mysql);
extern MYSQL_ROW (*mysql_fetch_row_d)(MYSQL_RES *result);
extern unsigned long (*mysql_get_client_version_d)(void);
extern MYSQL_RES * (*mysql_store_result_d)(MYSQL * mysql);
extern int (*mysql_stmt_store_result_d)(MYSQL_STMT *stmt);
extern my_ulonglong (*mysql_affected_rows_d)(MYSQL *mysql);
extern my_ulonglong (*mysql_num_rows_d)(MYSQL_RES *result);
extern unsigned int (*mysql_stmt_errno_d)(MYSQL_STMT *stmt);
extern const char * (*mysql_stmt_error_d)(MYSQL_STMT * stmt);
extern my_bool (*mysql_stmt_free_result_d)(MYSQL_STMT *stmt);
extern unsigned int (*mysql_num_fields_d)(MYSQL_RES *result);
extern my_ulonglong (*mysql_stmt_num_rows_d)(MYSQL_STMT *stmt);
extern MYSQL_FIELD * (*mysql_fetch_field_d)(MYSQL_RES * result);
extern const char * (*mysql_character_set_name_d)(MYSQL *mysql);
extern my_ulonglong (*mysql_stmt_insert_id_d)(MYSQL_STMT *stmt);
extern my_ulonglong (*mysql_stmt_affected_rows_d)(MYSQL_STMT *stmt);
extern MYSQL_RES * (*mysql_stmt_result_metadata_d)(MYSQL_STMT * stmt);
extern int (*mysql_server_init_d)(int argc, char **argv, char **groups);
extern int (*mysql_set_character_set_d)(MYSQL *mysql, const char *csname);
extern my_bool (*mysql_stmt_bind_param_d)(MYSQL_STMT *stmt, MYSQL_BIND *bind);
extern int (*mysql_options_d)(MYSQL *mysql, enum mysql_option option, const void *arg);
extern int (*mysql_real_query_d)(MYSQL *mysql, const char *query, unsigned long length);
extern int (*mysql_stmt_prepare_d)(MYSQL_STMT *stmt, const char *query, unsigned long length);
extern unsigned long (*mysql_escape_string_d)(char *to, const char *from, unsigned long length);
extern my_bool (*mysql_stmt_attr_set_d)(MYSQL_STMT *stmt, enum enum_stmt_attr_type attr_type, const void *attr);
extern my_bool (*mysql_stmt_bind_result_d)(MYSQL_STMT *stmt, MYSQL_BIND *bind);
extern MYSQL * (*mysql_real_connect_d)(MYSQL * mysql, const char *name, const char *user, const char *passwd, const char *db, unsigned int port, const char *unix_socket, unsigned long client_flag);

//! OPENSSL
extern DH * (*DH_new_d)(void);
extern char **SSL_version_str_d;
extern int (*SSL_connect_d)(SSL *ssl);
extern const SSL_METHOD * (*SSLv23_client_method_d)(void);
extern const SSL_METHOD * (*TLSv1_server_method_d)(void);
extern void (*DH_free_d)(DH *dh);
extern int (*RAND_status_d)(void);
extern void (*EVP_cleanup_d)(void);
extern void (*OBJ_cleanup_d)(void);
extern void (*BN_free_d)(BIGNUM *a);
extern void (*RAND_cleanup_d)(void);
extern void (*SSL_free_d)(SSL *ssl);
extern int (*SSL_accept_d)(SSL *ssl);
extern EC_KEY * (*EC_KEY_new_d)(void);
extern void (*CRYPTO_free_d) (void *);
extern void (*ENGINE_cleanup_d)(void);
extern int (*CRYPTO_num_locks_d)(void);
extern int (*SSL_library_init_d)(void);
extern int (*SSL_want_d)(const SSL *s);
extern int (*SSL_shutdown_d)(SSL *ssl);
extern void (*BIO_sock_cleanup_d)(void);
extern void (*ERR_free_strings_d)(void);
extern SSL * (*SSL_new_d)(SSL_CTX * ctx);
extern const EVP_MD * (*EVP_md4_d)(void);
extern const EVP_MD * (*EVP_md5_d)(void);
extern const EVP_MD * (*EVP_sha_d)(void);
extern void (*COMP_zlib_cleanup_d)(void);
extern const EVP_MD * (*EVP_sha1_d)(void);
extern void (*EC_KEY_free_d)(EC_KEY *key);
extern int (*SSL_get_rfd_d)(const SSL *s);
extern const char * (*OBJ_nid2sn_d)(int n);
extern const EVP_MD * (*EVP_sha224_d)(void);
extern const EVP_MD * (*EVP_sha256_d)(void);
extern const EVP_MD * (*EVP_sha384_d)(void);
extern const EVP_MD * (*EVP_sha512_d)(void);
extern void (*OBJ_NAME_cleanup_d)(int type);
extern void (*SSL_CTX_free_d)(SSL_CTX *ctx);
extern int (*SSL_pending_d)(const SSL *ssl);
extern int	(*BN_num_bits_d)(const BIGNUM *);
extern int (*X509_get_ext_count_d) (X509 *x);
extern char * (*BN_bn2hex_d)(const BIGNUM *a);
extern int (*EVP_MD_size_d)(const EVP_MD *md);
extern unsigned long (*ERR_get_error_d)(void);
extern void (*CONF_modules_unload_d)(int all);
extern void (*HMAC_CTX_init_d)(HMAC_CTX *ctx);
extern void (*SSL_load_error_strings_d)(void);
extern int (*EVP_MD_type_d)(const EVP_MD *md);
extern const EVP_MD * (*EVP_ripemd160_d)(void);
extern const char * (*SSLeay_version_d)(int t);
extern BIO * (*SSL_get_wbio_d)(const SSL * ssl);
extern void (*EC_GROUP_free_d)(EC_GROUP *group);
extern void (*EC_POINT_free_d)(EC_POINT *point);
extern int (*EC_KEY_generate_key_d)(EC_KEY *key);
extern void (*ASN1_STRING_TABLE_cleanup_d)(void);
extern void (*HMAC_CTX_cleanup_d)(HMAC_CTX *ctx);
extern int (*SSL_get_shutdown_d)(const SSL *ssl);
extern void (*CRYPTO_cleanup_all_ex_data_d)(void);
extern void (*EVP_MD_CTX_init_d)(EVP_MD_CTX *ctx);
extern int (*EC_KEY_check_key_d)(const EC_KEY *key);
extern int (*EVP_MD_CTX_cleanup_d)(EVP_MD_CTX *ctx);
extern int 	(*SSL_peek_d)(SSL *ssl,void *buf,int num);
extern X509_NAME *	(*X509_get_subject_name_d)(X509 *a);
extern EC_KEY * (*EC_KEY_new_by_curve_name_d)(int nid);
extern int (*BN_hex2bn_d)(BIGNUM **a, const char *str);
extern int (*SSL_read_d)(SSL *ssl, void *buf, int num);
extern int (*RAND_bytes_d)(unsigned char *buf, int num);
extern void (*EVP_CIPHER_CTX_init_d)(EVP_CIPHER_CTX *a);
extern int (*EVP_CIPHER_nid_d)(const EVP_CIPHER *cipher);
extern void (*OPENSSL_add_all_algorithms_noconf_d)(void);
extern int	(*SSL_get_error_d)(const SSL *s,int ret_code);
extern const SSL_METHOD * (*SSLv23_server_method_d)(void);
extern X509 * (*SSL_get_peer_certificate_d)(const SSL *s);
extern int (*EVP_CIPHER_CTX_cleanup_d)(EVP_CIPHER_CTX *a);
extern BIO * (*BIO_new_socket_d)(int sock, int close_flag);
extern EC_GROUP * (*EC_GROUP_new_by_curve_name_d)(int nid);
extern EC_POINT * (*EC_POINT_new_d)(const EC_GROUP *group);
extern int	(*BN_bn2bin_d)(const BIGNUM *, unsigned char *);
extern X509_EXTENSION * (*X509_get_ext_d) (X509 *x, int loc);
extern SSL_CTX * (*SSL_CTX_new_d)(const SSL_METHOD * method);
extern void (*SSL_set_bio_d)(SSL *ssl, BIO *rbio, BIO *wbio);
extern int (*SSL_CTX_check_private_key_d)(const SSL_CTX *ctx);
extern int (*SSL_write_d)(SSL *ssl, const void *buf, int num);
extern void (*sk_pop_free_d)(_STACK *st, void(*func)(void *));
extern int (*EVP_CIPHER_iv_length_d)(const EVP_CIPHER *cipher);
extern char * (*ERR_error_string_d)(unsigned long e, char *buf);
extern int (*EVP_CIPHER_block_size_d)(const EVP_CIPHER *cipher);
extern int (*EVP_CIPHER_key_length_d)(const EVP_CIPHER *cipher);
extern const EC_GROUP * (*EC_KEY_get0_group_d)(const EC_KEY *key);
extern const EVP_MD * (*EVP_get_digestbyname_d)(const char *name);
extern int	(*SSL_CTX_set_cipher_list_d)(SSL_CTX *,const char *str);
extern int (*EVP_CIPHER_CTX_iv_length_d)(const EVP_CIPHER_CTX *ctx);
extern int (*EVP_DigestInit_d)(EVP_MD_CTX *ctx, const EVP_MD *type);
extern int (*EC_KEY_set_group_d)(EC_KEY *key, const EC_GROUP *group);
extern int (*EVP_CIPHER_CTX_block_size_d)(const EVP_CIPHER_CTX *ctx);
extern int (*EVP_CIPHER_CTX_key_length_d)(const EVP_CIPHER_CTX *ctx);
extern int (*RAND_load_file_d)(const char *filename, long max_bytes);
extern void (*ERR_remove_thread_state_d)(const CRYPTO_THREADID *tid);
extern unsigned long (*EVP_CIPHER_flags_d)(const EVP_CIPHER *cipher);
extern const BIGNUM * (*EC_KEY_get0_private_key_d)(const EC_KEY *key);
extern const EVP_CIPHER * (*EVP_get_cipherbyname_d)(const char *name);
extern const EC_POINT * (*EC_KEY_get0_public_key_d)(const EC_KEY *key);
extern int (*EC_GROUP_precompute_mult_d)(EC_GROUP *group, BN_CTX *ctx);
extern int (*EC_KEY_set_private_key_d)(EC_KEY *key, const BIGNUM *prv);
extern int (*EVP_CIPHER_CTX_set_padding_d)(EVP_CIPHER_CTX *c, int pad);
extern STACK_OF(SSL_COMP) * (*SSL_COMP_get_compression_methods_d)(void);
extern int (*BIO_vprintf_d)(BIO *bio, const char *format, va_list args);
extern int (*EC_KEY_set_public_key_d)(EC_KEY *key, const EC_POINT *pub);
extern unsigned long (*EVP_CIPHER_CTX_flags_d)(const EVP_CIPHER_CTX *ctx);
extern void (*CRYPTO_set_id_callback_d)(unsigned long(*id_function)(void));
extern long (*SSL_CTX_ctrl_d)(SSL_CTX *ctx, int cmd, long larg, void *parg);
extern void (*ERR_error_string_n_d)(unsigned long e, char *buf, size_t len);
extern BIGNUM * (*BN_bin2bn_d)(const unsigned char *s, int len, BIGNUM *ret);
extern int (*EVP_DigestUpdate_d)(EVP_MD_CTX *ctx, const void *d, size_t cnt);
extern int (*HMAC_Final_d)(HMAC_CTX *ctx, unsigned char *md, unsigned int *len);
extern int (*HMAC_Update_d)(HMAC_CTX *ctx, const unsigned char *data, size_t len);
extern int (*SSL_CTX_use_certificate_chain_file_d)(SSL_CTX *ctx, const char *file);
extern int (*EVP_DigestFinal_d)(EVP_MD_CTX *ctx, unsigned char *md, unsigned int *s);
extern int (*EVP_DigestInit_ex_d)(EVP_MD_CTX *ctx, const EVP_MD *type, ENGINE *impl);
extern int (*SSL_CTX_use_PrivateKey_file_d)(SSL_CTX *ctx, const char *file, int type);
extern int (*EVP_CIPHER_CTX_ctrl_d)(EVP_CIPHER_CTX *ctx, int type, int arg, void *ptr);
extern int (*X509_NAME_get_text_by_NID_d)(X509_NAME *name, int nid, char *buf,int len);
extern int (*EVP_DigestFinal_ex_d)(EVP_MD_CTX *ctx, unsigned char *md, unsigned int *s);
extern int (*EVP_EncryptFinal_ex_d)(EVP_CIPHER_CTX *ctx, unsigned char *out, int *outl);
extern int (*EVP_DecryptFinal_ex_d)(EVP_CIPHER_CTX *ctx, unsigned char *outm, int *outl);
extern void (*EC_GROUP_set_point_conversion_form_d)(EC_GROUP *, point_conversion_form_t);
extern int	(*DH_generate_parameters_ex_d)(DH *dh, int prime_len,int generator, BN_GENCB *cb);
extern EC_POINT * (*EC_POINT_hex2point_d)(const EC_GROUP *, const char *, EC_POINT *, BN_CTX *);
extern int (*SSL_CTX_load_verify_locations_d)(SSL_CTX *ctx, const char *CAfile, const char *CApath);
extern int (*HMAC_Init_ex_d)(HMAC_CTX *ctx, const void *key, int len, const EVP_MD *md, ENGINE *impl);
extern void (*SSL_CTX_set_tmp_dh_callback_d)(SSL_CTX *ctx, DH *(*dh)(SSL *ssl,int is_export, int keylength)) ;
extern char * (*EC_POINT_point2hex_d)(const EC_GROUP *, const EC_POINT *, point_conversion_form_t form, BN_CTX *);
extern void (*CRYPTO_set_locking_callback_d)(void(*locking_function)(int mode, int n, const char *file, int line));
extern void (*SSL_CTX_set_tmp_ecdh_callback_d)(SSL_CTX *ctx, EC_KEY *(*ecdh)(SSL *ssl,int is_export, int keylength));
extern int (*EVP_DecryptUpdate_d)(EVP_CIPHER_CTX *ctx, unsigned char *out, int *outl, const unsigned char *in, int inl);
extern int (*EVP_EncryptUpdate_d)(EVP_CIPHER_CTX *ctx, unsigned char *out, int *outl, const unsigned char *in, int inl);
extern int (*EC_POINT_oct2point_d)(const EC_GROUP *group, EC_POINT *p, const unsigned char *buf, size_t len, BN_CTX *ctx);
extern int (*EVP_Digest_d)(const void *data, size_t count, unsigned char *md, unsigned int *size, const EVP_MD *type, ENGINE *impl);
extern int (*EVP_DecryptInit_ex_d)(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *cipher, ENGINE *impl, const unsigned char *key, const unsigned char *iv);
extern int (*EVP_EncryptInit_ex_d)(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *cipher, ENGINE *impl, const unsigned char *key, const unsigned char *iv);
extern size_t (*EC_POINT_point2oct_d)(const EC_GROUP *group, const EC_POINT *p, point_conversion_form_t form, unsigned char *buf, size_t len, BN_CTX *ctx);
extern int (*ECDH_compute_key_d)(void *out, size_t outlen, const EC_POINT *pub_key, EC_KEY *ecdh, void *(*KDF)(const void *in, size_t inlen, void *out, size_t *outlen));




/////////////
///
/// new functions which need to be added to symbols.c and then bound by loader in openssl.c
///
///

extern void (*ERR_put_error_d)(int lib, int func, int reason, const char *file, int line);
extern void (*ERR_clear_error_d)(void);
extern void *(*sk_pop_d)(_STACK *st);
extern int (*i2d_OCSP_RESPONSE_d)(OCSP_RESPONSE *a, unsigned char **out);
extern ECDSA_SIG * (*ECDSA_do_sign_d)(const unsigned char *dgst, int dgst_len, EC_KEY *eckey);
extern void (*ECDSA_SIG_free_d)(ECDSA_SIG *a);
extern int (*i2d_OCSP_CERTID_d)(OCSP_CERTID *a, unsigned char **out);
extern OCSP_RESPONSE * (*d2i_OCSP_RESPONSE_d)(OCSP_RESPONSE **a, const unsigned char **in, long len);
extern OCSP_REQUEST * (*OCSP_REQUEST_new_d)(void);
extern void (*OCSP_BASICRESP_free_d)(OCSP_BASICRESP *a);
extern int (*i2d_X509_d)(X509 *a, unsigned char **out);
extern long (*SSL_CTX_callback_ctrl_d)(SSL_CTX *, int, void (*)(void));
extern long (*SSL_ctrl_d)(SSL *s, int cmd, long larg, void *parg);
extern ASN1_STRING * (*X509_NAME_ENTRY_get_data_d)(X509_NAME_ENTRY *ne);
extern BIGNUM * (*ASN1_INTEGER_to_BN_d)(const ASN1_INTEGER *ai, BIGNUM *bn);
extern BIO * (*BIO_new_fp_d)(FILE *stream, int close_flag);
extern char * (*X509_NAME_oneline_d)(X509_NAME *a, char *buf, int len);
extern const char * (*OCSP_response_status_str_d)(long s);
extern const char * (*X509_verify_cert_error_string_d)(long n);
extern const EVP_CIPHER * (*EVP_aes_256_cbc_d)(void);
extern EC_KEY * (*d2i_ECPrivateKey_d)(EC_KEY **key, const unsigned char **in, long len);
extern EC_KEY * (*o2i_ECPublicKey_d)(EC_KEY **key, const unsigned char **in, long len);
extern ECDSA_SIG * (*d2i_ECDSA_SIG_d)(ECDSA_SIG **sig, const unsigned char **pp, long len);
extern EVP_CIPHER_CTX * (*EVP_CIPHER_CTX_new_d)(void);
extern EVP_PKEY * (*EVP_PKEY_new_d)(void);
extern int (*ASN1_GENERALIZEDTIME_print_d)(BIO *fp, const ASN1_GENERALIZEDTIME *a);
extern int (*BIO_free_d)(BIO *a);
extern int (*ECDSA_do_verify_d)(const unsigned char *dgst, int dgst_len, const ECDSA_SIG *sig, EC_KEY *eckey);
extern int (*EVP_PKEY_set1_RSA_d)(EVP_PKEY *pkey, struct rsa_st *key);
extern int (*EVP_VerifyFinal_d)(EVP_MD_CTX *ctx, const unsigned char *sigbuf, unsigned int siglen, EVP_PKEY *pkey);
extern int (*i2d_ECDSA_SIG_d)(const ECDSA_SIG *sig, unsigned char **pp);
extern int (*i2d_ECPrivateKey_d)(EC_KEY *key, unsigned char **out);
extern int (*i2o_ECPublicKey_d)(EC_KEY *key, unsigned char **out);
extern int (*OCSP_basic_verify_d)(void *bs, struct stack_st_X509 *certs, struct x509_store_st *st, unsigned long flags);
extern int (*OCSP_check_nonce_d)(void *req, void *bs);
extern int (*OCSP_check_validity_d)(ASN1_GENERALIZEDTIME *thisupd, ASN1_GENERALIZEDTIME *nextupd, long sec, long maxsec);
extern int (*OCSP_parse_url_d)(const char *url, char **phost, char **pport, char **ppath, int *pssl);
extern int (*OCSP_REQ_CTX_add1_header_d)(OCSP_REQ_CTX *rctx, const char *name, const char *value);
extern int (*OCSP_REQ_CTX_set1_req_d)(OCSP_REQ_CTX *rctx, void *req);
extern int (*OCSP_request_add1_nonce_d)(void *req, unsigned char *val, int len);
extern int (*OCSP_REQUEST_print_d)(BIO *bp, void *a, unsigned long flags);
extern int (*OCSP_resp_find_status_d)(void *bs, void *id, int *status, int *reason, ASN1_GENERALIZEDTIME **revtime, ASN1_GENERALIZEDTIME **thisupd, ASN1_GENERALIZEDTIME **nextupd);
extern int (*OCSP_RESPONSE_print_d)(BIO *bp, OCSP_RESPONSE *o, unsigned long flags);
extern int (*OCSP_response_status_d)(OCSP_RESPONSE *resp);
extern int (*OCSP_sendreq_nbio_d)(OCSP_RESPONSE **presp, OCSP_REQ_CTX *rctx);
extern int (*SHA1_Final_d)(unsigned char *md, SHA_CTX *c);
extern int (*SHA1_Init_d)(SHA_CTX *c);
extern int (*SHA1_Update_d)(SHA_CTX *c, const void *data, size_t len);
extern int (*SHA256_Final_d)(unsigned char *md, SHA256_CTX *c);
extern int (*SHA256_Init_d)(SHA256_CTX *c);
extern int (*SHA256_Update_d)(SHA256_CTX *c, const void *data, size_t len);
extern int (*SHA512_Final_d)(unsigned char *md, SHA512_CTX *c);
extern int (*SHA512_Init_d)(SHA512_CTX *c);
extern int (*SHA512_Update_d)(SHA512_CTX *c, const void *data, size_t len);
extern int (*sk_num_d)(const _STACK *);
extern int (*SSL_get_fd_d)(const SSL *s);
extern int (*SSL_set_fd_d)(SSL *s, int fd);
extern int (*X509_check_host_d)(X509 *x, const char *chk, size_t chklen, unsigned int flags, char **peername);
extern int (*X509_check_issued_d)(X509 *issuer, X509 *subject);
extern int (*X509_NAME_get_index_by_NID_d)(X509_NAME *name, int nid, int lastpos);
extern int (*X509_STORE_CTX_get_error_d)(X509_STORE_CTX *ctx);
extern int (*X509_STORE_CTX_get_error_depth_d)(X509_STORE_CTX *ctx);
extern int (*X509_STORE_CTX_init_d)(X509_STORE_CTX *ctx, X509_STORE *store, X509 *x509, STACK_OF(X509) *chain);
extern int (*X509_STORE_load_locations_d)(X509_STORE *ctx, const char *file, const char *path);
extern int (*X509_STORE_set_flags_d)(X509_STORE *ctx, unsigned long flags);
extern int (*X509_verify_cert_d)(X509_STORE_CTX *ctx);
extern OCSP_REQ_CTX * (*OCSP_sendreq_new_d)(BIO *io, const char *path, void *req, int maxline);
extern RSA * (*RSA_new_d)(void);
extern RSA * (*RSAPublicKey_dup_d)(RSA *rsa);
extern size_t (*BUF_strlcat_d)(char *dst, const char *src, size_t siz);
extern struct stack_st_OPENSSL_STRING * (*X509_get1_ocsp_d)(X509 *x);
extern struct stack_st_X509 * (*SSL_get_peer_cert_chain_d)(const SSL *s);
extern unsigned char * (*ASN1_STRING_data_d)(ASN1_STRING *x);
extern unsigned char * (*SHA512_d)(const unsigned char *d, size_t n, unsigned char *md);
extern unsigned long (*ERR_peek_error_line_data_d)(const char **file, int *line, const char **data, int *flags);
extern void (*BIO_free_all_d)(BIO *a);
extern void (*EC_GROUP_clear_free_d)(EC_GROUP *group);
extern void (*ERR_load_crypto_strings_d)(void);
extern void (*ERR_print_errors_fp_d)(FILE *fp);
extern void (*EVP_CIPHER_CTX_free_d)(EVP_CIPHER_CTX *a);
extern void (*OCSP_REQUEST_free_d)(OCSP_REQUEST *a);
extern void (*OCSP_RESPONSE_free_d)(OCSP_RESPONSE *a);
extern void (*RSA_free_d)(RSA *r);
extern void (*SSL_CTX_set_verify_d)(SSL_CTX *ctx, int mode, int (*cb) (int, X509_STORE_CTX *));
extern void (*X509_email_free_d)(struct stack_st_OPENSSL_STRING *sk);
extern void (*X509_STORE_CTX_free_d)(X509_STORE_CTX *ctx);
extern void (*X509_STORE_CTX_set_chain_d)(struct x509_store_ctx_st *ctx, struct stack_st_X509 *sk);
extern void (*X509_STORE_free_d)(X509_STORE *v);
extern void * (*OCSP_cert_to_id_d)(const EVP_MD *dgst, X509 *subject, X509 *issuer);
extern void * (*OCSP_request_add0_id_d)(void *req, void *cid);
extern void * (*OCSP_response_get1_basic_d)(OCSP_RESPONSE *resp);
extern void * (*sk_value_d)(const _STACK *, int);
extern X509 * (*X509_STORE_CTX_get_current_cert_d)(X509_STORE_CTX *ctx);
extern X509_LOOKUP * (*X509_STORE_add_lookup_d)(X509_STORE *v, X509_LOOKUP_METHOD *m);
extern X509_LOOKUP_METHOD * (*X509_LOOKUP_file_d)(void);
extern X509_NAME_ENTRY * (*X509_NAME_get_entry_d)(X509_NAME *name, int loc);
extern X509_STORE * (*X509_STORE_new_d)(void);
extern X509_STORE_CTX * (*X509_STORE_CTX_new_d)(void);


//extern int (*X509_STORE_CTX_init_d)(X509_STORE_CTX *ctx, X509_STORE *store, X509 *x509, struct stack_st_X509 *chain);*/

//ASN1_item_d2i((ASN1_VALUE **)a, in, len, ASN1_ITEM_rptr(itname));
//ASN1_item_i2d((ASN1_VALUE *)a, out, ASN1_ITEM_rptr(itname));

/*
extern void (*AES_bi_ige_encrypt_d)(const unsigned char *in, unsigned char *out,
                        size_t length, const AES_KEY *key,
                        const AES_KEY *key2, const unsigned char *ivec,
                        const int enc);
extern void (*AES_cbc_encrypt_d)(const unsigned char *in, unsigned char *out, size_t length, const AES_KEY *key, unsigned char *ivec, const int enc);
extern void (*AES_cfb128_encrypt_d)(const unsigned char *in, unsigned char *out, size_t length, const AES_KEY *key, unsigned char *ivec, int *num, const int enc);
extern void (*AES_cfb1_encrypt_d)(const unsigned char *in, unsigned char *out, size_t length, const AES_KEY *key, unsigned char *ivec, int *num, const int enc);
extern void (*AES_cfb8_encrypt_d)(const unsigned char *in, unsigned char *out, size_t length, const AES_KEY *key, unsigned char *ivec, int *num, const int enc);
extern void (*AES_ctr128_encrypt_d)(const unsigned char *in, unsigned char *out, size_t length, const AES_KEY *key, unsigned char ivec[AES_BLOCK_SIZE], unsigned char ecount_buf[AES_BLOCK_SIZE], unsigned int *num);
extern void (*AES_decrypt_d)(const unsigned char *in, unsigned char *out, const AES_KEY *key);
extern void (*AES_ecb_encrypt_d)(const unsigned char *in, unsigned char *out, const AES_KEY *key, const int enc);
extern void (*AES_encrypt_d)(const unsigned char *in, unsigned char *out, const AES_KEY *key);
extern void (*AES_ige_encrypt_d)(const unsigned char *in, unsigned char *out, size_t length, const AES_KEY *key, unsigned char *ivec, const int enc);
extern void (*AES_ofb128_encrypt_d)(const unsigned char *in, unsigned char *out, size_t length, const AES_KEY *key, unsigned char *ivec, int *num);
extern const char *(*AES_options_d)(void);
extern int (*AES_set_decrypt_key_d)(const unsigned char *userKey, const int bits, AES_KEY *key);
extern int (*AES_set_encrypt_key_d)(const unsigned char *userKey, const int bits, AES_KEY *key);
extern int (*AES_unwrap_key_d)(AES_KEY *key, const unsigned char *iv, unsigned char *out, const unsigned char *in, unsigned int inlen);
extern int (*AES_wrap_key_d)(AES_KEY *key, const unsigned char *iv, unsigned char *out, const unsigned char *in, unsigned int inlen);*/


/*extern int (*ASN1_BIT_STRING_check_d)(ASN1_BIT_STRING *a, unsigned char *flags, int flags_len);
extern int (*ASN1_BIT_STRING_get_bit_d)(ASN1_BIT_STRING *a, int n);
extern int (*ASN1_BIT_STRING_name_print_d)(BIO *out, ASN1_BIT_STRING *bs, BIT_STRING_BITNAME *tbl, int indent);
extern int (*ASN1_BIT_STRING_num_asc_d)(char *name, BIT_STRING_BITNAME *tbl);
extern int (*ASN1_BIT_STRING_set_d)(ASN1_BIT_STRING *a, unsigned char *d, int length);
extern int (*ASN1_BIT_STRING_set_asc_d)(ASN1_BIT_STRING *bs, char *name, int value, BIT_STRING_BITNAME *tbl);
extern int (*ASN1_BIT_STRING_set_bit_d)(ASN1_BIT_STRING *a, int n, int value);
extern long (*ASN1_ENUMERATED_get_d)(ASN1_ENUMERATED *a);
extern int (*ASN1_ENUMERATED_set_d)(ASN1_ENUMERATED *a, long v);
extern BIGNUM *(*ASN1_ENUMERATED_to_BN_d)(ASN1_ENUMERATED *ai, BIGNUM *bn);
extern ASN1_GENERALIZEDTIME *(*ASN1_GENERALIZEDTIME_adj_d)(ASN1_GENERALIZEDTIME *s, time_t t, int offset_day, long offset_sec);
extern int (*ASN1_GENERALIZEDTIME_check_d)(const ASN1_GENERALIZEDTIME *a);
extern int (*ASN1_GENERALIZEDTIME_print_d)(BIO *fp, const ASN1_GENERALIZEDTIME *a);
extern ASN1_GENERALIZEDTIME *(*ASN1_GENERALIZEDTIME_set_d)(ASN1_GENERALIZEDTIME *s, time_t t);
extern int (*ASN1_GENERALIZEDTIME_set_string_d)(ASN1_GENERALIZEDTIME *s, const char *str);
extern int (*ASN1_INTEGER_cmp_d)(const ASN1_INTEGER *x, const ASN1_INTEGER *y);
extern ASN1_INTEGER *(*ASN1_INTEGER_dup_d)(const ASN1_INTEGER *x);
extern long (*ASN1_INTEGER_get_d)(const ASN1_INTEGER *a);
extern int (*ASN1_INTEGER_set_d)(ASN1_INTEGER *a, long v);
extern BIGNUM *(*ASN1_INTEGER_to_BN_d)(const ASN1_INTEGER *ai, BIGNUM *bn);
extern ASN1_OBJECT *(*ASN1_OBJECT_create_d)(int nid, unsigned char *data, int len, const char *sn, const char *ln);
extern void (*ASN1_OBJECT_free_d)(ASN1_OBJECT *a);
extern ASN1_OBJECT *(*ASN1_OBJECT_new_d)(void);
extern int (*ASN1_OCTET_STRING_cmp_d)(const ASN1_OCTET_STRING *a, const ASN1_OCTET_STRING *b);
extern ASN1_OCTET_STRING *(*ASN1_OCTET_STRING_dup_d)(const ASN1_OCTET_STRING *a);
extern int (*ASN1_OCTET_STRING_set_d)(ASN1_OCTET_STRING *str, const unsigned char *data, int len);
extern void (*ASN1_PCTX_free_d)(ASN1_PCTX *p);
extern unsigned long (*ASN1_PCTX_get_cert_flags_d)(ASN1_PCTX *p);
extern unsigned long (*ASN1_PCTX_get_flags_d)(ASN1_PCTX *p);
extern unsigned long (*ASN1_PCTX_get_nm_flags_d)(ASN1_PCTX *p);
extern unsigned long (*ASN1_PCTX_get_oid_flags_d)(ASN1_PCTX *p);
extern unsigned long (*ASN1_PCTX_get_str_flags_d)(ASN1_PCTX *p);
extern ASN1_PCTX *(*ASN1_PCTX_new_d)(void);
extern void (*ASN1_PCTX_set_cert_flags_d)(ASN1_PCTX *p, unsigned long flags);
extern void (*ASN1_PCTX_set_flags_d)(ASN1_PCTX *p, unsigned long flags);
extern void (*ASN1_PCTX_set_nm_flags_d)(ASN1_PCTX *p, unsigned long flags);
extern void (*ASN1_PCTX_set_oid_flags_d)(ASN1_PCTX *p, unsigned long flags);
extern void (*ASN1_PCTX_set_str_flags_d)(ASN1_PCTX *p, unsigned long flags);
extern int (*ASN1_PRINTABLE_type_d)(const unsigned char *s, int max);
extern int (*ASN1_STRING_TABLE_add_d)(int, long, long, unsigned long, unsigned long);
extern void (*ASN1_STRING_TABLE_cleanup_d)(void);
extern ASN1_STRING_TABLE *(*ASN1_STRING_TABLE_get_d)(int nid);
extern void (*ASN1_STRING_clear_free_d)(ASN1_STRING *a);
extern int (*ASN1_STRING_cmp_d)(const ASN1_STRING *a, const ASN1_STRING *b);
extern int (*ASN1_STRING_copy_d)(ASN1_STRING *dst, const ASN1_STRING *str);
extern unsigned char *(*ASN1_STRING_data_d)(ASN1_STRING *x);
extern ASN1_STRING *(*ASN1_STRING_dup_d)(const ASN1_STRING *a);
extern void (*ASN1_STRING_free_d)(ASN1_STRING *a);
extern unsigned long (*ASN1_STRING_get_default_mask_d)(void);
extern int (*ASN1_STRING_length_d)(const ASN1_STRING *x);
extern void (*ASN1_STRING_length_set_d)(ASN1_STRING *x, int n);
extern ASN1_STRING *(*ASN1_STRING_new_d)(void);
extern int (*ASN1_STRING_print_d)(BIO *bp, const ASN1_STRING *v);
extern int (*ASN1_STRING_print_ex_d)(BIO *out, ASN1_STRING *str, unsigned long flags);
extern int (*ASN1_STRING_print_ex_fp_d)(FILE *fp, ASN1_STRING *str, unsigned long flags);
extern int (*ASN1_STRING_set_d)(ASN1_STRING *str, const void *data, int len);
extern void (*ASN1_STRING_set0_d)(ASN1_STRING *str, void *data, int len);
extern ASN1_STRING *(*ASN1_STRING_set_by_NID_d)(ASN1_STRING **out, const unsigned char *in, int inlen, int inform, int nid);
extern void (*ASN1_STRING_set_default_mask_d)(unsigned long mask);
extern int (*ASN1_STRING_set_default_mask_asc_d)(const char *p);
extern int (*ASN1_STRING_to_UTF8_d)(unsigned char **out, ASN1_STRING *in);
extern int (*ASN1_STRING_type_d)(ASN1_STRING *x);
extern ASN1_STRING *(*ASN1_STRING_type_new_d)(int type);
extern ASN1_TIME *(*ASN1_TIME_adj_d)(ASN1_TIME *s, time_t t, int offset_day, long offset_sec);
extern int (*ASN1_TIME_check_d)(ASN1_TIME *t);
extern int (*ASN1_TIME_diff_d)(int *pday, int *psec, const ASN1_TIME *from, const ASN1_TIME *to);
extern int (*ASN1_TIME_print_d)(BIO *fp, const ASN1_TIME *a);
extern ASN1_TIME *(*ASN1_TIME_set_d)(ASN1_TIME *s, time_t t);
extern int (*ASN1_TIME_set_string_d)(ASN1_TIME *s, const char *str);
extern ASN1_GENERALIZEDTIME *(*ASN1_TIME_to_generalizedtime_d)(ASN1_TIME *t, ASN1_GENERALIZEDTIME **out);
extern int (*ASN1_TYPE_cmp_d)(const ASN1_TYPE *a, const ASN1_TYPE *b);
extern int (*ASN1_TYPE_get_d)(ASN1_TYPE *a);
extern int (*ASN1_TYPE_get_int_octetstring_d)(ASN1_TYPE *a, long *num, unsigned char *data, int max_len);
extern int (*ASN1_TYPE_get_octetstring_d)(ASN1_TYPE *a, unsigned char *data, int max_len);
extern void (*ASN1_TYPE_set_d)(ASN1_TYPE *a, int type, void *value);
extern int (*ASN1_TYPE_set1_d)(ASN1_TYPE *a, int type, const void *value);
extern int (*ASN1_TYPE_set_int_octetstring_d)(ASN1_TYPE *a, long num, unsigned char *data, int len);
extern int (*ASN1_TYPE_set_octetstring_d)(ASN1_TYPE *a, unsigned char *data, int len);
extern int (*ASN1_UNIVERSALSTRING_to_string_d)(ASN1_UNIVERSALSTRING *s);
extern ASN1_UTCTIME *(*ASN1_UTCTIME_adj_d)(ASN1_UTCTIME *s, time_t t, int offset_day, long offset_sec);
extern int (*ASN1_UTCTIME_check_d)(const ASN1_UTCTIME *a);
extern int (*ASN1_UTCTIME_cmp_time_t_d)(const ASN1_UTCTIME *s, time_t t);
extern int (*ASN1_UTCTIME_print_d)(BIO *fp, const ASN1_UTCTIME *a);
extern ASN1_UTCTIME *(*ASN1_UTCTIME_set_d)(ASN1_UTCTIME *s, time_t t);
extern int (*ASN1_UTCTIME_set_string_d)(ASN1_UTCTIME *s, const char *str);
extern void (*ASN1_add_oid_module_d)(void);
extern int (*ASN1_bn_print_d)(BIO *bp, const char *number, const BIGNUM *num, unsigned char *buf, int off);
extern int (*ASN1_check_infinite_end_d)(unsigned char **p, long len);
extern int (*ASN1_const_check_infinite_end_d)(const unsigned char **p, long len);
extern void * (*ASN1_d2i_bio_d)(void *(*xnew) (void), d2i_of_void *d2i, BIO *in, void **x);
extern void * (*ASN1_d2i_fp_d)(void *(*xnew) (void), d2i_of_void *d2i, FILE *in, void **x);
extern int (*ASN1_digest_d)(i2d_of_void *i2d, const EVP_MD *type, char *data, unsigned char *md, unsigned int *len);
extern void *(*ASN1_dup_d)(i2d_of_void *i2d, d2i_of_void *d2i, void *x);
extern ASN1_TYPE *(*ASN1_generate_nconf_d)(char *str, CONF *nconf);
extern ASN1_TYPE *(*ASN1_generate_v3_d)(char *str, X509V3_CTX *cnf);
extern int (*ASN1_get_object_d)(const unsigned char **pp, long *plength, int *ptag, int *pclass, long omax);
extern int (*ASN1_i2d_bio_d)(i2d_of_void *i2d, BIO *out, unsigned char *x);
extern int (*ASN1_i2d_fp_d)(i2d_of_void *i2d, FILE *out, void *x);
extern ASN1_VALUE *(*ASN1_item_d2i_d)(ASN1_VALUE **val, const unsigned char **in, long len, const ASN1_ITEM *it);
extern void *(*ASN1_item_d2i_bio_d)(const ASN1_ITEM *it, BIO *in, void *x);
extern void *(*ASN1_item_d2i_fp_d)(const ASN1_ITEM *it, FILE *in, void *x);
extern int (*ASN1_item_digest_d)(const ASN1_ITEM *it, const EVP_MD *type, void *data, unsigned char *md, unsigned int *len);
extern void *(*ASN1_item_dup_d)(const ASN1_ITEM *it, void *x);
extern int (*ASN1_item_ex_d2i_d)(ASN1_VALUE **pval, const unsigned char **in, long len, const ASN1_ITEM *it, int tag, int aclass, char opt, ASN1_TLC *ctx);
extern void (*ASN1_item_ex_free_d)(ASN1_VALUE **pval, const ASN1_ITEM *it);
extern int (*ASN1_item_ex_i2d_d)(ASN1_VALUE **pval, unsigned char **out, const ASN1_ITEM *it, int tag, int aclass);
extern int (*ASN1_item_ex_new_d)(ASN1_VALUE **pval, const ASN1_ITEM *it);
extern void (*ASN1_item_free_d)(ASN1_VALUE *val, const ASN1_ITEM *it);
extern int (*ASN1_item_i2d_d)(ASN1_VALUE *val, unsigned char **out, const ASN1_ITEM *it);
extern int (*ASN1_item_i2d_bio_d)(const ASN1_ITEM *it, BIO *out, void *x);
extern int (*ASN1_item_i2d_fp_d)(const ASN1_ITEM *it, FILE *out, void *x);
extern int (*ASN1_item_ndef_i2d_d)(ASN1_VALUE *val, unsigned char **out, const ASN1_ITEM *it);
extern ASN1_VALUE *(*ASN1_item_new_d)(const ASN1_ITEM *it);
extern ASN1_STRING *(*ASN1_item_pack_d)(void *obj, const ASN1_ITEM *it, ASN1_OCTET_STRING **oct);
extern int (*ASN1_item_print_d)(BIO *out, ASN1_VALUE *ifld, int indent, const ASN1_ITEM *it, const ASN1_PCTX *pctx);
extern int (*ASN1_item_sign_d)(const ASN1_ITEM *it, X509_ALGOR *algor1, X509_ALGOR *algor2, ASN1_BIT_STRING *signature, void *data, EVP_PKEY *pkey, const EVP_MD *type);
extern int (*ASN1_item_sign_ctx_d)(const ASN1_ITEM *it, X509_ALGOR *algor1, X509_ALGOR *algor2, ASN1_BIT_STRING *signature, void *asn, EVP_MD_CTX *ctx);
extern void *(*ASN1_item_unpack_d)(ASN1_STRING *oct, const ASN1_ITEM *it);
extern int (*ASN1_item_verify_d)(const ASN1_ITEM *it, X509_ALGOR *algor1, ASN1_BIT_STRING *signature, void *data, EVP_PKEY *pkey);
extern int (*ASN1_mbstring_copy_d)(ASN1_STRING **out, const unsigned char *in, int len, int inform, unsigned long mask);
extern int (*ASN1_mbstring_ncopy_d)(ASN1_STRING **out, const unsigned char *in, int len, int inform, unsigned long mask, long minsize, long maxsize);
extern int (*ASN1_object_size_d)(int constructed, int length, int tag);
extern ASN1_STRING *(*ASN1_pack_string_d)(void *obj, i2d_of_void *i2d, ASN1_OCTET_STRING **oct);
extern int (*ASN1_parse_d)(BIO *bp, const unsigned char *pp, long len, int indent);
extern int (*ASN1_parse_dump_d)(BIO *bp, const unsigned char *pp, long len, int indent, int dump);
extern void (*ASN1_primitive_free_d)(ASN1_VALUE **pval, const ASN1_ITEM *it);
extern int (*ASN1_primitive_new_d)(ASN1_VALUE **pval, const ASN1_ITEM *it);
extern int (*ASN1_put_eoc_d)(unsigned char **pp);
extern void (*ASN1_put_object_d)(unsigned char **pp, int constructed, int length, int tag, int xclass);
extern unsigned char *(*ASN1_seq_pack_d)(struct stack_st_OPENSSL_BLOCK *safes, i2d_of_void *i2d, unsigned char **buf, int *len);
extern struct stack_st_OPENSSL_BLOCK *(*ASN1_seq_unpack_d)(const unsigned char *buf, int len, d2i_of_void *d2i, void (*free_func) (OPENSSL_BLOCK));
extern int (*ASN1_sign_d)(i2d_of_void *i2d, X509_ALGOR *algor1, X509_ALGOR *algor2, ASN1_BIT_STRING *signature, char *data, EVP_PKEY *pkey, const EVP_MD *type);
extern unsigned long (*ASN1_tag2bit_d)(int tag);
extern const char *(*ASN1_tag2str_d)(int tag);
extern int (*ASN1_template_d2i_d)(ASN1_VALUE **pval, const unsigned char **in, long len, const ASN1_TEMPLATE *tt);
extern void (*ASN1_template_free_d)(ASN1_VALUE **pval, const ASN1_TEMPLATE *tt);
extern int (*ASN1_template_i2d_d)(ASN1_VALUE **pval, unsigned char **out, const ASN1_TEMPLATE *tt);
extern int (*ASN1_template_new_d)(ASN1_VALUE **pval, const ASN1_TEMPLATE *tt);
extern void *(*ASN1_unpack_string_d)(ASN1_STRING *oct, d2i_of_void *d2i);
extern int (*ASN1_verify_d)(i2d_of_void *i2d, X509_ALGOR *algor1, ASN1_BIT_STRING *signature, char *data, EVP_PKEY *pkey);
extern int (*BIO_accept_d)(int sock, char **ip_port);
extern int (*BIO_asn1_get_prefix_d)(BIO *b, asn1_ps_func **pprefix, asn1_ps_func **pprefix_free);
extern int (*BIO_asn1_get_suffix_d)(BIO *b, asn1_ps_func **psuffix, asn1_ps_func **psuffix_free);
extern int (*BIO_asn1_set_prefix_d)(BIO *b, asn1_ps_func *prefix, asn1_ps_func *prefix_free);
extern int (*BIO_asn1_set_suffix_d)(BIO *b, asn1_ps_func *suffix, asn1_ps_func *suffix_free);
extern long (*BIO_callback_ctrl_d)(BIO *b, int cmd, void (*fp) (struct bio_st *, int, const char *, int, long, long));
extern void (*BIO_clear_flags_d)(BIO *b, int flags);
extern void (*BIO_copy_next_retry_d)(BIO *b);
extern long (*BIO_ctrl_d)(BIO *bp, int cmd, long larg, void *parg);
extern size_t (*BIO_ctrl_get_read_request_d)(BIO *b);
extern size_t (*BIO_ctrl_get_write_guarantee_d)(BIO *b);
extern size_t (*BIO_ctrl_pending_d)(BIO *b);
extern int (*BIO_ctrl_reset_read_request_d)(BIO *b);
extern size_t (*BIO_ctrl_wpending_d)(BIO *b);
extern long (*BIO_debug_callback_d)(BIO *bio, int cmd, const char *argp, int argi, long argl, long ret);
extern int (*BIO_dgram_is_sctp_d)(BIO *bio);
extern int (*BIO_dgram_non_fatal_error_d)(int error);
extern int (*BIO_dgram_sctp_msg_waiting_d)(BIO *b);
extern int (*BIO_dgram_sctp_notification_cb_d)(BIO *b, void (*handle_notifications) (BIO *bio, void *context, void *buf), void *context);
extern int (*BIO_dgram_sctp_wait_for_dry_d)(BIO *b);
extern int (*BIO_dump_d)(BIO *b, const char *bytes, int len);
extern int (*BIO_dump_cb_d)(int (*cb) (const void *data, size_t len, void *u), void *u, const char *s, int len);
extern int (*BIO_dump_fp_d)(FILE *fp, const char *s, int len);
extern int (*BIO_dump_indent_d)(BIO *b, const char *bytes, int len, int indent);
extern int (*BIO_dump_indent_cb_d)(int (*cb) (const void *data, size_t len, void *u), void *u, const char *s, int len, int indent);
extern int (*BIO_dump_indent_fp_d)(FILE *fp, const char *s, int len, int indent);
extern BIO *(*BIO_dup_chain_d)(BIO *in);
extern BIO_METHOD *(*BIO_f_asn1_d)(void);
extern BIO_METHOD *(*BIO_f_base64_d)(void);
extern BIO_METHOD *(*BIO_f_buffer_d)(void);
extern BIO_METHOD *(*BIO_f_cipher_d)(void);
extern BIO_METHOD *(*BIO_f_linebuffer_d)(void);
extern BIO_METHOD *(*BIO_f_md_d)(void);
extern BIO_METHOD *(*BIO_f_nbio_test_d)(void);
extern BIO_METHOD *(*BIO_f_null_d)(void);
extern BIO_METHOD *(*BIO_f_reliable_d)(void);
extern BIO_METHOD *(*BIO_f_ssl_d)(void);
extern BIO_METHOD *(*BIO_f_zlib_d)(void);
extern int (*BIO_fd_non_fatal_error_d)(int error);
extern int (*BIO_fd_should_retry_d)(int i);
extern BIO *(*BIO_find_type_d)(BIO *b, int bio_type);
extern int (*BIO_free_d)(BIO *a);
extern void (*BIO_free_all_d)(BIO *a);
extern int (*BIO_get_accept_socket_d)(char *host_port, int mode);
extern long (*(*BIO_get_callback_d)(const BIO *b)) (const BIO *b);
extern char *(*BIO_get_callback_arg_d)(const BIO *b);
extern void *(*BIO_get_ex_data_d)(BIO *bio, int idx);
extern int (*BIO_get_ex_new_index_d)(long argl, void *argp, CRYPTO_EX_new *new_func, CRYPTO_EX_dup *dup_func, CRYPTO_EX_free *free_func);
extern int (*BIO_get_host_ip_d)(const char *str, unsigned char *ip);
extern int (*BIO_get_port_d)(const char *str, unsigned short *port_ptr);
extern BIO *(*BIO_get_retry_BIO_d)(BIO *bio, int *reason);
extern int (*BIO_get_retry_reason_d)(BIO *bio);
extern struct hostent *(*BIO_gethostbyname_d)(const char *name);
extern int (*BIO_gets_d)(BIO *bp, char *buf, int size);
extern int (*BIO_hex_string_d)(BIO *out, int indent, int width, unsigned char *data, int datalen);
extern int (*BIO_indent_d)(BIO *b, int indent, int max);
extern long (*BIO_int_ctrl_d)(BIO *bp, int cmd, long larg, int iarg);
extern const char *(*BIO_method_name_d)(const BIO *b);
extern int (*BIO_method_type_d)(const BIO *b);
extern BIO *(*BIO_new_d)(BIO_METHOD *type);
extern BIO *(*BIO_new_NDEF_d)(BIO *out, ASN1_VALUE *val, const ASN1_ITEM *it);
extern BIO *(*BIO_new_PKCS7_d)(BIO *out, PKCS7 *p7);
extern BIO *(*BIO_new_accept_d)(const char *host_port);
extern int (*BIO_new_bio_pair_d)(BIO **bio1, size_t writebuf1, BIO **bio2, size_t writebuf2);
extern BIO *(*BIO_new_buffer_ssl_connect_d)(SSL_CTX *ctx);
extern BIO *(*BIO_new_connect_d)(const char *host_port);
extern BIO *(*BIO_new_dgram_d)(int fd, int close_flag);
extern BIO *(*BIO_new_dgram_sctp_d)(int fd, int close_flag);
extern BIO *(*BIO_new_fd_d)(int fd, int close_flag);
extern BIO *(*BIO_new_file_d)(const char *filename, const char *mode);
extern BIO *(*BIO_new_fp_d)(FILE *stream, int close_flag);
extern BIO *(*BIO_new_mem_buf_d)(const void *buf, int len);
extern BIO *(*BIO_new_socket_d)(int sock, int close_flag);
extern BIO *(*BIO_new_ssl_d)(SSL_CTX *ctx, int client);
extern BIO *(*BIO_new_ssl_connect_d)(SSL_CTX *ctx);
extern BIO *(*BIO_next_d)(BIO *b);
extern int (*BIO_nread_d)(BIO *bio, char **buf, int num);
extern int (*BIO_nread0_d)(BIO *bio, char **buf);
extern unsigned long (*BIO_number_read_d)(BIO *bio);
extern unsigned long (*BIO_number_written_d)(BIO *bio);
extern int (*BIO_nwrite_d)(BIO *bio, char **buf, int num);
extern int (*BIO_nwrite0_d)(BIO *bio, char **buf);
extern BIO *(*BIO_pop_d)(BIO *b);
extern char *(*BIO_ptr_ctrl_d)(BIO *bp, int cmd, long larg);
extern BIO *(*BIO_push_d)(BIO *b, BIO *append);
extern int (*BIO_puts_d)(BIO *bp, const char *buf);
extern int (*BIO_read_d)(BIO *b, void *data, int len);
extern int (*BIO_read_filename_d)(BIO *b, const char *name);
extern BIO_METHOD *(*BIO_s_accept_d)(void);
extern BIO_METHOD *(*BIO_s_bio_d)(void);
extern BIO_METHOD *(*BIO_s_connect_d)(void);
extern BIO_METHOD *(*BIO_s_datagram_d)(void);
extern BIO_METHOD *(*BIO_s_datagram_sctp_d)(void);
extern BIO_METHOD *(*BIO_s_fd_d)(void);
extern BIO_METHOD *(*BIO_s_file_d)(void);
extern BIO_METHOD *(*BIO_s_log_d)(void);
extern BIO_METHOD *(*BIO_s_mem_d)(void);
extern BIO_METHOD *(*BIO_s_null_d)(void);
extern BIO_METHOD *(*BIO_s_socket_d)(void);
extern int (*BIO_set_d)(BIO *a, BIO_METHOD *type);
extern void (*BIO_set_callback_d)(BIO *b, long (*callback) (struct bio_st *, int, const char *, int, long, long));
extern void (*BIO_set_callback_arg_d)(BIO *b, char *arg);
extern void (*BIO_set_cipher_d)(BIO *b, const EVP_CIPHER *c, const unsigned char *k, const unsigned char *i, int enc);
extern int (*BIO_set_ex_data_d)(BIO *bio, int idx, void *data);
extern void (*BIO_set_flags_d)(BIO *b, int flags);
extern void (*BIO_set_md_d)(BIO *, const EVP_MD *md);
extern int (*BIO_set_tcp_ndelay_d)(int sock, int turn_on);
extern void (*BIO_sock_cleanup_d)(void);
extern int (*BIO_sock_error_d)(int sock);
extern int (*BIO_sock_init_d)(void);
extern int (*BIO_sock_non_fatal_error_d)(int error);
extern int (*BIO_sock_should_retry_d)(int i);
extern int (*BIO_socket_ioctl_d)(int fd, long type, void *arg);
extern int (*BIO_socket_nbio_d)(int fd, int mode);
extern int (*BIO_ssl_copy_session_id_d)(BIO *to, BIO *from);
extern void (*BIO_ssl_shutdown_d)(BIO *ssl_bio);
extern int (*BIO_test_flags_d)(const BIO *b, int flags);
extern void (*BIO_vfree_d)(BIO *a);
extern int (*BIO_write_d)(BIO *b, const void *data, int len);
extern int (*BN_BLINDING_convert_d)(BIGNUM *n, BN_BLINDING *b, BN_CTX *ctx);
extern int (*BN_BLINDING_convert_ex_d)(BIGNUM *n, BIGNUM *r, BN_BLINDING *b, BN_CTX *);
extern BN_BLINDING *(*BN_BLINDING_create_param_d)(BN_BLINDING *b, const BIGNUM *e, BIGNUM *m, BN_CTX *ctx, int (*bn_mod_exp) (BIGNUM *r, const BIGNUM *a, const BIGNUM *p, const BIGNUM *m, BN_CTX *ctx, BN_MONT_CTX *m_ctx), BN_MONT_CTX *m_ctx);
extern void (*BN_BLINDING_free_d)(BN_BLINDING *b);
extern unsigned long (*BN_BLINDING_get_flags_d)(const BN_BLINDING *);
extern unsigned long (*BN_BLINDING_get_thread_id_d)(const BN_BLINDING *);
extern int (*BN_BLINDING_invert_d)(BIGNUM *n, BN_BLINDING *b, BN_CTX *ctx);
extern int (*BN_BLINDING_invert_ex_d)(BIGNUM *n, const BIGNUM *r, BN_BLINDING *b, BN_CTX *);
extern BN_BLINDING *(*BN_BLINDING_new_d)(const BIGNUM *A, const BIGNUM *Ai, BIGNUM *mod);
extern void (*BN_BLINDING_set_flags_d)(BN_BLINDING *, unsigned long);
extern void (*BN_BLINDING_set_thread_id_d)(BN_BLINDING *, unsigned long);
extern CRYPTO_THREADID *(*BN_BLINDING_thread_id_d)(BN_BLINDING *);
extern int (*BN_BLINDING_update_d)(BN_BLINDING *b, BN_CTX *ctx);
extern void (*BN_CTX_end_d)(BN_CTX *ctx);
extern void (*BN_CTX_free_d)(BN_CTX *c);
extern BIGNUM *(*BN_CTX_get_d)(BN_CTX *ctx);
extern void (*BN_CTX_init_d)(BN_CTX *c);
extern BN_CTX *(*BN_CTX_new_d)(void);
extern void (*BN_CTX_start_d)(BN_CTX *ctx);
extern int (*BN_GENCB_call_d)(BN_GENCB *cb, int a, int b);
extern int (*BN_GF2m_add_d)(BIGNUM *r, const BIGNUM *a, const BIGNUM *b);
extern int (*BN_GF2m_arr2poly_d)(const int p[], BIGNUM *a);
extern int (*BN_GF2m_mod_d)(BIGNUM *r, const BIGNUM *a, const BIGNUM *p);
extern int (*BN_GF2m_mod_arr_d)(BIGNUM *r, const BIGNUM *a, const int p[]);
extern int (*BN_GF2m_mod_div_d)(BIGNUM *r, const BIGNUM *a, const BIGNUM *b, const BIGNUM *p, BN_CTX *ctx);
extern int (*BN_GF2m_mod_div_arr_d)(BIGNUM *r, const BIGNUM *a, const BIGNUM *b, const int p[], BN_CTX *ctx);
extern int (*BN_GF2m_mod_exp_d)(BIGNUM *r, const BIGNUM *a, const BIGNUM *b, const BIGNUM *p, BN_CTX *ctx);
extern int (*BN_GF2m_mod_exp_arr_d)(BIGNUM *r, const BIGNUM *a, const BIGNUM *b, const int p[], BN_CTX *ctx);
extern int (*BN_GF2m_mod_inv_d)(BIGNUM *r, const BIGNUM *b, const BIGNUM *p, BN_CTX *ctx);
extern int (*BN_GF2m_mod_inv_arr_d)(BIGNUM *r, const BIGNUM *b, const int p[], BN_CTX *ctx);
extern int (*BN_GF2m_mod_mul_d)(BIGNUM *r, const BIGNUM *a, const BIGNUM *b, const BIGNUM *p, BN_CTX *ctx);
extern int (*BN_GF2m_mod_mul_arr_d)(BIGNUM *r, const BIGNUM *a, const BIGNUM *b, const int p[], BN_CTX *ctx);
extern int (*BN_GF2m_mod_solve_quad_d)(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, BN_CTX *ctx);
extern int (*BN_GF2m_mod_solve_quad_arr_d)(BIGNUM *r, const BIGNUM *a, const int p[], BN_CTX *ctx);
extern int (*BN_GF2m_mod_sqr_d)(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, BN_CTX *ctx);
extern int (*BN_GF2m_mod_sqr_arr_d)(BIGNUM *r, const BIGNUM *a, const int p[], BN_CTX *ctx);
extern int (*BN_GF2m_mod_sqrt_d)(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, BN_CTX *ctx);
extern int (*BN_GF2m_mod_sqrt_arr_d)(BIGNUM *r, const BIGNUM *a, const int p[], BN_CTX *ctx);
extern int (*BN_GF2m_poly2arr_d)(const BIGNUM *a, int p[], int max);
extern BN_MONT_CTX *(*BN_MONT_CTX_copy_d)(BN_MONT_CTX *to, BN_MONT_CTX *from);
extern void (*BN_MONT_CTX_free_d)(BN_MONT_CTX *mont);
extern void (*BN_MONT_CTX_init_d)(BN_MONT_CTX *ctx);
extern BN_MONT_CTX *(*BN_MONT_CTX_new_d)(void);
extern int (*BN_MONT_CTX_set_d)(BN_MONT_CTX *mont, const BIGNUM *mod, BN_CTX *ctx);
extern BN_MONT_CTX *(*BN_MONT_CTX_set_locked_d)(BN_MONT_CTX **pmont, int lock, const BIGNUM *mod, BN_CTX *ctx);
extern void (*BN_RECP_CTX_free_d)(BN_RECP_CTX *recp);
extern void (*BN_RECP_CTX_init_d)(BN_RECP_CTX *recp);
extern BN_RECP_CTX *(*BN_RECP_CTX_new_d)(void);
extern int (*BN_RECP_CTX_set_d)(BN_RECP_CTX *recp, const BIGNUM *rdiv, BN_CTX *ctx);
extern int (*BN_X931_derive_prime_ex_d)(BIGNUM *p, BIGNUM *p1, BIGNUM *p2, const BIGNUM *Xp, const BIGNUM *Xp1, const BIGNUM *Xp2, const BIGNUM *e, BN_CTX *ctx, BN_GENCB *cb);
extern int (*BN_X931_generate_Xpq_d)(BIGNUM *Xp, BIGNUM *Xq, int nbits, BN_CTX *ctx);
extern int (*BN_X931_generate_prime_ex_d)(BIGNUM *p, BIGNUM *p1, BIGNUM *p2, BIGNUM *Xp1, BIGNUM *Xp2, const BIGNUM *Xp, const BIGNUM *e, BN_CTX *ctx, BN_GENCB *cb);
extern int (*BN_add_d)(BIGNUM *r, const BIGNUM *a, const BIGNUM *b);
extern int (*BN_add_word_d)(BIGNUM *a, BN_ULONG w);
extern int (*BN_asc2bn_d)(BIGNUM **a, const char *str);
extern BIGNUM *(*BN_bin2bn_d)(const unsigned char *s, int len, BIGNUM *ret);
extern int (*BN_bn2bin_d)(const BIGNUM *a, unsigned char *to);
extern char *(*BN_bn2dec_d)(const BIGNUM *a);
extern char *(*BN_bn2hex_d)(const BIGNUM *a);
extern int (*BN_bn2mpi_d)(const BIGNUM *a, unsigned char *to);
extern int (*BN_bntest_rand_d)(BIGNUM *rnd, int bits, int top, int bottom);
extern void (*BN_clear_d)(BIGNUM *a);
extern int (*BN_clear_bit_d)(BIGNUM *a, int n);
extern void (*BN_clear_free_d)(BIGNUM *a);
extern int (*BN_cmp_d)(const BIGNUM *a, const BIGNUM *b);
extern void (*BN_consttime_swap_d)(BN_ULONG swap, BIGNUM *a, BIGNUM *b, int nwords);
extern BIGNUM *(*BN_copy_d)(BIGNUM *a, const BIGNUM *b);
extern int (*BN_dec2bn_d)(BIGNUM **a, const char *str);
extern int (*BN_div_d)(BIGNUM *dv, BIGNUM *rem, const BIGNUM *m, const BIGNUM *d, BN_CTX *ctx);
extern int (*BN_div_recp_d)(BIGNUM *dv, BIGNUM *rem, const BIGNUM *m, BN_RECP_CTX *recp, BN_CTX *ctx);
extern BN_ULONG (*BN_div_word_d)(BIGNUM *a, BN_ULONG w);
extern BIGNUM *(*BN_dup_d)(const BIGNUM *a);
extern int (*BN_exp_d)(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, BN_CTX *ctx);
extern void (*BN_free_d)(BIGNUM *a);
extern int (*BN_from_montgomery_d)(BIGNUM *r, const BIGNUM *a, BN_MONT_CTX *mont, BN_CTX *ctx);
extern int (*BN_gcd_d)(BIGNUM *r, const BIGNUM *a, const BIGNUM *b, BN_CTX *ctx);
extern BIGNUM *(*BN_generate_prime_d)(BIGNUM *ret, int bits, int safe, const BIGNUM *add, const BIGNUM *rem, void (*callback) (int, int, void *), void *cb_arg);
extern int (*BN_generate_prime_ex_d)(BIGNUM *ret, int bits, int safe, const BIGNUM *add, const BIGNUM *rem, BN_GENCB *cb);
extern const BIGNUM *(*BN_get0_nist_prime_192_d)(void);
extern const BIGNUM *(*BN_get0_nist_prime_224_d)(void);
extern const BIGNUM *(*BN_get0_nist_prime_256_d)(void);
extern const BIGNUM *(*BN_get0_nist_prime_384_d)(void);
extern const BIGNUM *(*BN_get0_nist_prime_521_d)(void);
extern int (*BN_get_params_d)(int which);
extern BN_ULONG (*BN_get_word_d)(const BIGNUM *a);
extern int (*BN_hex2bn_d)(BIGNUM **a, const char *str);
extern void (*BN_init_d)(BIGNUM *);
extern int (*BN_is_bit_set_d)(const BIGNUM *a, int n);
extern int (*BN_is_prime_d)(const BIGNUM *p, int nchecks, void (*callback) (int, int, void *), BN_CTX *ctx, void *cb_arg);
extern int (*BN_is_prime_ex_d)(const BIGNUM *p, int nchecks, BN_CTX *ctx, BN_GENCB *cb);
extern int (*BN_is_prime_fasttest_d)(const BIGNUM *p, int nchecks, void (*callback) (int, int, void *), BN_CTX *ctx, void *cb_arg, int do_trial_division);
extern int (*BN_is_prime_fasttest_ex_d)(const BIGNUM *p, int nchecks, BN_CTX *ctx, int do_trial_division, BN_GENCB *cb);
extern int (*BN_kronecker_d)(const BIGNUM *a, const BIGNUM *b, BN_CTX *ctx);
extern int (*BN_lshift_d)(BIGNUM *r, const BIGNUM *a, int n);
extern int (*BN_lshift1_d)(BIGNUM *r, const BIGNUM *a);
extern int (*BN_mask_bits_d)(BIGNUM *a, int n);
extern int (*BN_mod_add_d)(BIGNUM *r, const BIGNUM *a, const BIGNUM *b, const BIGNUM *m, BN_CTX *ctx);
extern int (*BN_mod_add_quick_d)(BIGNUM *r, const BIGNUM *a, const BIGNUM *b, const BIGNUM *m);
extern int (*BN_mod_exp_d)(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, const BIGNUM *m, BN_CTX *ctx);
extern int (*BN_mod_exp2_mont_d)(BIGNUM *r, const BIGNUM *a1, const BIGNUM *p1, const BIGNUM *a2, const BIGNUM *p2, const BIGNUM *m, BN_CTX *ctx, BN_MONT_CTX *m_ctx);
extern int (*BN_mod_exp_mont_d)(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, const BIGNUM *m, BN_CTX *ctx, BN_MONT_CTX *m_ctx);
extern int (*BN_mod_exp_mont_consttime_d)(BIGNUM *rr, const BIGNUM *a, const BIGNUM *p, const BIGNUM *m, BN_CTX *ctx, BN_MONT_CTX *in_mont);
extern int (*BN_mod_exp_mont_word_d)(BIGNUM *r, BN_ULONG a, const BIGNUM *p, const BIGNUM *m, BN_CTX *ctx, BN_MONT_CTX *m_ctx);
extern int (*BN_mod_exp_recp_d)(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, const BIGNUM *m, BN_CTX *ctx);
extern int (*BN_mod_exp_simple_d)(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, const BIGNUM *m, BN_CTX *ctx);
extern BIGNUM *(*BN_mod_inverse_d)(BIGNUM *ret, const BIGNUM *a, const BIGNUM *n, BN_CTX *ctx);
extern int (*BN_mod_lshift_d)(BIGNUM *r, const BIGNUM *a, int n, const BIGNUM *m, BN_CTX *ctx);
extern int (*BN_mod_lshift1_d)(BIGNUM *r, const BIGNUM *a, const BIGNUM *m, BN_CTX *ctx);
extern int (*BN_mod_lshift1_quick_d)(BIGNUM *r, const BIGNUM *a, const BIGNUM *m);
extern int (*BN_mod_lshift_quick_d)(BIGNUM *r, const BIGNUM *a, int n, const BIGNUM *m);
extern int (*BN_mod_mul_d)(BIGNUM *r, const BIGNUM *a, const BIGNUM *b, const BIGNUM *m, BN_CTX *ctx);
extern int (*BN_mod_mul_montgomery_d)(BIGNUM *r, const BIGNUM *a, const BIGNUM *b, BN_MONT_CTX *mont, BN_CTX *ctx);
extern int (*BN_mod_mul_reciprocal_d)(BIGNUM *r, const BIGNUM *x, const BIGNUM *y, BN_RECP_CTX *recp, BN_CTX *ctx);
extern int (*BN_mod_sqr_d)(BIGNUM *r, const BIGNUM *a, const BIGNUM *m, BN_CTX *ctx);
extern BIGNUM *(*BN_mod_sqrt_d)(BIGNUM *ret, const BIGNUM *a, const BIGNUM *n, BN_CTX *ctx);
extern int (*BN_mod_sub_d)(BIGNUM *r, const BIGNUM *a, const BIGNUM *b, const BIGNUM *m, BN_CTX *ctx);
extern int (*BN_mod_sub_quick_d)(BIGNUM *r, const BIGNUM *a, const BIGNUM *b, const BIGNUM *m);
extern BN_ULONG (*BN_mod_word_d)(const BIGNUM *a, BN_ULONG w);
extern BIGNUM *(*BN_mpi2bn_d)(const unsigned char *s, int len, BIGNUM *ret);
extern int (*BN_mul_d)(BIGNUM *r, const BIGNUM *a, const BIGNUM *b, BN_CTX *ctx);
extern int (*BN_mul_word_d)(BIGNUM *a, BN_ULONG w);
extern BIGNUM *(*BN_new_d)(void);
extern int (*BN_nist_mod_192_d)(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, BN_CTX *ctx);
extern int (*BN_nist_mod_224_d)(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, BN_CTX *ctx);
extern int (*BN_nist_mod_256_d)(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, BN_CTX *ctx);
extern int (*BN_nist_mod_384_d)(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, BN_CTX *ctx);
extern int (*BN_nist_mod_521_d)(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, BN_CTX *ctx);
extern int (*BN_nnmod_d)(BIGNUM *r, const BIGNUM *m, const BIGNUM *d, BN_CTX *ctx);
extern int (*BN_num_bits_d)(const BIGNUM *a);
extern int (*BN_num_bits_word_d)(BN_ULONG);
extern char *(*BN_options_d)(void);
extern int (*BN_print_d)(BIO *fp, const BIGNUM *a);
extern int (*BN_print_fp_d)(FILE *fp, const BIGNUM *a);
extern int (*BN_pseudo_rand_d)(BIGNUM *rnd, int bits, int top, int bottom);
extern int (*BN_pseudo_rand_range_d)(BIGNUM *rnd, const BIGNUM *range);
extern int (*BN_rand_d)(BIGNUM *rnd, int bits, int top, int bottom);
extern int (*BN_rand_range_d)(BIGNUM *rnd, const BIGNUM *range);
extern int (*BN_reciprocal_d)(BIGNUM *r, const BIGNUM *m, int len, BN_CTX *ctx);
extern int (*BN_rshift_d)(BIGNUM *r, const BIGNUM *a, int n);
extern int (*BN_rshift1_d)(BIGNUM *r, const BIGNUM *a);
extern int (*BN_set_bit_d)(BIGNUM *a, int n);
extern void (*BN_set_negative_d)(BIGNUM *b, int n);
extern void (*BN_set_params_d)(int mul, int high, int low, int mont);
extern int (*BN_set_word_d)(BIGNUM *a, BN_ULONG w);
extern int (*BN_sqr_d)(BIGNUM *r, const BIGNUM *a, BN_CTX *ctx);
extern int (*BN_sub_d)(BIGNUM *r, const BIGNUM *a, const BIGNUM *b);
extern int (*BN_sub_word_d)(BIGNUM *a, BN_ULONG w);
extern void (*BN_swap_d)(BIGNUM *a, BIGNUM *b);
extern ASN1_ENUMERATED *(*BN_to_ASN1_ENUMERATED_d)(BIGNUM *bn, ASN1_ENUMERATED *ai);
extern ASN1_INTEGER *(*BN_to_ASN1_INTEGER_d)(const BIGNUM *bn, ASN1_INTEGER *ai);
extern int (*BN_uadd_d)(BIGNUM *r, const BIGNUM *a, const BIGNUM *b);
extern int (*BN_ucmp_d)(const BIGNUM *a, const BIGNUM *b);
extern int (*BN_usub_d)(BIGNUM *r, const BIGNUM *a, const BIGNUM *b);
extern const BIGNUM *(*BN_value_one_d)(void);
extern void (*BUF_MEM_free_d)(BUF_MEM *a);
extern int (*BUF_MEM_grow_d)(BUF_MEM *str, size_t len);
extern int (*BUF_MEM_grow_clean_d)(BUF_MEM *str, size_t len);
extern BUF_MEM *(*BUF_MEM_new_d)(void);
extern void *(*BUF_memdup_d)(const void *data, size_t siz);
extern void (*BUF_reverse_d)(unsigned char *out, const unsigned char *in, size_t siz);
extern char *(*BUF_strdup_d)(const char *str);
extern size_t (*BUF_strlcat_d)(char *dst, const char *src, size_t siz);
extern size_t (*BUF_strlcpy_d)(char *dst, const char *src, size_t siz);
extern char *(*BUF_strndup_d)(const char *str, size_t siz);
extern size_t (*BUF_strnlen_d)(const char *str, size_t maxlen);

extern void (*COMP_CTX_free_d)(COMP_CTX *ctx);
extern COMP_CTX *(*COMP_CTX_new_d)(COMP_METHOD *meth);
extern int (*COMP_compress_block_d)(COMP_CTX *ctx, unsigned char *out, int olen, unsigned char *in, int ilen);
extern int (*COMP_expand_block_d)(COMP_CTX *ctx, unsigned char *out, int olen, unsigned char *in, int ilen);
extern COMP_METHOD *(*COMP_rle_d)(void);
extern COMP_METHOD *(*COMP_zlib_d)(void);
extern void (*COMP_zlib_cleanup_d)(void);
extern char *(*CONF_get1_default_config_file_d)(void);
extern unsigned long (*CONF_imodule_get_flags_d)(const CONF_IMODULE *md);
extern CONF_MODULE *(*CONF_imodule_get_module_d)(const CONF_IMODULE *md);
extern const char *(*CONF_imodule_get_name_d)(const CONF_IMODULE *md);
extern void *(*CONF_imodule_get_usr_data_d)(const CONF_IMODULE *md);
extern const char *(*CONF_imodule_get_value_d)(const CONF_IMODULE *md);
extern void (*CONF_imodule_set_flags_d)(CONF_IMODULE *md, unsigned long flags);
extern void (*CONF_imodule_set_usr_data_d)(CONF_IMODULE *md, void *usr_data);
extern int (*CONF_module_add_d)(const char *name, conf_init_func *ifunc, conf_finish_func *ffunc);
extern void *(*CONF_module_get_usr_data_d)(CONF_MODULE *pmod);
extern void (*CONF_module_set_usr_data_d)(CONF_MODULE *pmod, void *usr_data);
extern void (*CONF_modules_finish_d)(void);
extern void (*CONF_modules_free_d)(void);
extern int (*CONF_modules_load_d)(const CONF *cnf, const char *appname, unsigned long flags);
extern int (*CONF_modules_load_file_d)(const char *filename, const char *appname, unsigned long flags);
extern void (*CONF_modules_unload_d)(int all);
extern int (*CONF_parse_list_d)(const char *list, int sep, int nospc, int (*list_cb) (const char *elem, int len, void *usr), void *arg);
extern int (*CONF_set_default_method_d)(CONF_METHOD *meth);
extern void (*CONF_set_nconf_d)(CONF *conf, struct lhash_st_CONF_VALUE *hash);

extern int (*CRYPTO_THREADID_cmp_d)(const CRYPTO_THREADID *a, const CRYPTO_THREADID *b);
extern void (*CRYPTO_THREADID_cpy_d)(CRYPTO_THREADID *dest, const CRYPTO_THREADID *src);
extern void (*CRYPTO_THREADID_current_d)(CRYPTO_THREADID *id);
extern void (*(*CRYPTO_THREADID_get_callback_d)(void)) (void);
extern unsigned long (*CRYPTO_THREADID_hash_d)(const CRYPTO_THREADID *id);
extern int (*CRYPTO_THREADID_set_callback_d)(void (*func) (CRYPTO_THREADID *));
extern void (*CRYPTO_cleanup_all_ex_data_d)(void);
extern void (*CRYPTO_dbg_free_d)(void *addr, int before_p);
extern long (*CRYPTO_dbg_get_options_d)(void);
extern void (*CRYPTO_dbg_malloc_d)(void *addr, int num, const char *file, int line, int before_p);
extern void (*CRYPTO_dbg_realloc_d)(void *addr1, void *addr2, int num, const char *file, int line, int before_p);
extern void (*CRYPTO_dbg_set_options_d)(long bits);
extern void (*CRYPTO_destroy_dynlockid_d)(int i);
extern int (*CRYPTO_dup_ex_data_d)(int class_index, CRYPTO_EX_DATA *to, CRYPTO_EX_DATA *from);
extern int (*CRYPTO_ex_data_new_class_d)(void);
extern void (*CRYPTO_free_d)(void *ptr);
extern void (*CRYPTO_free_ex_data_d)(int class_index, void *obj, CRYPTO_EX_DATA *ad);
extern void (*CRYPTO_free_locked_d)(void *ptr);

extern int (*(*CRYPTO_get_add_lock_callback_d)(void)) (void);
extern void (*(*CRYPTO_get_dynlock_destroy_callback_d)(void)) (void);
extern void (*(*CRYPTO_get_dynlock_lock_callback_d)(void)) (void);
extern struct CRYPTO_dynlock_value *(*CRYPTO_get_dynlock_value_d)(int i);
extern void *(*CRYPTO_get_ex_data_d)(const CRYPTO_EX_DATA *ad, int idx);
extern const CRYPTO_EX_DATA_IMPL *(*CRYPTO_get_ex_data_implementation_d)(void);
extern int (*CRYPTO_get_ex_new_index_d)(int class_index, long argl, void *argp, CRYPTO_EX_new *new_func, CRYPTO_EX_dup *dup_func, CRYPTO_EX_free *free_func);
extern unsigned long (*(*CRYPTO_get_id_callback_d)(void)) (void);
extern const char *(*CRYPTO_get_lock_name_d)(int type);
extern void (*CRYPTO_get_locked_mem_ex_functions_d)(void *(**m) (size_t, const char *, int), void (**f) (void *));

extern long (*CRYPTO_get_mem_debug_options_d)(void);
extern int (*CRYPTO_get_new_dynlockid_d)(void);
extern int (*CRYPTO_get_new_lockid_d)(char *name);
extern int (*CRYPTO_is_mem_check_on_d)(void);
extern void (*CRYPTO_lock_d)(int mode, int type, const char *file, int line);
extern void *(*CRYPTO_malloc_d)(int num, const char *file, int line);
extern void *(*CRYPTO_malloc_locked_d)(int num, const char *file, int line);
extern int (*CRYPTO_mem_ctrl_d)(int mode);
extern void (*CRYPTO_mem_leaks_d)(struct bio_st *bio);
extern void (*CRYPTO_mem_leaks_cb_d)(CRYPTO_MEM_LEAK_CB *cb);
extern void (*CRYPTO_mem_leaks_fp_d)(FILE *);
extern int (*CRYPTO_memcmp_d)(const volatile void *a, const volatile void *b, size_t len);
extern int (*CRYPTO_new_ex_data_d)(int class_index, void *obj, CRYPTO_EX_DATA *ad);

extern int (*CRYPTO_num_locks_d)(void);
extern int (*CRYPTO_pop_info_d)(void);
extern int (*CRYPTO_push_info__d)(const char *info, const char *file, int line);
extern void *(*CRYPTO_realloc_d)(void *addr, int num, const char *file, int line);
extern void *(*CRYPTO_realloc_clean_d)(void *addr, int old_num, int num, const char *file, int line);
extern void *(*CRYPTO_remalloc_d)(void *addr, int num, const char *file, int line);
extern int (*CRYPTO_remove_all_info_d)(void);
extern void (*CRYPTO_set_dynlock_create_callback_d)(struct CRYPTO_dynlock_value *(*dyn_create_function) (const char *file, int line));
extern int (*CRYPTO_set_ex_data_d)(CRYPTO_EX_DATA *ad, int idx, void *val);
extern int (*CRYPTO_set_ex_data_implementation_d)(const CRYPTO_EX_DATA_IMPL *i);
extern void (*CRYPTO_set_mem_debug_options_d)(long bits);
extern char *(*CRYPTO_strdup_d)(const char *str, const char *file, int line);
extern unsigned long (*CRYPTO_thread_id_d)(void);

extern int (*DH_KDF_X9_42_d)(unsigned char *out, size_t outlen, const unsigned char *Z, size_t Zlen, ASN1_OBJECT *key_oid, const unsigned char *ukm, size_t ukmlen, const EVP_MD *md);
extern const DH_METHOD *(*DH_OpenSSL_d)(void);
extern int (*DH_check_d)(const DH *dh, int *codes);
extern int (*DH_check_pub_key_d)(const DH *dh, const BIGNUM *pub_key, int *codes);
extern int (*DH_compute_key_d)(unsigned char *key, const BIGNUM *pub_key, DH *dh);
extern int (*DH_compute_key_padded_d)(unsigned char *key, const BIGNUM *pub_key, DH *dh);
extern void (*DH_free_d)(DH *dh);
extern int (*DH_generate_key_d)(DH *dh);
extern DH *(*DH_generate_parameters_d)(int prime_len, int generator, void (*callback) (int, int, void *), void *cb_arg);
extern int (*DH_generate_parameters_ex_d)(DH *dh, int prime_len, int generator, BN_GENCB *cb);
extern DH *(*DH_get_1024_160_d)(void);
extern DH *(*DH_get_2048_224_d)(void);
extern DH *(*DH_get_2048_256_d)(void);
extern const DH_METHOD *(*DH_get_default_method_d)(void);
extern void *(*DH_get_ex_data_d)(DH *d, int idx);
extern int (*DH_get_ex_new_index_d)(long argl, void *argp, CRYPTO_EX_new *new_func, CRYPTO_EX_dup *dup_func, CRYPTO_EX_free *free_func);
extern DH *(*DH_new_d)(void);
extern DH *(*DH_new_method_d)(ENGINE *engine);
extern void (*DH_set_default_method_d)(const DH_METHOD *meth);
extern int (*DH_set_ex_data_d)(DH *d, int idx, void *arg);
extern int (*DH_set_method_d)(DH *dh, const DH_METHOD *meth);
extern int (*DH_size_d)(const DH *dh);
extern int (*DH_up_ref_d)(DH *dh);
extern DH *(*DHparams_dup_d)(DH *);
extern int (*DHparams_print_d)(BIO *bp, const DH *x);
extern int (*DHparams_print_fp_d)(FILE *fp, const DH *x);
extern int (*DIST_POINT_set_dpname_d)(DIST_POINT_NAME *dpn, X509_NAME *iname);
extern const DSA_METHOD *(*DSA_OpenSSL_d)(void);
extern void (*DSA_SIG_free_d)(DSA_SIG *a);
extern DSA_SIG *(*DSA_SIG_new_d)(void);
extern DSA_SIG *(*DSA_do_sign_d)(const unsigned char *dgst, int dlen, DSA *dsa);
extern int (*DSA_do_verify_d)(const unsigned char *dgst, int dgst_len, DSA_SIG *sig, DSA *dsa);
extern DH *(*DSA_dup_DH_d)(const DSA *r);
extern void (*DSA_free_d)(DSA *r);
extern int (*DSA_generate_key_d)(DSA *a);
extern DSA *(*DSA_generate_parameters_d)(int bits, unsigned char *seed, int seed_len, int *counter_ret, unsigned long *h_ret, void (*callback) (int, int, void *), void *cb_arg);
extern int (*DSA_generate_parameters_ex_d)(DSA *dsa, int bits, const unsigned char *seed, int seed_len, int *counter_ret, unsigned long *h_ret, BN_GENCB *cb);
extern const DSA_METHOD *(*DSA_get_default_method_d)(void);
extern void *(*DSA_get_ex_data_d)(DSA *d, int idx);
extern int (*DSA_get_ex_new_index_d)(long argl, void *argp, CRYPTO_EX_new *new_func, CRYPTO_EX_dup *dup_func, CRYPTO_EX_free *free_func);
extern DSA *(*DSA_new_d)(void);
extern DSA *(*DSA_new_method_d)(ENGINE *engine);
extern int (*DSA_print_d)(BIO *bp, const DSA *x, int off);
extern int (*DSA_print_fp_d)(FILE *bp, const DSA *x, int off);
extern void (*DSA_set_default_method_d)(const DSA_METHOD *);
extern int (*DSA_set_ex_data_d)(DSA *d, int idx, void *arg);
extern int (*DSA_set_method_d)(DSA *dsa, const DSA_METHOD *);
extern int (*DSA_sign_d)(int type, const unsigned char *dgst, int dlen, unsigned char *sig, unsigned int *siglen, DSA *dsa);
extern int (*DSA_sign_setup_d)(DSA *dsa, BN_CTX *ctx_in, BIGNUM **kinvp, BIGNUM **rp);
extern int (*DSA_size_d)(const DSA *);
extern int (*DSA_up_ref_d)(DSA *r);
extern int (*DSA_verify_d)(int type, const unsigned char *dgst, int dgst_len, const unsigned char *sigbuf, int siglen, DSA *dsa);
extern DSA *(*DSAparams_dup_d)(DSA *x);
extern int (*DSAparams_print_d)(BIO *bp, const DSA *x);
extern int (*DSAparams_print_fp_d)(FILE *fp, const DSA *x);

extern const SSL_METHOD *(*DTLS_client_method_d)(void);
extern const SSL_METHOD *(*DTLS_method_d)(void);
extern const SSL_METHOD *(*DTLS_server_method_d)(void);
extern const SSL_METHOD *(*DTLSv1_2_client_method_d)(void);
extern const SSL_METHOD *(*DTLSv1_2_method_d)(void);
extern const SSL_METHOD *(*DTLSv1_2_server_method_d)(void);
extern const SSL_METHOD *(*DTLSv1_client_method_d)(void);
extern const SSL_METHOD *(*DTLSv1_method_d)(void);
extern const SSL_METHOD *(*DTLSv1_server_method_d)(void);
extern int (*ECDH_KDF_X9_62_d)(unsigned char *out, size_t outlen, const unsigned char *Z, size_t Zlen, const unsigned char *sinfo, size_t sinfolen, const EVP_MD *md);

extern void (*ECDSA_METHOD_free_d)(ECDSA_METHOD *ecdsa_method);
extern void *(*ECDSA_METHOD_get_app_data_d)(ECDSA_METHOD *ecdsa_method);
extern ECDSA_METHOD *(*ECDSA_METHOD_new_d)(const ECDSA_METHOD *ecdsa_method);
extern void (*ECDSA_METHOD_set_app_data_d)(ECDSA_METHOD *ecdsa_method, void *app);
extern void (*ECDSA_METHOD_set_flags_d)(ECDSA_METHOD *ecdsa_method, int flags);
extern void (*ECDSA_METHOD_set_name_d)(ECDSA_METHOD *ecdsa_method, char *name);
extern void (*ECDSA_METHOD_set_sign_d)(ECDSA_METHOD *ecdsa_method, ECDSA_SIG *(*ecdsa_do_sign) (const unsigned char *dgst, int dgst_len, const BIGNUM *inv, const BIGNUM *rp, EC_KEY *eckey));
extern void (*ECDSA_METHOD_set_sign_setup_d)(ECDSA_METHOD *ecdsa_method, int (*ecdsa_sign_setup) (EC_KEY *eckey, BN_CTX *ctx, BIGNUM **kinv, BIGNUM **r));
extern void (*ECDSA_METHOD_set_verify_d)(ECDSA_METHOD *ecdsa_method, int (*ecdsa_do_verify) (const unsigned char *dgst, int dgst_len, const ECDSA_SIG *sig, EC_KEY *eckey));

extern ECDSA_SIG *(*ECDSA_do_sign_ex_d)(const unsigned char *dgst, int dgstlen, const BIGNUM *kinv, const BIGNUM *rp, EC_KEY *eckey);

extern int (*ECDSA_sign_ex_d)(int type, const unsigned char *dgst, int dgstlen, unsigned char *sig, unsigned int *siglen, const BIGNUM *kinv, const BIGNUM *rp, EC_KEY *eckey);

extern int (*ECPKParameters_print_d)(BIO *bp, const EC_GROUP *x, int off);
extern int (*ECPKParameters_print_fp_d)(FILE *fp, const EC_GROUP *x, int off);
extern int (*ECParameters_print_d)(BIO *bp, const EC_KEY *key);
extern int (*ECParameters_print_fp_d)(FILE *fp, const EC_KEY *key);
extern const EC_METHOD *(*EC_GF2m_simple_method_d)(void);
extern const EC_METHOD *(*EC_GFp_mont_method_d)(void);
extern const EC_METHOD *(*EC_GFp_nist_method_d)(void);
extern const EC_METHOD *(*EC_GFp_nistp224_method_d)(void);
extern const EC_METHOD *(*EC_GFp_nistp256_method_d)(void);
extern const EC_METHOD *(*EC_GFp_nistp521_method_d)(void);
extern const EC_METHOD *(*EC_GFp_simple_method_d)(void);
extern int (*EC_GROUP_check_d)(const EC_GROUP *group, BN_CTX *ctx);
extern int (*EC_GROUP_check_discriminant_d)(const EC_GROUP *group, BN_CTX *ctx);
extern void (*EC_GROUP_clear_free_d)(EC_GROUP *group);
extern int (*EC_GROUP_cmp_d)(const EC_GROUP *a, const EC_GROUP *b, BN_CTX *ctx);
extern int (*EC_GROUP_copy_d)(EC_GROUP *dst, const EC_GROUP *src);
extern EC_GROUP *(*EC_GROUP_dup_d)(const EC_GROUP *src);
extern void (*EC_GROUP_free_d)(EC_GROUP *group);
extern const EC_POINT *(*EC_GROUP_get0_generator_d)(const EC_GROUP *group);
extern unsigned char *(*EC_GROUP_get0_seed_d)(const EC_GROUP *x);
extern int (*EC_GROUP_get_asn1_flag_d)(const EC_GROUP *group);
extern int (*EC_GROUP_get_basis_type_d)(const EC_GROUP *);
extern int (*EC_GROUP_get_cofactor_d)(const EC_GROUP *group, BIGNUM *cofactor, BN_CTX *ctx);
extern int (*EC_GROUP_get_curve_GF2m_d)(const EC_GROUP *group, BIGNUM *p, BIGNUM *a, BIGNUM *b, BN_CTX *ctx);
extern int (*EC_GROUP_get_curve_GFp_d)(const EC_GROUP *group, BIGNUM *p, BIGNUM *a, BIGNUM *b, BN_CTX *ctx);
extern int (*EC_GROUP_get_curve_name_d)(const EC_GROUP *group);
extern int (*EC_GROUP_get_degree_d)(const EC_GROUP *group);
extern BN_MONT_CTX *(*EC_GROUP_get_mont_data_d)(const EC_GROUP *group);
extern int (*EC_GROUP_get_order_d)(const EC_GROUP *group, BIGNUM *order, BN_CTX *ctx);
extern int (*EC_GROUP_get_pentanomial_basis_d)(const EC_GROUP *, unsigned int *k1, unsigned int *k2, unsigned int *k3);
extern point_conversion_form_t (*EC_GROUP_get_point_conversion_form_d)(const EC_GROUP *);
extern size_t (*EC_GROUP_get_seed_len_d)(const EC_GROUP *);
extern int (*EC_GROUP_get_trinomial_basis_d)(const EC_GROUP *, unsigned int *k);
extern int (*EC_GROUP_have_precompute_mult_d)(const EC_GROUP *group);
extern const EC_METHOD *(*EC_GROUP_method_of_d)(const EC_GROUP *group);
extern EC_GROUP *(*EC_GROUP_new_d)(const EC_METHOD *meth);
extern EC_GROUP *(*EC_GROUP_new_by_curve_name_d)(int nid);
extern EC_GROUP *(*EC_GROUP_new_curve_GF2m_d)(const BIGNUM *p, const BIGNUM *a, const BIGNUM *b, BN_CTX *ctx);
extern EC_GROUP *(*EC_GROUP_new_curve_GFp_d)(const BIGNUM *p, const BIGNUM *a, const BIGNUM *b, BN_CTX *ctx);
extern int (*EC_GROUP_precompute_mult_d)(EC_GROUP *group, BN_CTX *ctx);
extern void (*EC_GROUP_set_asn1_flag_d)(EC_GROUP *group, int flag);
extern int (*EC_GROUP_set_curve_GF2m_d)(EC_GROUP *group, const BIGNUM *p, const BIGNUM *a, const BIGNUM *b, BN_CTX *ctx);
extern int (*EC_GROUP_set_curve_GFp_d)(EC_GROUP *group, const BIGNUM *p, const BIGNUM *a, const BIGNUM *b, BN_CTX *ctx);
extern void (*EC_GROUP_set_curve_name_d)(EC_GROUP *group, int nid);
extern int (*EC_GROUP_set_generator_d)(EC_GROUP *group, const EC_POINT *generator, const BIGNUM *order, const BIGNUM *cofactor);
extern void (*EC_GROUP_set_point_conversion_form_d)(EC_GROUP *group, point_conversion_form_t form);
extern size_t (*EC_GROUP_set_seed_d)(EC_GROUP *, const unsigned char *, size_t len);
extern int (*EC_KEY_check_key_d)(const EC_KEY *key);
extern void (*EC_KEY_clear_flags_d)(EC_KEY *key, int flags);
extern EC_KEY *(*EC_KEY_copy_d)(EC_KEY *dst, const EC_KEY *src);
extern EC_KEY *(*EC_KEY_dup_d)(const EC_KEY *src);
extern void (*EC_KEY_free_d)(EC_KEY *key);
extern int (*EC_KEY_generate_key_d)(EC_KEY *key);
extern const EC_GROUP *(*EC_KEY_get0_group_d)(const EC_KEY *key);
extern const BIGNUM *(*EC_KEY_get0_private_key_d)(const EC_KEY *key);
extern const EC_POINT *(*EC_KEY_get0_public_key_d)(const EC_KEY *key);
extern point_conversion_form_t (*EC_KEY_get_conv_form_d)(const EC_KEY *key);
extern unsigned (*EC_KEY_get_enc_flags_d)(const EC_KEY *key);
extern int (*EC_KEY_get_flags_d)(const EC_KEY *key);
extern void *(*EC_KEY_get_key_method_data_d)(EC_KEY *key, void *(*dup_func) (void *), void (*free_func) (void *), void (*clear_free_func) (void *));
extern void *(*EC_KEY_insert_key_method_data_d)(EC_KEY *key, void *data, void *(*dup_func) (void *), void (*free_func) (void *), void (*clear_free_func) (void *));
extern EC_KEY *(*EC_KEY_new_d)(void);
extern EC_KEY *(*EC_KEY_new_by_curve_name_d)(int nid);
extern int (*EC_KEY_precompute_mult_d)(EC_KEY *key, BN_CTX *ctx);
extern int (*EC_KEY_print_d)(BIO *bp, const EC_KEY *key, int off);
extern int (*EC_KEY_print_fp_d)(FILE *fp, const EC_KEY *key, int off);
extern void (*EC_KEY_set_asn1_flag_d)(EC_KEY *eckey, int asn1_flag);
extern void (*EC_KEY_set_conv_form_d)(EC_KEY *eckey, point_conversion_form_t cform);
extern void (*EC_KEY_set_enc_flags_d)(EC_KEY *eckey, unsigned int flags);
extern void (*EC_KEY_set_flags_d)(EC_KEY *key, int flags);
extern int (*EC_KEY_set_group_d)(EC_KEY *key, const EC_GROUP *group);
extern int (*EC_KEY_set_private_key_d)(EC_KEY *key, const BIGNUM *prv);
extern int (*EC_KEY_set_public_key_d)(EC_KEY *key, const EC_POINT *pub);
extern int (*EC_KEY_set_public_key_affine_coordinates_d)(EC_KEY *key, BIGNUM *x, BIGNUM *y);
extern int (*EC_KEY_up_ref_d)(EC_KEY *key);
extern int (*EC_METHOD_get_field_type_d)(const EC_METHOD *meth);
extern int (*EC_POINT_add_d)(const EC_GROUP *group, EC_POINT *r, const EC_POINT *a, const EC_POINT *b, BN_CTX *ctx);
extern EC_POINT *(*EC_POINT_bn2point_d)(const EC_GROUP *, const BIGNUM *, EC_POINT *, BN_CTX *);
extern void (*EC_POINT_clear_free_d)(EC_POINT *point);
extern int (*EC_POINT_cmp_d)(const EC_GROUP *group, const EC_POINT *a, const EC_POINT *b, BN_CTX *ctx);
extern int (*EC_POINT_copy_d)(EC_POINT *dst, const EC_POINT *src);
extern int (*EC_POINT_dbl_d)(const EC_GROUP *group, EC_POINT *r, const EC_POINT *a, BN_CTX *ctx);
extern EC_POINT *(*EC_POINT_dup_d)(const EC_POINT *src, const EC_GROUP *group);
extern void (*EC_POINT_free_d)(EC_POINT *point);
extern int (*EC_POINT_get_Jprojective_coordinates_GFp_d)(const EC_GROUP *group, const EC_POINT *p, BIGNUM *x, BIGNUM *y, BIGNUM *z, BN_CTX *ctx);
extern int (*EC_POINT_get_affine_coordinates_GF2m_d)(const EC_GROUP *group, const EC_POINT *p, BIGNUM *x, BIGNUM *y, BN_CTX *ctx);
extern int (*EC_POINT_get_affine_coordinates_GFp_d)(const EC_GROUP *group, const EC_POINT *p, BIGNUM *x, BIGNUM *y, BN_CTX *ctx);
extern EC_POINT *(*EC_POINT_hex2point_d)(const EC_GROUP *, const char *, EC_POINT *, BN_CTX *);
extern int (*EC_POINT_invert_d)(const EC_GROUP *group, EC_POINT *a, BN_CTX *ctx);
extern int (*EC_POINT_is_at_infinity_d)(const EC_GROUP *group, const EC_POINT *p);
extern int (*EC_POINT_is_on_curve_d)(const EC_GROUP *group, const EC_POINT *point, BN_CTX *ctx);
extern int (*EC_POINT_make_affine_d)(const EC_GROUP *group, EC_POINT *point, BN_CTX *ctx);
extern const EC_METHOD *(*EC_POINT_method_of_d)(const EC_POINT *point);
extern int (*EC_POINT_mul_d)(const EC_GROUP *group, EC_POINT *r, const BIGNUM *n, const EC_POINT *q, const BIGNUM *m, BN_CTX *ctx);
extern EC_POINT *(*EC_POINT_new_d)(const EC_GROUP *group);
extern int (*EC_POINT_oct2point_d)(const EC_GROUP *group, EC_POINT *p, const unsigned char *buf, size_t len, BN_CTX *ctx);
extern BIGNUM *(*EC_POINT_point2bn_d)(const EC_GROUP *, const EC_POINT *, point_conversion_form_t form, BIGNUM *, BN_CTX *);
extern char *(*EC_POINT_point2hex_d)(const EC_GROUP *, const EC_POINT *, point_conversion_form_t form, BN_CTX *);
extern size_t (*EC_POINT_point2oct_d)(const EC_GROUP *group, const EC_POINT *p, point_conversion_form_t form, unsigned char *buf, size_t len, BN_CTX *ctx);
extern int (*EC_POINT_set_Jprojective_coordinates_GFp_d)(const EC_GROUP *group, EC_POINT *p, const BIGNUM *x, const BIGNUM *y, const BIGNUM *z, BN_CTX *ctx);
extern int (*EC_POINT_set_affine_coordinates_GF2m_d)(const EC_GROUP *group, EC_POINT *p, const BIGNUM *x, const BIGNUM *y, BN_CTX *ctx);
extern int (*EC_POINT_set_affine_coordinates_GFp_d)(const EC_GROUP *group, EC_POINT *p, const BIGNUM *x, const BIGNUM *y, BN_CTX *ctx);
extern int (*EC_POINT_set_compressed_coordinates_GF2m_d)(const EC_GROUP *group, EC_POINT *p, const BIGNUM *x, int y_bit, BN_CTX *ctx);
extern int (*EC_POINT_set_compressed_coordinates_GFp_d)(const EC_GROUP *group, EC_POINT *p, const BIGNUM *x, int y_bit, BN_CTX *ctx);
extern int (*EC_POINT_set_to_infinity_d)(const EC_GROUP *group, EC_POINT *point);
extern int (*EC_POINTs_make_affine_d)(const EC_GROUP *group, size_t num, EC_POINT *points[], BN_CTX *ctx);
extern int (*EC_POINTs_mul_d)(const EC_GROUP *group, EC_POINT *r, const BIGNUM *n, size_t num, const EC_POINT *p[], const BIGNUM *m[], BN_CTX *ctx);
extern const char *(*EC_curve_nid2nist_d)(int nid);
extern int (*EC_curve_nist2nid_d)(const char *name);
extern size_t (*EC_get_builtin_curves_d)(EC_builtin_curve *r, size_t nitems);
extern int (*ENGINE_add_d)(ENGINE *e);
extern void (*ENGINE_add_conf_module_d)(void);
extern ENGINE *(*ENGINE_by_id_d)(const char *id);
extern void (*ENGINE_cleanup_d)(void);
extern int (*ENGINE_cmd_is_executable_d)(ENGINE *e, int cmd);

extern void (*ERR_add_error_data_d)(int num, ...);
extern void (*ERR_add_error_vdata_d)(int num, va_list args);
extern void (*ERR_clear_error_d)(void);
extern char *(*ERR_error_string_d)(unsigned long e, char *buf);
extern void (*ERR_error_string_n_d)(unsigned long e, char *buf, size_t len);
extern void (*ERR_free_strings_d)(void);
extern const char *(*ERR_func_error_string_d)(unsigned long e);
extern unsigned long (*ERR_get_error_d)(void);
extern unsigned long (*ERR_get_error_line_d)(const char **file, int *line);
extern unsigned long (*ERR_get_error_line_data_d)(const char **file, int *line, const char **data, int *flags);
extern const ERR_FNS *(*ERR_get_implementation_d)(void);
extern int (*ERR_get_next_error_library_d)(void);
extern ERR_STATE *(*ERR_get_state_d)(void);
extern const char *(*ERR_lib_error_string_d)(unsigned long e);
extern void (*ERR_load_ASN1_strings_d)(void);
extern void (*ERR_load_BIO_strings_d)(void);
extern void (*ERR_load_BN_strings_d)(void);
extern void (*ERR_load_BUF_strings_d)(void);
extern void (*ERR_load_CMS_strings_d)(void);
extern void (*ERR_load_COMP_strings_d)(void);
extern void (*ERR_load_CONF_strings_d)(void);
extern void (*ERR_load_CRYPTO_strings_d)(void);
extern void (*ERR_load_DH_strings_d)(void);
extern void (*ERR_load_DSA_strings_d)(void);
extern void (*ERR_load_DSO_strings_d)(void);
extern void (*ERR_load_ECDH_strings_d)(void);
extern void (*ERR_load_ECDSA_strings_d)(void);
extern void (*ERR_load_EC_strings_d)(void);
extern void (*ERR_load_ENGINE_strings_d)(void);
extern void (*ERR_load_ERR_strings_d)(void);
extern void (*ERR_load_EVP_strings_d)(void);
extern void (*ERR_load_OBJ_strings_d)(void);
extern void (*ERR_load_OCSP_strings_d)(void);
extern void (*ERR_load_PEM_strings_d)(void);
extern void (*ERR_load_PEM_strings_d)(void);
extern void (*ERR_load_PKCS12_strings_d)(void);
extern void (*ERR_load_PKCS7_strings_d)(void);
extern void (*ERR_load_RAND_strings_d)(void);
extern void (*ERR_load_RSA_strings_d)(void);
extern void (*ERR_load_SSL_strings_d)(void);
extern void (*ERR_load_TS_strings_d)(void);
extern void (*ERR_load_UI_strings_d)(void);
extern void (*ERR_load_X509V3_strings_d)(void);
extern void (*ERR_load_X509_strings_d)(void);
extern void (*ERR_load_crypto_strings_d)(void);
extern void (*ERR_load_strings_d)(int lib, ERR_STRING_DATA str[]);
extern unsigned long (*ERR_peek_error_d)(void);
extern unsigned long (*ERR_peek_error_line_d)(const char **file, int *line);
extern unsigned long (*ERR_peek_error_line_data_d)(const char **file, int *line, const char **data, int *flags);
extern unsigned long (*ERR_peek_last_error_d)(void);
extern unsigned long (*ERR_peek_last_error_line_d)(const char **file, int *line);
extern unsigned long (*ERR_peek_last_error_line_data_d)(const char **file, int *line, const char **data, int *flags);
extern int (*ERR_pop_to_mark_d)(void);
extern void (*ERR_print_errors_d)(BIO *bp);
extern void (*ERR_print_errors_fp_d)(FILE *fp);
extern void (*ERR_put_error_d)(int lib, int func, int reason, const char *file, int line);
extern const char *(*ERR_reason_error_string_d)(unsigned long e);
extern void (*ERR_remove_state_d)(unsigned long pid);
extern void (*ERR_remove_thread_state_d)(const CRYPTO_THREADID *tid);
extern void (*ERR_set_error_data_d)(char *data, int flags);
extern int (*ERR_set_implementation_d)(const ERR_FNS *fns);
extern int (*ERR_set_mark_d)(void);
extern void (*ERR_unload_strings_d)(int lib, ERR_STRING_DATA str[]);

extern int (*EVP_BytesToKey_d)(const EVP_CIPHER *type, const EVP_MD *md, const unsigned char *salt, const unsigned char *data, int datal, int count, unsigned char *key, unsigned char *iv);
extern int (*EVP_CIPHER_CTX_block_size_d)(const EVP_CIPHER_CTX *ctx);
extern const EVP_CIPHER *(*EVP_CIPHER_CTX_cipher_d)(const EVP_CIPHER_CTX *ctx);
extern int (*EVP_CIPHER_CTX_cleanup_d)(EVP_CIPHER_CTX *a);
extern void (*EVP_CIPHER_CTX_clear_flags_d)(EVP_CIPHER_CTX *ctx, int flags);
extern int (*EVP_CIPHER_CTX_copy_d)(EVP_CIPHER_CTX *out, const EVP_CIPHER_CTX *in);
extern int (*EVP_CIPHER_CTX_ctrl_d)(EVP_CIPHER_CTX *ctx, int type, int arg, void *ptr);
extern unsigned long (*EVP_CIPHER_CTX_flags_d)(const EVP_CIPHER_CTX *ctx);
extern void (*EVP_CIPHER_CTX_free_d)(EVP_CIPHER_CTX *a);
extern void *(*EVP_CIPHER_CTX_get_app_data_d)(const EVP_CIPHER_CTX *ctx);
extern void (*EVP_CIPHER_CTX_init_d)(EVP_CIPHER_CTX *a);
extern int (*EVP_CIPHER_CTX_iv_length_d)(const EVP_CIPHER_CTX *ctx);
extern int (*EVP_CIPHER_CTX_key_length_d)(const EVP_CIPHER_CTX *ctx);
extern EVP_CIPHER_CTX *(*EVP_CIPHER_CTX_new_d)(void);
extern int (*EVP_CIPHER_CTX_nid_d)(const EVP_CIPHER_CTX *ctx);
extern int (*EVP_CIPHER_CTX_rand_key_d)(EVP_CIPHER_CTX *ctx, unsigned char *key);
extern void (*EVP_CIPHER_CTX_set_app_data_d)(EVP_CIPHER_CTX *ctx, void *data);
extern void (*EVP_CIPHER_CTX_set_flags_d)(EVP_CIPHER_CTX *ctx, int flags);
extern int (*EVP_CIPHER_CTX_set_key_length_d)(EVP_CIPHER_CTX *x, int keylen);
extern int (*EVP_CIPHER_CTX_set_padding_d)(EVP_CIPHER_CTX *c, int pad);
extern int (*EVP_CIPHER_CTX_test_flags_d)(const EVP_CIPHER_CTX *ctx, int flags);
extern int (*EVP_CIPHER_asn1_to_param_d)(EVP_CIPHER_CTX *c, ASN1_TYPE *type);
extern int (*EVP_CIPHER_block_size_d)(const EVP_CIPHER *cipher);

extern unsigned long (*EVP_CIPHER_flags_d)(const EVP_CIPHER *cipher);
extern int (*EVP_CIPHER_get_asn1_iv_d)(EVP_CIPHER_CTX *c, ASN1_TYPE *type);
extern int (*EVP_CIPHER_iv_length_d)(const EVP_CIPHER *cipher);
extern int (*EVP_CIPHER_key_length_d)(const EVP_CIPHER *cipher);
extern int (*EVP_CIPHER_nid_d)(const EVP_CIPHER *cipher);
extern int (*EVP_CIPHER_param_to_asn1_d)(EVP_CIPHER_CTX *c, ASN1_TYPE *type);
extern int (*EVP_CIPHER_set_asn1_iv_d)(EVP_CIPHER_CTX *c, ASN1_TYPE *type);
extern int (*EVP_CIPHER_type_d)(const EVP_CIPHER *ctx);
extern int (*EVP_Cipher_d)(EVP_CIPHER_CTX *c, unsigned char *out, const unsigned char *in, unsigned int inl);
extern int (*EVP_CipherFinal_d)(EVP_CIPHER_CTX *ctx, unsigned char *outm, int *outl);
extern int (*EVP_CipherFinal_ex_d)(EVP_CIPHER_CTX *ctx, unsigned char *outm, int *outl);
extern int (*EVP_CipherInit_d)(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *cipher, const unsigned char *key, const unsigned char *iv, int enc);
extern int (*EVP_CipherInit_ex_d)(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *cipher, ENGINE *impl, const unsigned char *key, const unsigned char *iv, int enc);
extern int (*EVP_CipherUpdate_d)(EVP_CIPHER_CTX *ctx, unsigned char *out, int *outl, const unsigned char *in, int inl);
extern int (*EVP_DecodeBlock_d)(unsigned char *t, const unsigned char *f, int n);
extern int (*EVP_DecodeFinal_d)(EVP_ENCODE_CTX *ctx, unsigned char *out, int *outl);
extern void (*EVP_DecodeInit_d)(EVP_ENCODE_CTX *ctx);
extern int (*EVP_DecodeUpdate_d)(EVP_ENCODE_CTX *ctx, unsigned char *out, int *outl, const unsigned char *in, int inl);
extern int (*EVP_DecryptFinal_d)(EVP_CIPHER_CTX *ctx, unsigned char *outm, int *outl);
extern int (*EVP_DecryptFinal_ex_d)(EVP_CIPHER_CTX *ctx, unsigned char *outm, int *outl);
extern int (*EVP_DecryptInit_d)(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *cipher, const unsigned char *key, const unsigned char *iv);
extern int (*EVP_DecryptInit_ex_d)(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *cipher, ENGINE *impl, const unsigned char *key, const unsigned char *iv);
extern int (*EVP_DecryptUpdate_d)(EVP_CIPHER_CTX *ctx, unsigned char *out, int *outl, const unsigned char *in, int inl);
extern int (*EVP_Digest_d)(const void *data, size_t count, unsigned char *md, unsigned int *size, const EVP_MD *type, ENGINE *impl);
extern int (*EVP_DigestFinal_d)(EVP_MD_CTX *ctx, unsigned char *md, unsigned int *s);
extern int (*EVP_DigestFinal_ex_d)(EVP_MD_CTX *ctx, unsigned char *md, unsigned int *s);
extern int (*EVP_DigestInit_d)(EVP_MD_CTX *ctx, const EVP_MD *type);
extern int (*EVP_DigestInit_ex_d)(EVP_MD_CTX *ctx, const EVP_MD *type, ENGINE *impl);
extern int (*EVP_DigestSignFinal_d)(EVP_MD_CTX *ctx, unsigned char *sigret, size_t *siglen);
extern int (*EVP_DigestSignInit_d)(EVP_MD_CTX *ctx, EVP_PKEY_CTX **pctx, const EVP_MD *type, ENGINE *e, EVP_PKEY *pkey);
extern int (*EVP_DigestUpdate_d)(EVP_MD_CTX *ctx, const void *d, size_t cnt);
extern int (*EVP_DigestVerifyFinal_d)(EVP_MD_CTX *ctx, const unsigned char *sig, size_t siglen);
extern int (*EVP_DigestVerifyInit_d)(EVP_MD_CTX *ctx, EVP_PKEY_CTX **pctx, const EVP_MD *type, ENGINE *e, EVP_PKEY *pkey);
extern int (*EVP_EncodeBlock_d)(unsigned char *t, const unsigned char *f, int n);
extern void (*EVP_EncodeFinal_d)(EVP_ENCODE_CTX *ctx, unsigned char *out, int *outl);
extern void (*EVP_EncodeInit_d)(EVP_ENCODE_CTX *ctx);
extern void (*EVP_EncodeUpdate_d)(EVP_ENCODE_CTX *ctx, unsigned char *out, int *outl, const unsigned char *in, int inl);
extern int (*EVP_EncryptFinal_d)(EVP_CIPHER_CTX *ctx, unsigned char *out, int *outl);
extern int (*EVP_EncryptFinal_ex_d)(EVP_CIPHER_CTX *ctx, unsigned char *out, int *outl);
extern int (*EVP_EncryptInit_d)(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *cipher, const unsigned char *key, const unsigned char *iv);
extern int (*EVP_EncryptInit_ex_d)(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *cipher, ENGINE *impl, const unsigned char *key, const unsigned char *iv);
extern int (*EVP_EncryptUpdate_d)(EVP_CIPHER_CTX *ctx, unsigned char *out, int *outl, const unsigned char *in, int inl);
extern int (*EVP_MD_CTX_cleanup_d)(EVP_MD_CTX *ctx);
extern void (*EVP_MD_CTX_clear_flags_d)(EVP_MD_CTX *ctx, int flags);
extern int (*EVP_MD_CTX_copy_d)(EVP_MD_CTX *out, const EVP_MD_CTX *in);
extern int (*EVP_MD_CTX_copy_ex_d)(EVP_MD_CTX *out, const EVP_MD_CTX *in);
extern EVP_MD_CTX *(*EVP_MD_CTX_create_d)(void);
extern void (*EVP_MD_CTX_destroy_d)(EVP_MD_CTX *ctx);
extern void (*EVP_MD_CTX_init_d)(EVP_MD_CTX *ctx);
extern const EVP_MD *(*EVP_MD_CTX_md_d)(const EVP_MD_CTX *ctx);
extern void (*EVP_MD_CTX_set_flags_d)(EVP_MD_CTX *ctx, int flags);
extern int (*EVP_MD_CTX_test_flags_d)(const EVP_MD_CTX *ctx, int flags);
extern int (*EVP_MD_block_size_d)(const EVP_MD *md);
extern unsigned long (*EVP_MD_flags_d)(const EVP_MD *md);
extern int (*EVP_MD_pkey_type_d)(const EVP_MD *md);
extern int (*EVP_MD_size_d)(const EVP_MD *md);
extern int (*EVP_MD_type_d)(const EVP_MD *md);
extern int (*EVP_OpenFinal_d)(EVP_CIPHER_CTX *ctx, unsigned char *out, int *outl);
extern int (*EVP_OpenInit_d)(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *type, const unsigned char *ek, int ekl, const unsigned char *iv, EVP_PKEY *priv);
extern int (*EVP_PBE_CipherInit_d)(ASN1_OBJECT *pbe_obj, const char *pass, int passlen, ASN1_TYPE *param, EVP_CIPHER_CTX *ctx, int en_de);
extern int (*EVP_PBE_alg_add_d)(int nid, const EVP_CIPHER *cipher, const EVP_MD *md, EVP_PBE_KEYGEN *keygen);
extern int (*EVP_PBE_alg_add_type_d)(int pbe_type, int pbe_nid, int cipher_nid, int md_nid, EVP_PBE_KEYGEN *keygen);
extern void (*EVP_PBE_cleanup_d)(void);
extern int (*EVP_PBE_find_d)(int type, int pbe_nid, int *pcnid, int *pmnid, EVP_PBE_KEYGEN **pkeygen);
extern EVP_PKEY *(*EVP_PKCS82PKEY_d)(PKCS8_PRIV_KEY_INFO *p8);
extern PKCS8_PRIV_KEY_INFO *(*EVP_PKEY2PKCS8_d)(EVP_PKEY *pkey);
extern PKCS8_PRIV_KEY_INFO *(*EVP_PKEY2PKCS8_broken_d)(EVP_PKEY *pkey, int broken);
extern int (*EVP_PKEY_CTX_ctrl_d)(EVP_PKEY_CTX *ctx, int keytype, int optype, int cmd, int p1, void *p2);
extern int (*EVP_PKEY_CTX_ctrl_str_d)(EVP_PKEY_CTX *ctx, const char *type, const char *value);
extern EVP_PKEY_CTX *(*EVP_PKEY_CTX_dup_d)(EVP_PKEY_CTX *ctx);
extern void (*EVP_PKEY_CTX_free_d)(EVP_PKEY_CTX *ctx);
extern EVP_PKEY *(*EVP_PKEY_CTX_get0_peerkey_d)(EVP_PKEY_CTX *ctx);
extern EVP_PKEY *(*EVP_PKEY_CTX_get0_pkey_d)(EVP_PKEY_CTX *ctx);
extern void *(*EVP_PKEY_CTX_get_app_data_d)(EVP_PKEY_CTX *ctx);
extern EVP_PKEY_gen_cb *(*EVP_PKEY_CTX_get_cb_d)(EVP_PKEY_CTX *ctx);
extern void *(*EVP_PKEY_CTX_get_data_d)(EVP_PKEY_CTX *ctx);
extern int (*EVP_PKEY_CTX_get_keygen_info_d)(EVP_PKEY_CTX *ctx, int idx);
extern int (*EVP_PKEY_CTX_get_operation_d)(EVP_PKEY_CTX *ctx);
extern EVP_PKEY_CTX *(*EVP_PKEY_CTX_new_d)(EVP_PKEY *pkey, ENGINE *e);
extern EVP_PKEY_CTX *(*EVP_PKEY_CTX_new_id_d)(int id, ENGINE *e);
extern void (*EVP_PKEY_CTX_set0_keygen_info_d)(EVP_PKEY_CTX *ctx, int *dat, int datlen);
extern void (*EVP_PKEY_CTX_set_app_data_d)(EVP_PKEY_CTX *ctx, void *data);
extern void (*EVP_PKEY_CTX_set_cb_d)(EVP_PKEY_CTX *ctx, EVP_PKEY_gen_cb *cb);
extern void (*EVP_PKEY_CTX_set_data_d)(EVP_PKEY_CTX *ctx, void *data);
extern int (*EVP_PKEY_add1_attr_d)(EVP_PKEY *key, X509_ATTRIBUTE *attr);
extern int (*EVP_PKEY_add1_attr_by_NID_d)(EVP_PKEY *key, int nid, int type, const unsigned char *bytes, int len);
extern int (*EVP_PKEY_add1_attr_by_OBJ_d)(EVP_PKEY *key, const ASN1_OBJECT *obj, int type, const unsigned char *bytes, int len);
extern int (*EVP_PKEY_add1_attr_by_txt_d)(EVP_PKEY *key, const char *attrname, int type, const unsigned char *bytes, int len);
extern int (*EVP_PKEY_asn1_add0_d)(const EVP_PKEY_ASN1_METHOD *ameth);
extern int (*EVP_PKEY_asn1_add_alias_d)(int to, int from);
extern void (*EVP_PKEY_asn1_copy_d)(EVP_PKEY_ASN1_METHOD *dst, const EVP_PKEY_ASN1_METHOD *src);
extern const EVP_PKEY_ASN1_METHOD *(*EVP_PKEY_asn1_find_d)(ENGINE **pe, int type);
extern const EVP_PKEY_ASN1_METHOD *(*EVP_PKEY_asn1_find_str_d)(ENGINE **pe, const char *str, int len);
extern void (*EVP_PKEY_asn1_free_d)(EVP_PKEY_ASN1_METHOD *ameth);
extern const EVP_PKEY_ASN1_METHOD *(*EVP_PKEY_asn1_get0_d)(int idx);
extern int (*EVP_PKEY_asn1_get0_info_d)(int *ppkey_id, int *pkey_base_id, int *ppkey_flags, const char **pinfo, const char **ppem_str, const EVP_PKEY_ASN1_METHOD *ameth);
extern int (*EVP_PKEY_asn1_get_count_d)(void);
extern EVP_PKEY_ASN1_METHOD *(*EVP_PKEY_asn1_new_d)(int id, int flags, const char *pem_str, const char *info);
extern void (*EVP_PKEY_asn1_set_ctrl_d)(EVP_PKEY_ASN1_METHOD *ameth, int (*pkey_ctrl) (EVP_PKEY *pkey, int op, long arg1, void *arg2));
extern void (*EVP_PKEY_asn1_set_free_d)(EVP_PKEY_ASN1_METHOD *ameth, void (*pkey_free) (EVP_PKEY *pkey));
extern void (*EVP_PKEY_asn1_set_item_d)(EVP_PKEY_ASN1_METHOD *ameth, int (*item_verify) (EVP_MD_CTX *ctx, const ASN1_ITEM *it, void *asn, X509_ALGOR *a, ASN1_BIT_STRING *sig, EVP_PKEY *pkey), int (*item_sign) (EVP_MD_CTX *ctx, const ASN1_ITEM *it, void *asn, X509_ALGOR *alg1, X509_ALGOR *alg2, ASN1_BIT_STRING *sig));
extern void (*EVP_PKEY_asn1_set_param_d)(EVP_PKEY_ASN1_METHOD *ameth, int (*param_decode) (EVP_PKEY *pkey, const unsigned char **pder, int derlen), int (*param_encode) (const EVP_PKEY *pkey, unsigned char **pder), int (*param_missing) (const EVP_PKEY *pk), int (*param_copy) (EVP_PKEY *to, const EVP_PKEY *from), int (*param_cmp) (const EVP_PKEY *a, const EVP_PKEY *b), int (*param_print) (BIO *out, const EVP_PKEY *pkey, int indent, ASN1_PCTX *pctx));
extern void (*EVP_PKEY_asn1_set_private_d)(EVP_PKEY_ASN1_METHOD *ameth, int (*priv_decode) (EVP_PKEY *pk, PKCS8_PRIV_KEY_INFO *p8inf), int (*priv_encode) (PKCS8_PRIV_KEY_INFO *p8, const EVP_PKEY *pk), int (*priv_print) (BIO *out, const EVP_PKEY *pkey, int indent, ASN1_PCTX *pctx));
extern void (*EVP_PKEY_asn1_set_public_d)(EVP_PKEY_ASN1_METHOD *ameth, int (*pub_decode) (EVP_PKEY *pk, X509_PUBKEY *pub), int (*pub_encode) (X509_PUBKEY *pub, const EVP_PKEY *pk), int (*pub_cmp) (const EVP_PKEY *a, const EVP_PKEY *b), int (*pub_print) (BIO *out, const EVP_PKEY *pkey, int indent, ASN1_PCTX *pctx), int (*pkey_size) (const EVP_PKEY *pk), int (*pkey_bits) (const EVP_PKEY *pk));
extern int (*EVP_PKEY_assign_d)(EVP_PKEY *pkey, int type, void *key);
extern int (*EVP_PKEY_base_id_d)(const EVP_PKEY *pkey);
extern int (*EVP_PKEY_bits_d)(EVP_PKEY *pkey);
extern int (*EVP_PKEY_cmp_d)(const EVP_PKEY *a, const EVP_PKEY *b);
extern int (*EVP_PKEY_cmp_parameters_d)(const EVP_PKEY *a, const EVP_PKEY *b);
extern int (*EVP_PKEY_copy_parameters_d)(EVP_PKEY *to, const EVP_PKEY *from);
extern int (*EVP_PKEY_decrypt_d)(EVP_PKEY_CTX *ctx, unsigned char *out, size_t *outlen, const unsigned char *in, size_t inlen);
extern int (*EVP_PKEY_decrypt_init_d)(EVP_PKEY_CTX *ctx);
extern int (*EVP_PKEY_decrypt_old_d)(unsigned char *dec_key, const unsigned char *enc_key, int enc_key_len, EVP_PKEY *private_key);
extern X509_ATTRIBUTE *(*EVP_PKEY_delete_attr_d)(EVP_PKEY *key, int loc);
extern int (*EVP_PKEY_derive_d)(EVP_PKEY_CTX *ctx, unsigned char *key, size_t *keylen);
extern int (*EVP_PKEY_derive_init_d)(EVP_PKEY_CTX *ctx);
extern int (*EVP_PKEY_derive_set_peer_d)(EVP_PKEY_CTX *ctx, EVP_PKEY *peer);
extern int (*EVP_PKEY_encrypt_d)(EVP_PKEY_CTX *ctx, unsigned char *out, size_t *outlen, const unsigned char *in, size_t inlen);
extern int (*EVP_PKEY_encrypt_init_d)(EVP_PKEY_CTX *ctx);
extern int (*EVP_PKEY_encrypt_old_d)(unsigned char *enc_key, const unsigned char *key, int key_len, EVP_PKEY *pub_key);
extern void (*EVP_PKEY_free_d)(EVP_PKEY *pkey);
extern void *(*EVP_PKEY_get0_d)(EVP_PKEY *pkey);
extern const EVP_PKEY_ASN1_METHOD *(*EVP_PKEY_get0_asn1_d)(EVP_PKEY *pkey);
extern struct dh_st *(*EVP_PKEY_get1_DH_d)(EVP_PKEY *pkey);
extern struct dsa_st *(*EVP_PKEY_get1_DSA_d)(EVP_PKEY *pkey);
extern struct ec_key_st *(*EVP_PKEY_get1_EC_KEY_d)(EVP_PKEY *pkey);
extern struct rsa_st *(*EVP_PKEY_get1_RSA_d)(EVP_PKEY *pkey);
extern X509_ATTRIBUTE *(*EVP_PKEY_get_attr_d)(const EVP_PKEY *key, int loc);
extern int (*EVP_PKEY_get_attr_by_NID_d)(const EVP_PKEY *key, int nid, int lastpos);
extern int (*EVP_PKEY_get_attr_by_OBJ_d)(const EVP_PKEY *key, ASN1_OBJECT *obj, int lastpos);
extern int (*EVP_PKEY_get_attr_count_d)(const EVP_PKEY *key);
extern int (*EVP_PKEY_get_default_digest_nid_d)(EVP_PKEY *pkey, int *pnid);
extern int (*EVP_PKEY_id_d)(const EVP_PKEY *pkey);
extern int (*EVP_PKEY_keygen_d)(EVP_PKEY_CTX *ctx, EVP_PKEY **ppkey);
extern int (*EVP_PKEY_keygen_init_d)(EVP_PKEY_CTX *ctx);
extern int (*EVP_PKEY_meth_add0_d)(const EVP_PKEY_METHOD *pmeth);
extern void (*EVP_PKEY_meth_copy_d)(EVP_PKEY_METHOD *dst, const EVP_PKEY_METHOD *src);
extern const EVP_PKEY_METHOD *(*EVP_PKEY_meth_find_d)(int type);
extern void (*EVP_PKEY_meth_free_d)(EVP_PKEY_METHOD *pmeth);
extern void (*EVP_PKEY_meth_get0_info_d)(int *ppkey_id, int *pflags, const EVP_PKEY_METHOD *meth);
extern EVP_PKEY_METHOD *(*EVP_PKEY_meth_new_d)(int id, int flags);
extern void (*EVP_PKEY_meth_set_cleanup_d)(EVP_PKEY_METHOD *pmeth, void (*cleanup) (EVP_PKEY_CTX *ctx));
extern void (*EVP_PKEY_meth_set_copy_d)(EVP_PKEY_METHOD *pmeth, int (*copy) (EVP_PKEY_CTX *dst, EVP_PKEY_CTX *src));
extern void (*EVP_PKEY_meth_set_ctrl_d)(EVP_PKEY_METHOD *pmeth, int (*ctrl) (EVP_PKEY_CTX *ctx, int type, int p1, void *p2), int (*ctrl_str) (EVP_PKEY_CTX *ctx, const char *type, const char *value));
extern void (*EVP_PKEY_meth_set_decrypt_d)(EVP_PKEY_METHOD *pmeth, int (*decrypt_init) (EVP_PKEY_CTX *ctx), int (*decrypt) (EVP_PKEY_CTX *ctx, unsigned char *out, size_t *outlen, const unsigned char *in, size_t inlen));
extern void (*EVP_PKEY_meth_set_derive_d)(EVP_PKEY_METHOD *pmeth, int (*derive_init) (EVP_PKEY_CTX *ctx), int (*derive) (EVP_PKEY_CTX *ctx, unsigned char *key, size_t *keylen));
extern void (*EVP_PKEY_meth_set_encrypt_d)(EVP_PKEY_METHOD *pmeth, int (*encrypt_init) (EVP_PKEY_CTX *ctx), int (*encryptfn) (EVP_PKEY_CTX *ctx, unsigned char *out, size_t *outlen, const unsigned char *in, size_t inlen));
extern void (*EVP_PKEY_meth_set_init_d)(EVP_PKEY_METHOD *pmeth, int (*init) (EVP_PKEY_CTX *ctx));
extern void (*EVP_PKEY_meth_set_keygen_d)(EVP_PKEY_METHOD *pmeth, int (*keygen_init) (EVP_PKEY_CTX *ctx), int (*keygen) (EVP_PKEY_CTX *ctx, EVP_PKEY *pkey));
extern void (*EVP_PKEY_meth_set_paramgen_d)(EVP_PKEY_METHOD *pmeth, int (*paramgen_init) (EVP_PKEY_CTX *ctx), int (*paramgen) (EVP_PKEY_CTX *ctx, EVP_PKEY *pkey));
extern void (*EVP_PKEY_meth_set_sign_d)(EVP_PKEY_METHOD *pmeth, int (*sign_init) (EVP_PKEY_CTX *ctx), int (*sign) (EVP_PKEY_CTX *ctx, unsigned char *sig, size_t *siglen, const unsigned char *tbs, size_t tbslen));
extern void (*EVP_PKEY_meth_set_signctx_d)(EVP_PKEY_METHOD *pmeth, int (*signctx_init) (EVP_PKEY_CTX *ctx, EVP_MD_CTX *mctx), int (*signctx) (EVP_PKEY_CTX *ctx, unsigned char *sig, size_t *siglen, EVP_MD_CTX *mctx));
extern void (*EVP_PKEY_meth_set_verify_d)(EVP_PKEY_METHOD *pmeth, int (*verify_init) (EVP_PKEY_CTX *ctx), int (*verify) (EVP_PKEY_CTX *ctx, const unsigned char *sig, size_t siglen, const unsigned char *tbs, size_t tbslen));
extern void (*EVP_PKEY_meth_set_verify_recover_d)(EVP_PKEY_METHOD *pmeth, int (*verify_recover_init) (EVP_PKEY_CTX *ctx), int (*verify_recover) (EVP_PKEY_CTX *ctx, unsigned char *sig, size_t *siglen, const unsigned char *tbs, size_t tbslen));
extern void (*EVP_PKEY_meth_set_verifyctx_d)(EVP_PKEY_METHOD *pmeth, int (*verifyctx_init) (EVP_PKEY_CTX *ctx, EVP_MD_CTX *mctx), int (*verifyctx) (EVP_PKEY_CTX *ctx, const unsigned char *sig, int siglen, EVP_MD_CTX *mctx));
extern int (*EVP_PKEY_missing_parameters_d)(const EVP_PKEY *pkey);
extern EVP_PKEY *(*EVP_PKEY_new_d)(void);
extern EVP_PKEY *(*EVP_PKEY_new_mac_key_d)(int type, ENGINE *e, const unsigned char *key, int keylen);
extern int (*EVP_PKEY_paramgen_d)(EVP_PKEY_CTX *ctx, EVP_PKEY **ppkey);
extern int (*EVP_PKEY_paramgen_init_d)(EVP_PKEY_CTX *ctx);
extern int (*EVP_PKEY_print_params_d)(BIO *out, const EVP_PKEY *pkey, int indent, ASN1_PCTX *pctx);
extern int (*EVP_PKEY_print_private_d)(BIO *out, const EVP_PKEY *pkey, int indent, ASN1_PCTX *pctx);
extern int (*EVP_PKEY_print_public_d)(BIO *out, const EVP_PKEY *pkey, int indent, ASN1_PCTX *pctx);
extern int (*EVP_PKEY_save_parameters_d)(EVP_PKEY *pkey, int mode);
extern int (*EVP_PKEY_set1_DH_d)(EVP_PKEY *pkey, struct dh_st *key);
extern int (*EVP_PKEY_set1_DSA_d)(EVP_PKEY *pkey, struct dsa_st *key);
extern int (*EVP_PKEY_set1_EC_KEY_d)(EVP_PKEY *pkey, struct ec_key_st *key);
extern int (*EVP_PKEY_set1_RSA_d)(EVP_PKEY *pkey, struct rsa_st *key);
extern int (*EVP_PKEY_set_type_d)(EVP_PKEY *pkey, int type);
extern int (*EVP_PKEY_set_type_str_d)(EVP_PKEY *pkey, const char *str, int len);
extern int (*EVP_PKEY_sign_d)(EVP_PKEY_CTX *ctx, unsigned char *sig, size_t *siglen, const unsigned char *tbs, size_t tbslen);
extern int (*EVP_PKEY_sign_init_d)(EVP_PKEY_CTX *ctx);
extern int (*EVP_PKEY_size_d)(EVP_PKEY *pkey);
extern int (*EVP_PKEY_type_d)(int type);
extern int (*EVP_PKEY_verify_d)(EVP_PKEY_CTX *ctx, const unsigned char *sig, size_t siglen, const unsigned char *tbs, size_t tbslen);
extern int (*EVP_PKEY_verify_init_d)(EVP_PKEY_CTX *ctx);
extern int (*EVP_PKEY_verify_recover_d)(EVP_PKEY_CTX *ctx, unsigned char *rout, size_t *routlen, const unsigned char *sig, size_t siglen);
extern int (*EVP_PKEY_verify_recover_init_d)(EVP_PKEY_CTX *ctx);
extern int (*EVP_SealFinal_d)(EVP_CIPHER_CTX *ctx, unsigned char *out, int *outl);
extern int (*EVP_SealInit_d)(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *type, unsigned char **ek, int *ekl, unsigned char *iv, EVP_PKEY **pubk, int npubk);
extern int (*EVP_SignFinal_d)(EVP_MD_CTX *ctx, unsigned char *md, unsigned int *s, EVP_PKEY *pkey);
extern int (*EVP_VerifyFinal_d)(EVP_MD_CTX *ctx, const unsigned char *sigbuf, unsigned int siglen, EVP_PKEY *pkey);
extern void (*EVP_add_alg_module_d)(void);
extern int (*EVP_add_cipher_d)(const EVP_CIPHER *cipher);
extern int (*EVP_add_digest_d)(const EVP_MD *digest);
extern const EVP_CIPHER *(*EVP_aes_128_cbc_d)(void);
extern const EVP_CIPHER *(*EVP_aes_128_cbc_hmac_sha1_d)(void);
extern const EVP_CIPHER *(*EVP_aes_128_cbc_hmac_sha256_d)(void);
extern const EVP_CIPHER *(*EVP_aes_128_ccm_d)(void);
extern const EVP_CIPHER *(*EVP_aes_128_cfb1_d)(void);
extern const EVP_CIPHER *(*EVP_aes_128_cfb128_d)(void);
extern const EVP_CIPHER *(*EVP_aes_128_cfb8_d)(void);
extern const EVP_CIPHER *(*EVP_aes_128_ctr_d)(void);
extern const EVP_CIPHER *(*EVP_aes_128_ecb_d)(void);
extern const EVP_CIPHER *(*EVP_aes_128_gcm_d)(void);
extern const EVP_CIPHER *(*EVP_aes_128_ofb_d)(void);
extern const EVP_CIPHER *(*EVP_aes_128_wrap_d)(void);
extern const EVP_CIPHER *(*EVP_aes_128_xts_d)(void);
extern const EVP_CIPHER *(*EVP_aes_192_cbc_d)(void);
extern const EVP_CIPHER *(*EVP_aes_192_ccm_d)(void);
extern const EVP_CIPHER *(*EVP_aes_192_cfb1_d)(void);
extern const EVP_CIPHER *(*EVP_aes_192_cfb128_d)(void);
extern const EVP_CIPHER *(*EVP_aes_192_cfb8_d)(void);
extern const EVP_CIPHER *(*EVP_aes_192_ctr_d)(void);
extern const EVP_CIPHER *(*EVP_aes_192_ecb_d)(void);
extern const EVP_CIPHER *(*EVP_aes_192_gcm_d)(void);
extern const EVP_CIPHER *(*EVP_aes_192_ofb_d)(void);
extern const EVP_CIPHER *(*EVP_aes_192_wrap_d)(void);
extern const EVP_CIPHER *(*EVP_aes_256_cbc_d)(void);
extern const EVP_CIPHER *(*EVP_aes_256_cbc_hmac_sha1_d)(void);
extern const EVP_CIPHER *(*EVP_aes_256_cbc_hmac_sha256_d)(void);
extern const EVP_CIPHER *(*EVP_aes_256_ccm_d)(void);
extern const EVP_CIPHER *(*EVP_aes_256_cfb1_d)(void);
extern const EVP_CIPHER *(*EVP_aes_256_cfb128_d)(void);
extern const EVP_CIPHER *(*EVP_aes_256_cfb8_d)(void);
extern const EVP_CIPHER *(*EVP_aes_256_ctr_d)(void);
extern const EVP_CIPHER *(*EVP_aes_256_ecb_d)(void);
extern const EVP_CIPHER *(*EVP_aes_256_gcm_d)(void);
extern const EVP_CIPHER *(*EVP_aes_256_ofb_d)(void);
extern const EVP_CIPHER *(*EVP_aes_256_wrap_d)(void);
extern const EVP_CIPHER *(*EVP_aes_256_xts_d)(void);
extern const EVP_CIPHER *(*EVP_bf_cbc_d)(void);
extern const EVP_CIPHER *(*EVP_bf_cfb64_d)(void);
extern const EVP_CIPHER *(*EVP_bf_ecb_d)(void);
extern const EVP_CIPHER *(*EVP_bf_ofb_d)(void);
extern const EVP_CIPHER *(*EVP_camellia_128_cbc_d)(void);
extern const EVP_CIPHER *(*EVP_camellia_128_cfb1_d)(void);
extern const EVP_CIPHER *(*EVP_camellia_128_cfb128_d)(void);
extern const EVP_CIPHER *(*EVP_camellia_128_cfb8_d)(void);
extern const EVP_CIPHER *(*EVP_camellia_128_ecb_d)(void);
extern const EVP_CIPHER *(*EVP_camellia_128_ofb_d)(void);
extern const EVP_CIPHER *(*EVP_camellia_192_cbc_d)(void);
extern const EVP_CIPHER *(*EVP_camellia_192_cfb1_d)(void);
extern const EVP_CIPHER *(*EVP_camellia_192_cfb128_d)(void);
extern const EVP_CIPHER *(*EVP_camellia_192_cfb8_d)(void);
extern const EVP_CIPHER *(*EVP_camellia_192_ecb_d)(void);
extern const EVP_CIPHER *(*EVP_camellia_192_ofb_d)(void);
extern const EVP_CIPHER *(*EVP_camellia_256_cbc_d)(void);
extern const EVP_CIPHER *(*EVP_camellia_256_cfb1_d)(void);
extern const EVP_CIPHER *(*EVP_camellia_256_cfb128_d)(void);
extern const EVP_CIPHER *(*EVP_camellia_256_cfb8_d)(void);
extern const EVP_CIPHER *(*EVP_camellia_256_ecb_d)(void);
extern const EVP_CIPHER *(*EVP_camellia_256_ofb_d)(void);
extern const EVP_CIPHER *(*EVP_cast5_cbc_d)(void);
extern const EVP_CIPHER *(*EVP_cast5_cfb64_d)(void);
extern const EVP_CIPHER *(*EVP_cast5_ecb_d)(void);
extern const EVP_CIPHER *(*EVP_cast5_ofb_d)(void);
extern void (*EVP_cleanup_d)(void);
extern const EVP_CIPHER *(*EVP_des_cbc_d)(void);
extern const EVP_CIPHER *(*EVP_des_cfb1_d)(void);
extern const EVP_CIPHER *(*EVP_des_cfb64_d)(void);
extern const EVP_CIPHER *(*EVP_des_cfb8_d)(void);
extern const EVP_CIPHER *(*EVP_des_ecb_d)(void);
extern const EVP_CIPHER *(*EVP_des_ede_d)(void);
extern const EVP_CIPHER *(*EVP_des_ede3_d)(void);
extern const EVP_CIPHER *(*EVP_des_ede3_cbc_d)(void);
extern const EVP_CIPHER *(*EVP_des_ede3_cfb1_d)(void);
extern const EVP_CIPHER *(*EVP_des_ede3_cfb64_d)(void);
extern const EVP_CIPHER *(*EVP_des_ede3_cfb8_d)(void);
extern const EVP_CIPHER *(*EVP_des_ede3_ecb_d)(void);
extern const EVP_CIPHER *(*EVP_des_ede3_ofb_d)(void);
extern const EVP_CIPHER *(*EVP_des_ede3_wrap_d)(void);
extern const EVP_CIPHER *(*EVP_des_ede_cbc_d)(void);
extern const EVP_CIPHER *(*EVP_des_ede_cfb64_d)(void);
extern const EVP_CIPHER *(*EVP_des_ede_ecb_d)(void);
extern const EVP_CIPHER *(*EVP_des_ede_ofb_d)(void);
extern const EVP_CIPHER *(*EVP_des_ofb_d)(void);
extern const EVP_CIPHER *(*EVP_desx_cbc_d)(void);
extern const EVP_MD *(*EVP_dss_d)(void);
extern const EVP_MD *(*EVP_dss1_d)(void);
extern const EVP_MD *(*EVP_ecdsa_d)(void);
extern const EVP_CIPHER *(*EVP_enc_null_d)(void);
extern const EVP_CIPHER *(*EVP_get_cipherbyname_d)(const char *name);
extern const EVP_MD *(*EVP_get_digestbyname_d)(const char *name);
extern char *(*EVP_get_pw_prompt_d)(void);
extern const EVP_CIPHER *(*EVP_idea_cbc_d)(void);
extern const EVP_CIPHER *(*EVP_idea_cfb64_d)(void);
extern const EVP_CIPHER *(*EVP_idea_ecb_d)(void);
extern const EVP_CIPHER *(*EVP_idea_ofb_d)(void);
extern const EVP_MD *(*EVP_md2_d)(void);
extern const EVP_MD *(*EVP_md4_d)(void);
extern const EVP_MD *(*EVP_md5_d)(void);
extern const EVP_MD *(*EVP_md_null_d)(void);
extern const EVP_MD *(*EVP_mdc2_d)(void);
extern const EVP_CIPHER *(*EVP_rc2_40_cbc_d)(void);
extern const EVP_CIPHER *(*EVP_rc2_64_cbc_d)(void);
extern const EVP_CIPHER *(*EVP_rc2_cbc_d)(void);
extern const EVP_CIPHER *(*EVP_rc2_cfb64_d)(void);
extern const EVP_CIPHER *(*EVP_rc2_ecb_d)(void);
extern const EVP_CIPHER *(*EVP_rc2_ofb_d)(void);
extern const EVP_CIPHER *(*EVP_rc4_d)(void);
extern const EVP_CIPHER *(*EVP_rc4_40_d)(void);
extern const EVP_CIPHER *(*EVP_rc4_hmac_md5_d)(void);
extern const EVP_CIPHER *(*EVP_rc5_32_12_16_cbc_d)(void);
extern const EVP_CIPHER *(*EVP_rc5_32_12_16_cfb64_d)(void);
extern const EVP_CIPHER *(*EVP_rc5_32_12_16_ecb_d)(void);
extern const EVP_CIPHER *(*EVP_rc5_32_12_16_ofb_d)(void);
extern int (*EVP_read_pw_string_d)(char *buf, int length, const char *prompt, int verify);
extern int (*EVP_read_pw_string_min_d)(char *buf, int minlen, int maxlen, const char *prompt, int verify);
extern const EVP_MD *(*EVP_ripemd160_d)(void);
extern const EVP_CIPHER *(*EVP_seed_cbc_d)(void);
extern const EVP_CIPHER *(*EVP_seed_cfb128_d)(void);
extern const EVP_CIPHER *(*EVP_seed_ecb_d)(void);
extern const EVP_CIPHER *(*EVP_seed_ofb_d)(void);
extern void (*EVP_set_pw_prompt_d)(const char *prompt);
extern const EVP_MD *(*EVP_sha_d)(void);
extern const EVP_MD *(*EVP_sha1_d)(void);
extern const EVP_MD *(*EVP_sha224_d)(void);
extern const EVP_MD *(*EVP_sha256_d)(void);
extern const EVP_MD *(*EVP_sha384_d)(void);
extern const EVP_MD *(*EVP_sha512_d)(void);
extern const EVP_MD *(*EVP_whirlpool_d)(void);
extern int (*FIPS_mode_d)(void);
extern int (*FIPS_mode_set_d)(int r);
extern int (*GENERAL_NAME_cmp_d)(GENERAL_NAME *a, GENERAL_NAME *b);
extern GENERAL_NAME *(*GENERAL_NAME_dup_d)(GENERAL_NAME *a);
extern int (*GENERAL_NAME_get0_otherName_d)(GENERAL_NAME *gen, ASN1_OBJECT **poid, ASN1_TYPE **pvalue);
extern void *(*GENERAL_NAME_get0_value_d)(GENERAL_NAME *a, int *ptype);
extern int (*GENERAL_NAME_print_d)(BIO *out, GENERAL_NAME *gen);
extern int (*GENERAL_NAME_set0_othername_d)(GENERAL_NAME *gen, ASN1_OBJECT *oid, ASN1_TYPE *value);
extern void (*GENERAL_NAME_set0_value_d)(GENERAL_NAME *a, int type, void *value);
extern unsigned char *(*HMAC_d)(const EVP_MD *evp_md, const void *key, int key_len, const unsigned char *d, size_t n, unsigned char *md, unsigned int *md_len);
extern void (*HMAC_CTX_cleanup_d)(HMAC_CTX *ctx);
extern int (*HMAC_CTX_copy_d)(HMAC_CTX *dctx, HMAC_CTX *sctx);
extern void (*HMAC_CTX_init_d)(HMAC_CTX *ctx);
extern void (*HMAC_CTX_set_flags_d)(HMAC_CTX *ctx, unsigned long flags);
extern int (*HMAC_Final_d)(HMAC_CTX *ctx, unsigned char *md, unsigned int *len);
extern int (*HMAC_Init_d)(HMAC_CTX *ctx, const void *key, int len, const EVP_MD *md);
extern int (*HMAC_Init_ex_d)(HMAC_CTX *ctx, const void *key, int len, const EVP_MD *md, ENGINE *impl);
extern int (*HMAC_Update_d)(HMAC_CTX *ctx, const unsigned char *data, size_t len);

extern unsigned char *(*MD5_d)(const unsigned char *d, size_t n, unsigned char *md);
extern int (*NAME_CONSTRAINTS_check_d)(X509 *x, NAME_CONSTRAINTS *nc);
extern CONF_METHOD *(*NCONF_WIN32_d)(void);
extern CONF_METHOD *(*NCONF_default_d)(void);
extern int (*NCONF_dump_bio_d)(const CONF *conf, BIO *out);
extern int (*NCONF_dump_fp_d)(const CONF *conf, FILE *out);
extern void (*NCONF_free_d)(CONF *conf);
extern void (*NCONF_free_data_d)(CONF *conf);
extern int (*NCONF_get_number_e_d)(const CONF *conf, const char *group, const char *name, long *result);
extern struct stack_st_CONF_VALUE *(*NCONF_get_section_d)(const CONF *conf, const char *section);
extern char *(*NCONF_get_string_d)(const CONF *conf, const char *group, const char *name);
extern int (*NCONF_load_d)(CONF *conf, const char *file, long *eline);
extern int (*NCONF_load_bio_d)(CONF *conf, BIO *bp, long *eline);
extern int (*NCONF_load_fp_d)(CONF *conf, FILE *fp, long *eline);
extern CONF *(*NCONF_new_d)(CONF_METHOD *meth);
extern NETSCAPE_SPKI *(*NETSCAPE_SPKI_b64_decode_d)(const char *str, int len);
extern char *(*NETSCAPE_SPKI_b64_encode_d)(NETSCAPE_SPKI *x);
extern EVP_PKEY *(*NETSCAPE_SPKI_get_pubkey_d)(NETSCAPE_SPKI *x);
extern int (*NETSCAPE_SPKI_print_d)(BIO *out, NETSCAPE_SPKI *spki);
extern int (*NETSCAPE_SPKI_set_pubkey_d)(NETSCAPE_SPKI *x, EVP_PKEY *pkey);
extern int (*NETSCAPE_SPKI_sign_d)(NETSCAPE_SPKI *x, EVP_PKEY *pkey, const EVP_MD *md);
extern int (*NETSCAPE_SPKI_verify_d)(NETSCAPE_SPKI *a, EVP_PKEY *r);
extern int (*OBJ_NAME_add_d)(const char *name, int type, const char *data);
extern void (*OBJ_NAME_cleanup_d)(int type);
extern void (*OBJ_NAME_do_all_sorted_d)(int type, void (*fn) (const OBJ_NAME *, void *arg), void *arg);
extern const char *(*OBJ_NAME_get_d)(const char *name, int type);
extern int (*OBJ_NAME_init_d)(void);
extern int (*OBJ_NAME_remove_d)(const char *name, int type);
extern int (*OBJ_add_object_d)(const ASN1_OBJECT *obj);
extern int (*OBJ_add_sigid_d)(int signid, int dig_id, int pkey_id);
extern const void *(*OBJ_bsearch__d)(const void *key, const void *base, int num, int size, int (*cmp) (const void *, const void *));
extern const void *(*OBJ_bsearch_ex__d)(const void *key, const void *base, int num, int size, int (*cmp) (const void *, const void *), int flags);
extern void (*OBJ_cleanup_d)(void);
extern int (*OBJ_cmp_d)(const ASN1_OBJECT *a, const ASN1_OBJECT *b);
extern int (*OBJ_create_d)(const char *oid, const char *sn, const char *ln);
extern int (*OBJ_create_objects_d)(BIO *in);
extern ASN1_OBJECT *(*OBJ_dup_d)(const ASN1_OBJECT *o);
extern int (*OBJ_find_sigid_algs_d)(int signid, int *pdig_nid, int *ppkey_nid);
extern int (*OBJ_find_sigid_by_algs_d)(int *psignid, int dig_nid, int pkey_nid);
extern int (*OBJ_ln2nid_d)(const char *s);
extern int (*OBJ_new_nid_d)(int num);
extern const char *(*OBJ_nid2ln_d)(int n);
extern ASN1_OBJECT *(*OBJ_nid2obj_d)(int n);
extern const char *(*OBJ_nid2sn_d)(int n);
extern int (*OBJ_obj2nid_d)(const ASN1_OBJECT *o);
extern int (*OBJ_obj2txt_d)(char *buf, int buf_len, const ASN1_OBJECT *a, int no_name);
extern void (*OBJ_sigid_free_d)(void);
extern int (*OBJ_sn2nid_d)(const char *s);
extern int (*OBJ_txt2nid_d)(const char *s);
extern ASN1_OBJECT *(*OBJ_txt2obj_d)(const char *s, int no_name);
extern int (*OCSP_BASICRESP_add1_ext_i2d_d)(void *x, int nid, void *value, int crit, unsigned long flags);
extern int (*OCSP_BASICRESP_add_ext_d)(void *x, X509_EXTENSION *ex, int loc);
extern X509_EXTENSION *(*OCSP_BASICRESP_delete_ext_d)(void *x, int loc);
extern void *(*OCSP_BASICRESP_get1_ext_d2i_d)(void *x, int nid, int *crit, int *idx);
extern X509_EXTENSION *(*OCSP_BASICRESP_get_ext_d)(void *x, int loc);
extern int (*OCSP_BASICRESP_get_ext_by_NID_d)(void *x, int nid, int lastpos);
extern int (*OCSP_BASICRESP_get_ext_by_OBJ_d)(void *x, ASN1_OBJECT *obj, int lastpos);
extern int (*OCSP_BASICRESP_get_ext_by_critical_d)(void *x, int crit, int lastpos);
extern int (*OCSP_BASICRESP_get_ext_count_d)(void *x);
extern void *(*OCSP_CERTID_dup_d)(void *id);
extern int (*OCSP_ONEREQ_add1_ext_i2d_d)(void *x, int nid, void *value, int crit, unsigned long flags);
extern int (*OCSP_ONEREQ_add_ext_d)(void *x, X509_EXTENSION *ex, int loc);
extern X509_EXTENSION *(*OCSP_ONEREQ_delete_ext_d)(void *x, int loc);
extern void *(*OCSP_ONEREQ_get1_ext_d2i_d)(void *x, int nid, int *crit, int *idx);
extern X509_EXTENSION *(*OCSP_ONEREQ_get_ext_d)(void *x, int loc);
extern int (*OCSP_ONEREQ_get_ext_by_NID_d)(void *x, int nid, int lastpos);
extern int (*OCSP_ONEREQ_get_ext_by_OBJ_d)(void *x, ASN1_OBJECT *obj, int lastpos);
extern int (*OCSP_ONEREQ_get_ext_by_critical_d)(void *x, int crit, int lastpos);
extern int (*OCSP_ONEREQ_get_ext_count_d)(void *x);
extern int (*OCSP_REQUEST_add1_ext_i2d_d)(void *x, int nid, void *value, int crit, unsigned long flags);
extern int (*OCSP_REQUEST_add_ext_d)(void *x, X509_EXTENSION *ex, int loc);
extern X509_EXTENSION *(*OCSP_REQUEST_delete_ext_d)(void *x, int loc);
extern void *(*OCSP_REQUEST_get1_ext_d2i_d)(void *x, int nid, int *crit, int *idx);
extern X509_EXTENSION *(*OCSP_REQUEST_get_ext_d)(void *x, int loc);
extern int (*OCSP_REQUEST_get_ext_by_NID_d)(void *x, int nid, int lastpos);
extern int (*OCSP_REQUEST_get_ext_by_OBJ_d)(void *x, ASN1_OBJECT *obj, int lastpos);
extern int (*OCSP_REQUEST_get_ext_by_critical_d)(void *x, int crit, int lastpos);
extern int (*OCSP_REQUEST_get_ext_count_d)(void *x);
extern int (*OCSP_REQUEST_print_d)(BIO *bp, void *a, unsigned long flags);
extern int (*OCSP_REQ_CTX_add1_header_d)(OCSP_REQ_CTX *rctx, const char *name, const char *value);
extern void (*OCSP_REQ_CTX_free_d)(OCSP_REQ_CTX *rctx);
extern BIO *(*OCSP_REQ_CTX_get0_mem_bio_d)(OCSP_REQ_CTX *rctx);
extern int (*OCSP_REQ_CTX_http_d)(OCSP_REQ_CTX *rctx, const char *op, const char *path);
extern int (*OCSP_REQ_CTX_i2d_d)(OCSP_REQ_CTX *rctx, const ASN1_ITEM *it, ASN1_VALUE *val);
extern int (*OCSP_REQ_CTX_nbio_d)(OCSP_REQ_CTX *rctx);
extern int (*OCSP_REQ_CTX_nbio_d2i_d)(OCSP_REQ_CTX *rctx, ASN1_VALUE **pval, const ASN1_ITEM *it);
extern OCSP_REQ_CTX *(*OCSP_REQ_CTX_new_d)(BIO *io, int maxline);
extern int (*OCSP_REQ_CTX_set1_req_d)(OCSP_REQ_CTX *rctx, void *req);
extern int (*OCSP_RESPONSE_print_d)(BIO *bp, OCSP_RESPONSE *o, unsigned long flags);
extern int (*OCSP_SINGLERESP_add1_ext_i2d_d)(void *x, int nid, void *value, int crit, unsigned long flags);
extern int (*OCSP_SINGLERESP_add_ext_d)(void *x, X509_EXTENSION *ex, int loc);
extern X509_EXTENSION *(*OCSP_SINGLERESP_delete_ext_d)(void *x, int loc);
extern void *(*OCSP_SINGLERESP_get1_ext_d2i_d)(void *x, int nid, int *crit, int *idx);
extern X509_EXTENSION *(*OCSP_SINGLERESP_get_ext_d)(void *x, int loc);
extern int (*OCSP_SINGLERESP_get_ext_by_NID_d)(void *x, int nid, int lastpos);
extern int (*OCSP_SINGLERESP_get_ext_by_OBJ_d)(void *x, ASN1_OBJECT *obj, int lastpos);
extern int (*OCSP_SINGLERESP_get_ext_by_critical_d)(void *x, int crit, int lastpos);
extern int (*OCSP_SINGLERESP_get_ext_count_d)(void *x);
extern X509_EXTENSION *(*OCSP_accept_responses_new_d)(char **oids);
extern X509_EXTENSION *(*OCSP_archive_cutoff_new_d)(char *tim);
extern int (*OCSP_basic_add1_cert_d)(void *resp, X509 *cert);
extern int (*OCSP_basic_add1_nonce_d)(void *resp, unsigned char *val, int len);
extern void *(*OCSP_basic_add1_status_d)(void *rsp, void *cid, int status, int reason, ASN1_TIME *revtime, ASN1_TIME *thisupd, ASN1_TIME *nextupd);
extern int (*OCSP_basic_sign_d)(void *brsp, X509 *signer, EVP_PKEY *key, const EVP_MD *dgst,struct stack_st_X509 *certs, unsigned long flags);
extern void *(*OCSP_cert_id_new_d)(const EVP_MD *dgst, X509_NAME *issuerName, ASN1_BIT_STRING *issuerKey, ASN1_INTEGER *serialNumber);
extern const char *(*OCSP_cert_status_str_d)(long s);
extern void *(*OCSP_cert_to_id_d)(const EVP_MD *dgst, X509 *subject, X509 *issuer);
extern int (*OCSP_check_nonce_d)(void *req, void *bs);
extern int (*OCSP_check_validity_d)(ASN1_GENERALIZEDTIME *thisupd, ASN1_GENERALIZEDTIME *nextupd, long sec, long maxsec);
extern int (*OCSP_copy_nonce_d)(void *resp, void *req);
extern X509_EXTENSION *(*OCSP_crlID_new_d)(char *url, long *n, char *tim);
extern const char *(*OCSP_crl_reason_str_d)(long s);
extern int (*OCSP_id_cmp_d)(void *a, void *b);
extern int (*OCSP_id_get0_info_d)(ASN1_OCTET_STRING **piNameHash, ASN1_OBJECT **pmd, ASN1_OCTET_STRING **pikeyHash, ASN1_INTEGER **pserial, void *cid);
extern int (*OCSP_id_issuer_cmp_d)(void *a, void *b);
extern void *(*OCSP_onereq_get0_id_d)(void *one);
extern int (*OCSP_parse_url_d)(const char *url, char **phost, char **pport, char **ppath, int *pssl);
extern void *(*OCSP_request_add0_id_d)(void *req, void *cid);
extern int (*OCSP_request_add1_cert_d)(void *req, X509 *cert);
extern int (*OCSP_request_add1_nonce_d)(void *req, unsigned char *val, int len);
extern int (*OCSP_request_is_signed_d)(void *req);
extern int (*OCSP_request_onereq_count_d)(void *req);
extern void *(*OCSP_request_onereq_get0_d)(void *req, int i);
extern int (*OCSP_request_set1_name_d)(void *req, X509_NAME *nm);
extern int (*OCSP_request_sign_d)(void *req, X509 *signer, EVP_PKEY *key, const EVP_MD *dgst,struct stack_st_X509 *certs, unsigned long flags);
extern int (*OCSP_resp_count_d)(void *bs);
extern int (*OCSP_resp_find_d)(void *bs, void *id, int last);
extern int (*OCSP_resp_find_status_d)(void *bs, void *id, int *status, int *reason, ASN1_GENERALIZEDTIME **revtime, ASN1_GENERALIZEDTIME **thisupd, ASN1_GENERALIZEDTIME **nextupd);
extern void *(*OCSP_resp_get0_d)(void *bs, int idx);
extern OCSP_RESPONSE *(*OCSP_response_create_d)(int status, void *bs);
extern void *(*OCSP_response_get1_basic_d)(OCSP_RESPONSE *resp);
extern int (*OCSP_response_status_d)(OCSP_RESPONSE *resp);
extern const char *(*OCSP_response_status_str_d)(long s);
extern OCSP_RESPONSE *(*OCSP_sendreq_bio_d)(BIO *b, const char *path, void *req);
extern int (*OCSP_sendreq_nbio_d)(OCSP_RESPONSE **presp, OCSP_REQ_CTX *rctx);
extern OCSP_REQ_CTX *(*OCSP_sendreq_new_d)(BIO *io, const char *path, void *req, int maxline);
extern void (*OCSP_set_max_response_length_d)(OCSP_REQ_CTX *rctx, unsigned long len);
extern int (*OCSP_single_get0_status_d)(void *single, int *reason, ASN1_GENERALIZEDTIME **revtime, ASN1_GENERALIZEDTIME **thisupd, ASN1_GENERALIZEDTIME **nextupd);
extern X509_EXTENSION *(*OCSP_url_svcloc_new_d)(X509_NAME *issuer, char **urls);
extern void (*OPENSSL_add_all_algorithms_conf_d)(void);
extern void (*OPENSSL_add_all_algorithms_noconf_d)(void);
extern unsigned char *(*OPENSSL_asc2uni_d)(const char *asc, int asclen, unsigned char **uni, int *unilen);
extern void (*OPENSSL_cleanse_d)(void *ptr, size_t len);
extern void (*OPENSSL_config_d)(const char *config_name);
extern unsigned long *(*OPENSSL_ia32cap_loc_d)(void);
extern void (*OPENSSL_init_d)(void);
extern int (*OPENSSL_isservice_d)(void);
extern int (*OPENSSL_issetugid_d)(void);
extern void (*OPENSSL_load_builtin_modules_d)(void);
extern void (*OPENSSL_no_config_d)(void);
extern char *(*OPENSSL_uni2asc_d)(unsigned char *uni, int unilen);
extern int (*OTHERNAME_cmp_d)(OTHERNAME *a, OTHERNAME *b);
extern void (*OpenSSLDie_d)(const char *file, int line, const char *assertion);
extern void (*OpenSSL_add_all_ciphers_d)(void);
extern void (*OpenSSL_add_all_digests_d)(void);
extern void *(*PEM_ASN1_read_d)(d2i_of_void *d2i, const char *name, FILE *fp, void **x, pem_password_cb *cb, void *u);
extern void *(*PEM_ASN1_read_bio_d)(d2i_of_void *d2i, const char *name, BIO *bp, void **x, pem_password_cb *cb, void *u);
extern int (*PEM_ASN1_write_d)(i2d_of_void *i2d, const char *name, FILE *fp, void *x, const EVP_CIPHER *enc, unsigned char *kstr, int klen, pem_password_cb *callback, void *u);
extern int (*PEM_ASN1_write_bio_d)(i2d_of_void *i2d, const char *name, BIO *bp, void *x, const EVP_CIPHER *enc, unsigned char *kstr, int klen, pem_password_cb *cb, void *u);
extern int (*PEM_SealFinal_d)(PEM_ENCODE_SEAL_CTX *ctx, unsigned char *sig, int *sigl, unsigned char *out, int *outl, EVP_PKEY *priv);
extern int (*PEM_SealInit_d)(PEM_ENCODE_SEAL_CTX *ctx, EVP_CIPHER *type, EVP_MD *md_type, unsigned char **ek, int *ekl, unsigned char *iv, EVP_PKEY **pubk, int npubk);
extern void (*PEM_SealUpdate_d)(PEM_ENCODE_SEAL_CTX *ctx, unsigned char *out, int *outl, unsigned char *in, int inl);
extern int (*PEM_SignFinal_d)(EVP_MD_CTX *ctx, unsigned char *sigret, unsigned int *siglen, EVP_PKEY *pkey);
extern void (*PEM_SignInit_d)(EVP_MD_CTX *ctx, EVP_MD *type);
extern void (*PEM_SignUpdate_d)(EVP_MD_CTX *ctx, unsigned char *d, unsigned int cnt);
extern int (*PEM_X509_INFO_write_bio_d)(BIO *bp, X509_INFO *xi, EVP_CIPHER *enc, unsigned char *kstr, int klen, pem_password_cb *cd, void *u);
extern int (*PEM_bytes_read_bio_d)(unsigned char **pdata, long *plen, char **pnm, const char *name, BIO *bp, pem_password_cb *cb, void *u);
extern int (*PEM_def_callback_d)(char *buf, int num, int w, void *key);
extern void (*PEM_dek_info_d)(char *buf, const char *type, int len, char *str);
extern int (*PEM_do_header_d)(EVP_CIPHER_INFO *cipher, unsigned char *data, long *len, pem_password_cb *callback, void *u);
extern int (*PEM_get_EVP_CIPHER_INFO_d)(char *header, EVP_CIPHER_INFO *cipher);
extern void (*PEM_proc_type_d)(char *buf, int type);
extern int (*PEM_read_d)(FILE *fp, char **name, char **header, unsigned char **data, long *len);
extern int (*PEM_read_bio_d)(BIO *bp, char **name, char **header, unsigned char **data, long *len);
extern EVP_PKEY *(*PEM_read_bio_Parameters_d)(BIO *bp, EVP_PKEY **x);
extern int (*PEM_write_d)(FILE *fp, const char *name, const char *hdr, const unsigned char *data, long len);
extern int (*PEM_write_PKCS8PrivateKey_d)(FILE *fp, EVP_PKEY *x, const EVP_CIPHER *enc, char *kstr, int klen, pem_password_cb *cd, void *u);
extern int (*PEM_write_PKCS8PrivateKey_nid_d)(FILE *fp, EVP_PKEY *x, int nid, char *kstr, int klen, pem_password_cb *cb, void *u);
extern int (*PEM_write_bio_d)(BIO *bp, const char *name, const char *hdr, const unsigned char *data, long len);
extern int (*PEM_write_bio_ASN1_stream_d)(BIO *out, ASN1_VALUE *val, BIO *in, int flags, const char *hdr, const ASN1_ITEM *it);
extern int (*PEM_write_bio_PKCS7_stream_d)(BIO *out, PKCS7 *p7, BIO *in, int flags);
extern int (*PEM_write_bio_PKCS8PrivateKey_d)(BIO *, EVP_PKEY *, const EVP_CIPHER *, char *, int, pem_password_cb *, void *);
extern int (*PEM_write_bio_PKCS8PrivateKey_nid_d)(BIO *bp, EVP_PKEY *x, int nid, char *kstr, int klen, pem_password_cb *cb, void *u);
extern int (*PEM_write_bio_Parameters_d)(BIO *bp, EVP_PKEY *x);
extern void (*PKCS12_PBE_add_d)(void);
extern int (*PKCS12_PBE_keyivgen_d)(EVP_CIPHER_CTX *ctx, const char *pass, int passlen, ASN1_TYPE *param, const EVP_CIPHER *cipher, const EVP_MD *md_type, int en_de);
extern void *(*PKCS12_item_decrypt_d2i_d)(X509_ALGOR *algor, const ASN1_ITEM *it, const char *pass, int passlen, ASN1_OCTET_STRING *oct, int zbuf);
extern ASN1_OCTET_STRING *(*PKCS12_item_i2d_encrypt_d)(X509_ALGOR *algor, const ASN1_ITEM *it, const char *pass, int passlen, void *obj, int zbuf);
extern int (*PKCS12_key_gen_asc_d)(const char *pass, int passlen, unsigned char *salt, int saltlen, int id, int iter, int n, unsigned char *out, const EVP_MD *md_type);
extern int (*PKCS12_key_gen_uni_d)(unsigned char *pass, int passlen, unsigned char *salt, int saltlen, int id, int iter, int n, unsigned char *out, const EVP_MD *md_type);


extern int (*PKCS1_MGF1_d)(unsigned char *mask, long len, const unsigned char *seed, long seedlen, const EVP_MD *dgst);
extern void (*PKCS5_PBE_add_d)(void);
extern int (*PKCS5_PBE_keyivgen_d)(EVP_CIPHER_CTX *ctx, const char *pass, int passlen, ASN1_TYPE *param, const EVP_CIPHER *cipher, const EVP_MD *md, int en_de);
extern int (*PKCS5_PBKDF2_HMAC_SHA1_d)(const char *pass, int passlen, const unsigned char *salt, int saltlen, int iter, int keylen, unsigned char *out);
extern X509_ALGOR *(*PKCS5_pbe2_set_d)(const EVP_CIPHER *cipher, int iter, unsigned char *salt, int saltlen);
extern X509_ALGOR *(*PKCS5_pbe2_set_iv_d)(const EVP_CIPHER *cipher, int iter, unsigned char *salt, int saltlen, unsigned char *aiv, int prf_nid);
extern X509_ALGOR *(*PKCS5_pbe_set_d)(int alg, int iter, const unsigned char *salt, int saltlen);
extern int (*PKCS5_pbe_set0_algor_d)(X509_ALGOR *algor, int alg, int iter, const unsigned char *salt, int saltlen);
extern X509_ALGOR *(*PKCS5_pbkdf2_set_d)(int iter, unsigned char *salt, int saltlen, int prf_nid, int keylen);
extern int (*PKCS5_v2_PBE_keyivgen_d)(EVP_CIPHER_CTX *ctx, const char *pass, int passlen, ASN1_TYPE *param, const EVP_CIPHER *cipher, const EVP_MD *md, int en_de);
extern int (*PKCS7_ISSUER_AND_SERIAL_digest_d)(PKCS7_ISSUER_AND_SERIAL *data, const EVP_MD *type, unsigned char *md, unsigned int *len);
extern void (*PKCS7_RECIP_INFO_get0_alg_d)(PKCS7_RECIP_INFO *ri, X509_ALGOR **penc);
extern int (*PKCS7_RECIP_INFO_set_d)(PKCS7_RECIP_INFO *p7i, X509 *x509);
extern void (*PKCS7_SIGNER_INFO_get0_algs_d)(PKCS7_SIGNER_INFO *si, EVP_PKEY **pk, X509_ALGOR **pdig, X509_ALGOR **psig);
extern int (*PKCS7_SIGNER_INFO_set_d)(PKCS7_SIGNER_INFO *p7i, X509 *x509, EVP_PKEY *pkey, const EVP_MD *dgst);
extern int (*PKCS7_SIGNER_INFO_sign_d)(PKCS7_SIGNER_INFO *si);
extern int (*PKCS7_add0_attrib_signing_time_d)(PKCS7_SIGNER_INFO *si, ASN1_TIME *t);
extern int (*PKCS7_add1_attrib_digest_d)(PKCS7_SIGNER_INFO *si, const unsigned char *md, int mdlen);
extern int (*PKCS7_add_attrib_content_type_d)(PKCS7_SIGNER_INFO *si, ASN1_OBJECT *coid);
extern int (*PKCS7_add_attribute_d)(PKCS7_SIGNER_INFO *p7si, int nid, int atrtype, void *value);
extern int (*PKCS7_add_certificate_d)(PKCS7 *p7, X509 *x509);
extern int (*PKCS7_add_crl_d)(PKCS7 *p7, X509_CRL *x509);
extern PKCS7_RECIP_INFO *(*PKCS7_add_recipient_d)(PKCS7 *p7, X509 *x509);
extern int (*PKCS7_add_recipient_info_d)(PKCS7 *p7, PKCS7_RECIP_INFO *ri);
extern PKCS7_SIGNER_INFO *(*PKCS7_add_signature_d)(PKCS7 *p7, X509 *x509, EVP_PKEY *pkey, const EVP_MD *dgst);
extern int (*PKCS7_add_signed_attribute_d)(PKCS7_SIGNER_INFO *p7si, int nid, int type, void *data);
extern int (*PKCS7_add_signer_d)(PKCS7 *p7, PKCS7_SIGNER_INFO *p7i);
extern X509 *(*PKCS7_cert_from_signer_info_d)(PKCS7 *p7, PKCS7_SIGNER_INFO *si);
extern int (*PKCS7_content_new_d)(PKCS7 *p7, int nid);
extern long (*PKCS7_ctrl_d)(PKCS7 *p7, int cmd, long larg, char *parg);
extern BIO *(*PKCS7_dataDecode_d)(PKCS7 *p7, EVP_PKEY *pkey, BIO *in_bio, X509 *pcert);
extern int (*PKCS7_dataFinal_d)(PKCS7 *p7, BIO *bio);
extern BIO *(*PKCS7_dataInit_d)(PKCS7 *p7, BIO *bio);
extern int (*PKCS7_dataVerify_d)(X509_STORE *cert_store, X509_STORE_CTX *ctx, BIO *bio, PKCS7 *p7, PKCS7_SIGNER_INFO *si);
extern int (*PKCS7_decrypt_d)(PKCS7 *p7, EVP_PKEY *pkey, X509 *cert, BIO *data, int flags);
extern PKCS7 *(*PKCS7_dup_d)(PKCS7 *p7);
extern int (*PKCS7_final_d)(PKCS7 *p7, BIO *data, int flags);
extern ASN1_TYPE *(*PKCS7_get_attribute_d)(PKCS7_SIGNER_INFO *si, int nid);
extern PKCS7_ISSUER_AND_SERIAL *(*PKCS7_get_issuer_and_serial_d)(PKCS7 *p7, int idx);
extern ASN1_TYPE *(*PKCS7_get_signed_attribute_d)(PKCS7_SIGNER_INFO *si, int nid);
extern int (*PKCS7_set0_type_other_d)(PKCS7 *p7, int type, ASN1_TYPE *other);
extern int (*PKCS7_set_cipher_d)(PKCS7 *p7, const EVP_CIPHER *cipher);
extern int (*PKCS7_set_content_d)(PKCS7 *p7, PKCS7 *p7_data);
extern int (*PKCS7_set_digest_d)(PKCS7 *p7, const EVP_MD *md);
extern int (*PKCS7_set_type_d)(PKCS7 *p7, int type);
extern PKCS7_SIGNER_INFO *(*PKCS7_sign_add_signer_d)(PKCS7 *p7, X509 *signcert, EVP_PKEY *pkey, const EVP_MD *md, int flags);
extern int (*PKCS7_signatureVerify_d)(BIO *bio, PKCS7 *p7, PKCS7_SIGNER_INFO *si, X509 *x509);
extern int (*PKCS7_stream_d)(unsigned char ***boundary, PKCS7 *p7);
extern int (*PKCS8_add_keyusage_d)(PKCS8_PRIV_KEY_INFO *p8, int usage);
extern PKCS8_PRIV_KEY_INFO *(*PKCS8_decrypt_d)(X509_SIG *p8, const char *pass, int passlen);
extern X509_SIG *(*PKCS8_encrypt_d)(int pbe_nid, const EVP_CIPHER *cipher, const char *pass, int passlen, unsigned char *salt, int saltlen, int iter, PKCS8_PRIV_KEY_INFO *p8);
extern int (*PKCS8_pkey_get0_d)(ASN1_OBJECT **ppkalg, const unsigned char **pk, int *ppklen, X509_ALGOR **pa, PKCS8_PRIV_KEY_INFO *p8);
extern int (*PKCS8_pkey_set0_d)(PKCS8_PRIV_KEY_INFO *priv, ASN1_OBJECT *aobj, int version, int ptype, void *pval, unsigned char *penc, int penclen);
extern PKCS8_PRIV_KEY_INFO *(*PKCS8_set_broken_d)(PKCS8_PRIV_KEY_INFO *p8, int broken);
extern RAND_METHOD *(*RAND_SSLeay_d)(void);
extern void (*RAND_add_d)(const void *buf, int num, double entropy);
extern int (*RAND_bytes_d)(unsigned char *buf, int num);
extern void (*RAND_cleanup_d)(void);
extern int (*RAND_egd_d)(const char *path);
extern int (*RAND_egd_bytes_d)(const char *path, int bytes);
extern const char *(*RAND_file_name_d)(char *file, size_t num);
extern const RAND_METHOD *(*RAND_get_rand_method_d)(void);
extern int (*RAND_init_fips_d)(void);
extern int (*RAND_load_file_d)(const char *file, long max_bytes);
extern int (*RAND_poll_d)(void);
extern int (*RAND_pseudo_bytes_d)(unsigned char *buf, int num);
extern int (*RAND_pseudo_bytes_d)(unsigned char *buf, int num);
extern int (*RAND_query_egd_bytes_d)(const char *path, unsigned char *buf, int bytes);
extern void (*RAND_screen_d)(void);
extern void (*RAND_seed_d)(const void *buf, int num);
extern void (*RAND_set_fips_drbg_type_d)(int type, int flags);
extern int (*RAND_set_rand_engine_d)(ENGINE *engine);
extern int (*RAND_set_rand_method_d)(const RAND_METHOD *meth);
extern int (*RAND_status_d)(void);
extern int (*RAND_write_file_d)(const char *file);

extern RSA *(*RSAPrivateKey_dup_d)(RSA *rsa);
extern RSA *(*RSAPublicKey_dup_d)(RSA *rsa);
extern const RSA_METHOD *(*RSA_PKCS1_SSLeay_d)(void);
extern int (*RSA_X931_hash_id_d)(int nid);
extern void (*RSA_blinding_off_d)(RSA *rsa);
extern int (*RSA_blinding_on_d)(RSA *rsa, BN_CTX *ctx);
extern int (*RSA_check_key_d)(const RSA *);
extern int (*RSA_flags_d)(const RSA *r);
extern void (*RSA_free_d)(RSA *r);
extern RSA *(*RSA_generate_key_d)(int bits, unsigned long e, void (*callback) (int, int, void *), void *cb_arg);
extern int (*RSA_generate_key_ex_d)(RSA *rsa, int bits, BIGNUM *e, BN_GENCB *cb);
extern const RSA_METHOD *(*RSA_get_default_method_d)(void);
extern void *(*RSA_get_ex_data_d)(const RSA *r, int idx);
extern int (*RSA_get_ex_new_index_d)(long argl, void *argp, CRYPTO_EX_new *new_func, CRYPTO_EX_dup *dup_func, CRYPTO_EX_free *free_func);
extern const RSA_METHOD *(*RSA_get_method_d)(const RSA *rsa);
extern int (*RSA_memory_lock_d)(RSA *r);
extern RSA *(*RSA_new_d)(void);
extern RSA *(*RSA_new_method_d)(ENGINE *engine);
extern const RSA_METHOD *(*RSA_null_method_d)(void);
extern int (*RSA_padding_add_PKCS1_OAEP_d)(unsigned char *to, int tlen, const unsigned char *f, int fl, const unsigned char *p, int pl);
extern int (*RSA_padding_add_PKCS1_OAEP_mgf1_d)(unsigned char *to, int tlen, const unsigned char *from, int flen, const unsigned char *param, int plen, const EVP_MD *md, const EVP_MD *mgf1md);
extern int (*RSA_padding_add_PKCS1_PSS_d)(RSA *rsa, unsigned char *EM, const unsigned char *mHash, const EVP_MD *Hash, int sLen);
extern int (*RSA_padding_add_PKCS1_PSS_mgf1_d)(RSA *rsa, unsigned char *EM, const unsigned char *mHash, const EVP_MD *Hash, const EVP_MD *mgf1Hash, int sLen);
extern int (*RSA_padding_add_PKCS1_type_1_d)(unsigned char *to, int tlen, const unsigned char *f, int fl);
extern int (*RSA_padding_add_PKCS1_type_2_d)(unsigned char *to, int tlen, const unsigned char *f, int fl);
extern int (*RSA_padding_add_SSLv23_d)(unsigned char *to, int tlen, const unsigned char *f, int fl);
extern int (*RSA_padding_add_X931_d)(unsigned char *to, int tlen, const unsigned char *f, int fl);
extern int (*RSA_padding_add_none_d)(unsigned char *to, int tlen, const unsigned char *f, int fl);
extern int (*RSA_padding_check_PKCS1_OAEP_d)(unsigned char *to, int tlen, const unsigned char *f, int fl, int rsa_len, const unsigned char *p, int pl);
extern int (*RSA_padding_check_PKCS1_OAEP_mgf1_d)(unsigned char *to, int tlen, const unsigned char *from, int flen, int num, const unsigned char *param, int plen, const EVP_MD *md, const EVP_MD *mgf1md);
extern int (*RSA_padding_check_PKCS1_type_1_d)(unsigned char *to, int tlen, const unsigned char *f, int fl, int rsa_len);
extern int (*RSA_padding_check_PKCS1_type_2_d)(unsigned char *to, int tlen, const unsigned char *f, int fl, int rsa_len);
extern int (*RSA_padding_check_SSLv23_d)(unsigned char *to, int tlen, const unsigned char *f, int fl, int rsa_len);
extern int (*RSA_padding_check_X931_d)(unsigned char *to, int tlen, const unsigned char *f, int fl, int rsa_len);
extern int (*RSA_padding_check_none_d)(unsigned char *to, int tlen, const unsigned char *f, int fl, int rsa_len);
extern int (*RSA_print_d)(BIO *bp, const RSA *r, int offset);
extern int (*RSA_print_fp_d)(FILE *fp, const RSA *r, int offset);
extern int (*RSA_private_decrypt_d)(int flen, const unsigned char *from, unsigned char *to, RSA *rsa, int padding);
extern int (*RSA_private_encrypt_d)(int flen, const unsigned char *from, unsigned char *to, RSA *rsa, int padding);
extern int (*RSA_public_decrypt_d)(int flen, const unsigned char *from, unsigned char *to, RSA *rsa, int padding);
extern int (*RSA_public_encrypt_d)(int flen, const unsigned char *from, unsigned char *to, RSA *rsa, int padding);
extern void (*RSA_set_default_method_d)(const RSA_METHOD *meth);
extern int (*RSA_set_ex_data_d)(RSA *r, int idx, void *arg);
extern int (*RSA_set_method_d)(RSA *rsa, const RSA_METHOD *meth);
extern BN_BLINDING *(*RSA_setup_blinding_d)(RSA *rsa, BN_CTX *ctx);
extern int (*RSA_sign_d)(int type, const unsigned char *m, unsigned int m_length, unsigned char *sigret, unsigned int *siglen, RSA *rsa);
extern int (*RSA_sign_ASN1_OCTET_STRING_d)(int type, const unsigned char *m, unsigned int m_length, unsigned char *sigret, unsigned int *siglen, RSA *rsa);
extern int (*RSA_size_d)(const RSA *rsa);
extern int (*RSA_up_ref_d)(RSA *r);
extern int (*RSA_verify_d)(int type, const unsigned char *m, unsigned int m_length, const unsigned char *sigbuf, unsigned int siglen, RSA *rsa);
extern int (*RSA_verify_ASN1_OCTET_STRING_d)(int type, const unsigned char *m, unsigned int m_length, unsigned char *sigbuf, unsigned int siglen, RSA *rsa);
extern int (*RSA_verify_PKCS1_PSS_d)(RSA *rsa, const unsigned char *mHash, const EVP_MD *Hash, const unsigned char *EM, int sLen);
extern int (*RSA_verify_PKCS1_PSS_mgf1_d)(RSA *rsa, const unsigned char *mHash, const EVP_MD *Hash, const EVP_MD *mgf1Hash, const unsigned char *EM, int sLen);

extern unsigned char *(*SHA_d)(const unsigned char *d, size_t n, unsigned char *md);
extern unsigned char *(*SHA1_d)(const unsigned char *d, size_t n, unsigned char *md);
extern int (*SHA1_Final_d)(unsigned char *md, SHA_CTX *c);
extern int (*SHA1_Init_d)(SHA_CTX *c);
extern void (*SHA1_Transform_d)(SHA_CTX *c, const unsigned char *data);
extern int (*SHA1_Update_d)(SHA_CTX *c, const void *data, size_t len);
extern unsigned char *(*SHA224_d)(const unsigned char *d, size_t n, unsigned char *md);
extern int (*SHA224_Final_d)(unsigned char *md, SHA256_CTX *c);
extern int (*SHA224_Init_d)(SHA256_CTX *c);
extern int (*SHA224_Update_d)(SHA256_CTX *c, const void *data, size_t len);
extern unsigned char *(*SHA256_d)(const unsigned char *d, size_t n, unsigned char *md);
extern int (*SHA256_Final_d)(unsigned char *md, SHA256_CTX *c);
extern int (*SHA256_Init_d)(SHA256_CTX *c);
extern void (*SHA256_Transform_d)(SHA256_CTX *c, const unsigned char *data);
extern int (*SHA256_Update_d)(SHA256_CTX *c, const void *data, size_t len);
extern unsigned char *(*SHA384_d)(const unsigned char *d, size_t n, unsigned char *md);
extern int (*SHA384_Final_d)(unsigned char *md, SHA512_CTX *c);
extern int (*SHA384_Init_d)(SHA512_CTX *c);
extern int (*SHA384_Update_d)(SHA512_CTX *c, const void *data, size_t len);
extern unsigned char *(*SHA512_d)(const unsigned char *d, size_t n, unsigned char *md);
extern int (*SHA512_Final_d)(unsigned char *md, SHA512_CTX *c);
extern int (*SHA512_Init_d)(SHA512_CTX *c);
extern void (*SHA512_Transform_d)(SHA512_CTX *c, const unsigned char *data);
extern int (*SHA512_Update_d)(SHA512_CTX *c, const void *data, size_t len);
extern int (*SHA_Final_d)(unsigned char *md, SHA_CTX *c);
extern int (*SHA_Init_d)(SHA_CTX *c);
extern void (*SHA_Transform_d)(SHA_CTX *c, const unsigned char *data);
extern int (*SHA_Update_d)(SHA_CTX *c, const void *data, size_t len);
extern int (*SMIME_crlf_copy_d)(BIO *in, BIO *out, int flags);
extern ASN1_VALUE *(*SMIME_read_ASN1_d)(BIO *bio, BIO **bcont, const ASN1_ITEM *it);
extern PKCS7 *(*SMIME_read_PKCS7_d)(BIO *bio, BIO **bcont);
extern int (*SMIME_text_d)(BIO *in, BIO *out);
extern int (*SMIME_write_ASN1_d)(BIO *bio, ASN1_VALUE *val, BIO *data, int flags, int ctype_nid, int econt_nid, struct stack_st_X509_ALGOR *mdalgs, const ASN1_ITEM *it);
extern int (*SMIME_write_PKCS7_d)(BIO *bio, PKCS7 *p7, BIO *data, int flags);
extern BIGNUM *(*SRP_Calc_A_d)(BIGNUM *a, BIGNUM *N, BIGNUM *g);
extern int (*SRP_Calc_A_param_d)(SSL *s);
extern BIGNUM *(*SRP_Calc_B_d)(BIGNUM *b, BIGNUM *N, BIGNUM *g, BIGNUM *v);
extern BIGNUM *(*SRP_Calc_client_key_d)(BIGNUM *N, BIGNUM *B, BIGNUM *g, BIGNUM *x, BIGNUM *a, BIGNUM *u);
extern BIGNUM *(*SRP_Calc_server_key_d)(BIGNUM *A, BIGNUM *v, BIGNUM *u, BIGNUM *b, BIGNUM *N);
extern BIGNUM *(*SRP_Calc_u_d)(BIGNUM *A, BIGNUM *B, BIGNUM *N);
extern BIGNUM *(*SRP_Calc_x_d)(BIGNUM *s, const char *user, const char *pass);
extern int (*SRP_Verify_A_mod_N_d)(BIGNUM *A, BIGNUM *N);
extern int (*SRP_Verify_B_mod_N_d)(BIGNUM *B, BIGNUM *N);
extern char *(*SRP_check_known_gN_param_d)(BIGNUM *g, BIGNUM *N);
extern char *(*SRP_create_verifier_d)(const char *user, const char *pass, char **salt, char **verifier, const char *N, const char *g);
extern int (*SRP_create_verifier_BN_d)(const char *user, const char *pass, BIGNUM **salt, BIGNUM **verifier, BIGNUM *N, BIGNUM *g);
extern int (*SRP_generate_client_master_secret_d)(SSL *s, unsigned char *master_key);
extern int (*SRP_generate_server_master_secret_d)(SSL *s, unsigned char *master_key);
extern char *(*SSL_CIPHER_description_d)(const SSL_CIPHER *, char *buf, int size);
extern const SSL_CIPHER *(*SSL_CIPHER_find_d)(SSL *ssl, const unsigned char *ptr);
extern int (*SSL_CIPHER_get_bits_d)(const SSL_CIPHER *c, int *alg_bits);
extern unsigned long (*SSL_CIPHER_get_id_d)(const SSL_CIPHER *c);
extern const char *(*SSL_CIPHER_get_name_d)(const SSL_CIPHER *c);
extern char *(*SSL_CIPHER_get_version_d)(const SSL_CIPHER *c);
extern const char *(*SSL_CIPHER_standard_name_d)(const SSL_CIPHER *c);
extern int (*SSL_COMP_add_compression_method_d)(int id, COMP_METHOD *cm);
extern void (*SSL_COMP_free_compression_methods_d)(void);
extern struct stack_st_SSL_COMP *(*SSL_COMP_get_compression_methods_d)(void);
extern const char *(*SSL_COMP_get_name_d)(const COMP_METHOD *comp);
extern unsigned int (*SSL_CONF_CTX_clear_flags_d)(SSL_CONF_CTX *cctx, unsigned int flags);
extern int (*SSL_CONF_CTX_finish_d)(SSL_CONF_CTX *cctx);
extern void (*SSL_CONF_CTX_free_d)(SSL_CONF_CTX *cctx);
extern SSL_CONF_CTX *(*SSL_CONF_CTX_new_d)(void);
extern int (*SSL_CONF_CTX_set1_prefix_d)(SSL_CONF_CTX *cctx, const char *pre);
extern unsigned int (*SSL_CONF_CTX_set_flags_d)(SSL_CONF_CTX *cctx, unsigned int flags);
extern void (*SSL_CONF_CTX_set_ssl_d)(SSL_CONF_CTX *cctx, SSL *ssl);
extern void (*SSL_CONF_CTX_set_ssl_ctx_d)(SSL_CONF_CTX *cctx, SSL_CTX *ctx);
extern int (*SSL_CONF_cmd_d)(SSL_CONF_CTX *cctx, const char *cmd, const char *value);
extern int (*SSL_CONF_cmd_argv_d)(SSL_CONF_CTX *cctx, int *pargc, char ***pargv);
extern int (*SSL_CONF_cmd_value_type_d)(SSL_CONF_CTX *cctx, const char *cmd);
extern int (*SSL_CTX_SRP_CTX_free_d)(SSL_CTX *ctx);
extern int (*SSL_CTX_SRP_CTX_init_d)(SSL_CTX *ctx);
extern int (*SSL_CTX_add_client_CA_d)(SSL_CTX *ctx, X509 *x);
extern int (*SSL_CTX_add_client_custom_ext_d)(SSL_CTX *ctx, unsigned int ext_type, custom_ext_add_cb add_cb, custom_ext_free_cb free_cb, void *add_arg, custom_ext_parse_cb parse_cb, void *parse_arg);
extern int (*SSL_CTX_add_server_custom_ext_d)(SSL_CTX *ctx, unsigned int ext_type, custom_ext_add_cb add_cb, custom_ext_free_cb free_cb, void *add_arg, custom_ext_parse_cb parse_cb, void *parse_arg);
extern int (*SSL_CTX_add_session_d)(SSL_CTX *s, SSL_SESSION *c);
extern int (*SSL_CTX_check_private_key_d)(const SSL_CTX *ctx);
extern long (*SSL_CTX_ctrl_d)(SSL_CTX *ctx, int cmd, long larg, void *parg);
extern void (*SSL_CTX_flush_sessions_d)(SSL_CTX *ctx, long tm);
extern void (*SSL_CTX_free_d)(SSL_CTX *);
extern X509 *(*SSL_CTX_get0_certificate_d)(const SSL_CTX *ctx);
extern X509_VERIFY_PARAM *(*SSL_CTX_get0_param_d)(SSL_CTX *ctx);
extern EVP_PKEY *(*SSL_CTX_get0_privatekey_d)(const SSL_CTX *ctx);
extern X509_STORE *(*SSL_CTX_get_cert_store_d)(const SSL_CTX *);
extern int (*(*SSL_CTX_get_client_cert_cb_d)(SSL_CTX *ctx)) (SSL_CTX *ctx);
extern void *(*SSL_CTX_get_ex_data_d)(const SSL_CTX *ssl, int idx);
extern int (*SSL_CTX_get_ex_new_index_d)(long argl, void *argp, CRYPTO_EX_new *new_func, CRYPTO_EX_dup *dup_func, CRYPTO_EX_free *free_func);
extern void (*(*SSL_CTX_get_info_callback_d)(SSL_CTX *ctx)) (SSL_CTX *ctx);
extern int (*SSL_CTX_get_quiet_shutdown_d)(const SSL_CTX *ctx);
extern const SSL_METHOD *(*SSL_CTX_get_ssl_method_d)(SSL_CTX *ctx);
extern long (*SSL_CTX_get_timeout_d)(const SSL_CTX *ctx);
extern int (*(*SSL_CTX_get_verify_callback_d)(const SSL_CTX *ctx)) (const SSL_CTX *ctx);
extern int (*SSL_CTX_get_verify_depth_d)(const SSL_CTX *ctx);
extern int (*SSL_CTX_get_verify_mode_d)(const SSL_CTX *ctx);
extern int (*SSL_CTX_load_verify_locations_d)(SSL_CTX *ctx, const char *CAfile, const char *CApath);
extern SSL_CTX *(*SSL_CTX_new_d)(const SSL_METHOD *meth);
extern int (*SSL_CTX_remove_session_d)(SSL_CTX *, SSL_SESSION *c);
extern SSL_SESSION *(*(*SSL_CTX_sess_get_get_cb_d)(SSL_CTX *ctx)) (SSL_CTX *ctx);
extern int (*(*SSL_CTX_sess_get_new_cb_d)(SSL_CTX *ctx)) (SSL_CTX *ctx);
extern void (*(*SSL_CTX_sess_get_remove_cb_d)(SSL_CTX *ctx)) (SSL_CTX *ctx);
extern void (*SSL_CTX_sess_set_get_cb_d)(SSL_CTX *ctx, SSL_SESSION *(*get_session_cb) (struct ssl_st *ssl, unsigned char *data, int len, int *copy));
extern void (*SSL_CTX_sess_set_new_cb_d)(SSL_CTX *ctx, int (*new_session_cb) (struct ssl_st *ssl, SSL_SESSION *sess));
extern void (*SSL_CTX_sess_set_remove_cb_d)(SSL_CTX *ctx, void (*remove_session_cb) (struct ssl_ctx_st *ctx, SSL_SESSION *sess));
extern int (*SSL_CTX_set1_param_d)(SSL_CTX *ctx, X509_VERIFY_PARAM *vpm);
extern int (*SSL_CTX_set_alpn_protos_d)(SSL_CTX *ctx, const unsigned char *protos, unsigned protos_len);
extern void (*SSL_CTX_set_alpn_select_cb_d)(SSL_CTX *ctx, int (*cb) (SSL *ssl, const unsigned char **out, unsigned char *outlen, const unsigned char *in, unsigned int inlen, void *arg), void *arg);
extern void (*SSL_CTX_set_cert_store_d)(SSL_CTX *, X509_STORE *);
extern void (*SSL_CTX_set_cert_verify_callback_d)(SSL_CTX *ctx, int (*cb) (X509_STORE_CTX *, void *), void *arg);
extern int (*SSL_CTX_set_cipher_list_d)(SSL_CTX *, const char *str);
extern void (*SSL_CTX_set_client_cert_cb_d)(SSL_CTX *ctx, int (*client_cert_cb) (SSL *ssl, X509 **x509, EVP_PKEY **pkey));
extern int (*SSL_CTX_set_client_cert_engine_d)(SSL_CTX *ctx, ENGINE *e);
extern void (*SSL_CTX_set_cookie_generate_cb_d)(SSL_CTX *ctx, int (*app_gen_cookie_cb) (SSL *ssl, unsigned char *cookie, unsigned int *cookie_len));
extern void (*SSL_CTX_set_cookie_verify_cb_d)(SSL_CTX *ctx, int (*app_verify_cookie_cb) (SSL *ssl, unsigned char *cookie, unsigned int cookie_len));
extern void (*SSL_CTX_set_default_passwd_cb_d)(SSL_CTX *ctx, pem_password_cb *cb);
extern void (*SSL_CTX_set_default_passwd_cb_userdata_d)(SSL_CTX *ctx, void *u);
extern int (*SSL_CTX_set_default_verify_paths_d)(SSL_CTX *ctx);
extern int (*SSL_CTX_set_ex_data_d)(SSL_CTX *ssl, int idx, void *data);
extern int (*SSL_CTX_set_generate_session_id_d)(SSL_CTX *, GEN_SESSION_CB);
extern void (*SSL_CTX_set_info_callback_d)(SSL_CTX *ctx, void (*cb) (const SSL *ssl, int type, int val));
extern void (*SSL_CTX_set_msg_callback_d)(SSL_CTX *ctx, void (*cb) (int write_p, int version, int content_type, const void *buf, size_t len, SSL *ssl, void *arg));
extern void (*SSL_CTX_set_next_proto_select_cb_d)(SSL_CTX *s, int (*cb) (SSL *ssl, unsigned char **out, unsigned char *outlen, const unsigned char *in, unsigned int inlen, void *arg), void *arg);
extern void (*SSL_CTX_set_next_protos_advertised_cb_d)(SSL_CTX *s, int (*cb) (SSL *ssl, const unsigned char **out, unsigned int *outlen, void *arg), void *arg);
extern void (*SSL_CTX_set_psk_client_callback_d)(SSL_CTX *ctx, unsigned int (*psk_client_callback) (SSL *ssl, const char *hint, char *identity, unsigned int max_identity_len, unsigned char *psk, unsigned int max_psk_len));
extern void (*SSL_CTX_set_psk_server_callback_d)(SSL_CTX *ctx, unsigned int (*psk_server_callback) (SSL *ssl, const char *identity, unsigned char *psk, unsigned int max_psk_len));
extern int (*SSL_CTX_set_purpose_d)(SSL_CTX *s, int purpose);
extern void (*SSL_CTX_set_quiet_shutdown_d)(SSL_CTX *ctx, int mode);
extern int (*SSL_CTX_set_session_id_context_d)(SSL_CTX *ctx, const unsigned char *sid_ctx, unsigned int sid_ctx_len);
extern int (*SSL_CTX_set_srp_cb_arg_d)(SSL_CTX *ctx, void *arg);
extern int (*SSL_CTX_set_srp_client_pwd_callback_d)(SSL_CTX *ctx, char *(*cb) (SSL *, void *));
extern int (*SSL_CTX_set_srp_password_d)(SSL_CTX *ctx, char *password);
extern int (*SSL_CTX_set_srp_strength_d)(SSL_CTX *ctx, int strength);
extern int (*SSL_CTX_set_srp_username_d)(SSL_CTX *ctx, char *name);
extern int (*SSL_CTX_set_srp_username_callback_d)(SSL_CTX *ctx, int (*cb) (SSL *, int *, void *));
extern int (*SSL_CTX_set_srp_verify_param_callback_d)(SSL_CTX *ctx, int (*cb) (SSL *, void *));
extern int (*SSL_CTX_set_ssl_version_d)(SSL_CTX *ctx, const SSL_METHOD *meth);
extern long (*SSL_CTX_set_timeout_d)(SSL_CTX *ctx, long t);
extern int (*SSL_CTX_set_tlsext_use_srtp_d)(SSL_CTX *ctx, const char *profiles);
extern void (*SSL_CTX_set_tmp_dh_callback_d)(SSL_CTX *ctx, DH *(*dh) (SSL *ssl, int is_export, int keylength));
extern void (*SSL_CTX_set_tmp_ecdh_callback_d)(SSL_CTX *ctx, EC_KEY *(*ecdh) (SSL *ssl, int is_export, int keylength));
extern void (*SSL_CTX_set_tmp_rsa_callback_d)(SSL_CTX *ctx, RSA *(*cb) (SSL *ssl, int is_export, int keylength));
extern int (*SSL_CTX_set_trust_d)(SSL_CTX *s, int trust);
extern void (*SSL_CTX_set_verify_d)(SSL_CTX *ctx, int mode, int (*callback) (int, X509_STORE_CTX *));
extern void (*SSL_CTX_set_verify_depth_d)(SSL_CTX *ctx, int depth);
extern int (*SSL_CTX_use_PrivateKey_d)(SSL_CTX *ctx, EVP_PKEY *pkey);
extern int (*SSL_CTX_use_PrivateKey_ASN1_d)(int pk, SSL_CTX *ctx, const unsigned char *d, long len);
extern int (*SSL_CTX_use_PrivateKey_file_d)(SSL_CTX *ctx, const char *file, int type);
extern int (*SSL_CTX_use_RSAPrivateKey_d)(SSL_CTX *ctx, RSA *rsa);
extern int (*SSL_CTX_use_RSAPrivateKey_ASN1_d)(SSL_CTX *ctx, const unsigned char *d, long len);
extern int (*SSL_CTX_use_RSAPrivateKey_file_d)(SSL_CTX *ctx, const char *file, int type);
extern int (*SSL_CTX_use_certificate_d)(SSL_CTX *ctx, X509 *x);
extern int (*SSL_CTX_use_certificate_ASN1_d)(SSL_CTX *ctx, int len, const unsigned char *d);
extern int (*SSL_CTX_use_certificate_chain_file_d)(SSL_CTX *ctx, const char *file);
extern int (*SSL_CTX_use_certificate_file_d)(SSL_CTX *ctx, const char *file, int type);
extern int (*SSL_CTX_use_psk_identity_hint_d)(SSL_CTX *ctx, const char *identity_hint);
extern int (*SSL_CTX_use_serverinfo_d)(SSL_CTX *ctx, const unsigned char *serverinfo, size_t serverinfo_length);
extern int (*SSL_CTX_use_serverinfo_file_d)(SSL_CTX *ctx, const char *file);
extern void (*SSL_SESSION_free_d)(SSL_SESSION *ses);
extern X509 *(*SSL_SESSION_get0_peer_d)(SSL_SESSION *s);
extern unsigned int (*SSL_SESSION_get_compress_id_d)(const SSL_SESSION *s);
extern void *(*SSL_SESSION_get_ex_data_d)(const SSL_SESSION *ss, int idx);
extern int (*SSL_SESSION_get_ex_new_index_d)(long argl, void *argp, CRYPTO_EX_new *new_func, CRYPTO_EX_dup *dup_func, CRYPTO_EX_free *free_func);
extern const unsigned char *(*SSL_SESSION_get_id_d)(const SSL_SESSION *s, unsigned int *len);
extern long (*SSL_SESSION_get_time_d)(const SSL_SESSION *s);
extern long (*SSL_SESSION_get_timeout_d)(const SSL_SESSION *s);
extern SSL_SESSION *(*SSL_SESSION_new_d)(void);
extern int (*SSL_SESSION_print_d)(BIO *fp, const SSL_SESSION *ses);
extern int (*SSL_SESSION_print_fp_d)(FILE *fp, const SSL_SESSION *ses);
extern int (*SSL_SESSION_set1_id_context_d)(SSL_SESSION *s, const unsigned char *sid_ctx, unsigned int sid_ctx_len);
extern int (*SSL_SESSION_set_ex_data_d)(SSL_SESSION *ss, int idx, void *data);
extern long (*SSL_SESSION_set_time_d)(SSL_SESSION *s, long t);
extern long (*SSL_SESSION_set_timeout_d)(SSL_SESSION *s, long t);
extern int (*SSL_SRP_CTX_free_d)(SSL *ctx);
extern int (*SSL_SRP_CTX_init_d)(SSL *s);
extern int (*SSL_accept_d)(SSL *ssl);
extern int (*SSL_add_client_CA_d)(SSL *ssl, X509 *x);
extern const char *(*SSL_alert_desc_string_d)(int value);
extern const char *(*SSL_alert_desc_string_long_d)(int value);
extern const char *(*SSL_alert_type_string_d)(int value);
extern const char *(*SSL_alert_type_string_long_d)(int value);
extern int (*SSL_cache_hit_d)(SSL *s);
extern void (*SSL_certs_clear_d)(SSL *s);
extern int (*SSL_check_private_key_d)(const SSL *ctx);
extern int (*SSL_clear_d)(SSL *s);
extern int (*SSL_connect_d)(SSL *ssl);
extern void (*SSL_copy_session_id_d)(SSL *to, const SSL *from);
extern long (*SSL_ctrl_d)(SSL *ssl, int cmd, long larg, void *parg);
extern int (*SSL_do_handshake_d)(SSL *s);
extern SSL *(*SSL_dup_d)(SSL *ssl);
extern int (*SSL_export_keying_material_d)(SSL *s, unsigned char *out, size_t olen, const char *label, size_t llen, const unsigned char *p, size_t plen, int use_context);
extern int (*SSL_extension_supported_d)(unsigned int ext_type);
extern void (*SSL_free_d)(SSL *ssl);
extern void (*SSL_get0_alpn_selected_d)(const SSL *ssl, const unsigned char **data, unsigned *len);
extern void (*SSL_get0_next_proto_negotiated_d)(const SSL *s, const unsigned char **data, unsigned *len);
extern X509_VERIFY_PARAM *(*SSL_get0_param_d)(SSL *ssl);
extern SSL_SESSION *(*SSL_get1_session_d)(SSL *ssl);
extern SSL_CTX *(*SSL_get_SSL_CTX_d)(const SSL *ssl);
extern X509 *(*SSL_get_certificate_d)(const SSL *ssl);
extern const char *(*SSL_get_cipher_list_d)(const SSL *s, int n);
extern struct stack_st_SSL_CIPHER *(*SSL_get_ciphers_d)(const SSL *s);
extern const SSL_CIPHER *(*SSL_get_current_cipher_d)(const SSL *s);
extern const COMP_METHOD *(*SSL_get_current_compression_d)(SSL *s);
extern const COMP_METHOD *(*SSL_get_current_expansion_d)(SSL *s);
extern long (*SSL_get_default_timeout_d)(const SSL *s);
extern int (*SSL_get_error_d)(const SSL *s, int ret_code);
extern void *(*SSL_get_ex_data_d)(const SSL *ssl, int idx);
extern int (*SSL_get_ex_data_X509_STORE_CTX_idx_d)(void);
extern int (*SSL_get_ex_new_index_d)(long argl, void *argp, CRYPTO_EX_new *new_func, CRYPTO_EX_dup *dup_func, CRYPTO_EX_free *free_func);
extern int (*SSL_get_fd_d)(const SSL *s);
extern size_t (*SSL_get_finished_d)(const SSL *s, void *buf, size_t count);
extern void (*(*SSL_get_info_callback_d)(const SSL *ssl)) (const SSL *ssl);
extern X509 *(*SSL_get_peer_certificate_d)(const SSL *s);
extern size_t (*SSL_get_peer_finished_d)(const SSL *s, void *buf, size_t count);
extern const char *(*SSL_get_psk_identity_d)(const SSL *s);
extern const char *(*SSL_get_psk_identity_hint_d)(const SSL *s);
extern int (*SSL_get_quiet_shutdown_d)(const SSL *ssl);
extern BIO *(*SSL_get_rbio_d)(const SSL *s);
extern int (*SSL_get_read_ahead_d)(const SSL *s);
extern int (*SSL_get_rfd_d)(const SSL *s);
extern SRTP_PROTECTION_PROFILE *(*SSL_get_selected_srtp_profile_d)(SSL *s);
extern const char *(*SSL_get_servername_d)(const SSL *s, const int type);
extern int (*SSL_get_servername_type_d)(const SSL *s);
extern SSL_SESSION *(*SSL_get_session_d)(const SSL *ssl);
extern char *(*SSL_get_shared_ciphers_d)(const SSL *s, char *buf, int len);
extern int (*SSL_get_shared_sigalgs_d)(SSL *s, int idx, int *psign, int *phash, int *psignandhash, unsigned char *rsig, unsigned char *rhash);
extern int (*SSL_get_shutdown_d)(const SSL *ssl);
extern int (*SSL_get_sigalgs_d)(SSL *s, int idx, int *psign, int *phash, int *psignandhash, unsigned char *rsig, unsigned char *rhash);
extern BIGNUM *(*SSL_get_srp_N_d)(SSL *s);
extern BIGNUM *(*SSL_get_srp_g_d)(SSL *s);
extern char *(*SSL_get_srp_userinfo_d)(SSL *s);
extern char *(*SSL_get_srp_username_d)(SSL *s);
extern struct stack_st_SRTP_PROTECTION_PROFILE *(*SSL_get_srtp_profiles_d)(SSL *ssl);
extern const SSL_METHOD *(*SSL_get_ssl_method_d)(SSL *s);
extern int (*(*SSL_get_verify_callback_d)(const SSL *s)) (const SSL *s);
extern int (*SSL_get_verify_depth_d)(const SSL *s);
extern int (*SSL_get_verify_mode_d)(const SSL *s);
extern long (*SSL_get_verify_result_d)(const SSL *ssl);
extern const char *(*SSL_get_version_d)(const SSL *s);
extern BIO *(*SSL_get_wbio_d)(const SSL *s);
extern int (*SSL_get_wfd_d)(const SSL *s);
extern int (*SSL_has_matching_session_id_d)(const SSL *ssl, const unsigned char *id, unsigned int id_len);
extern int (*SSL_is_server_d)(SSL *s);
extern int (*SSL_library_init_d)(void);
extern void (*SSL_load_error_strings_d)(void);
extern SSL *(*SSL_new_d)(SSL_CTX *ctx);
extern int (*SSL_peek_d)(SSL *ssl, void *buf, int num);
extern int (*SSL_pending_d)(const SSL *s);
extern int (*SSL_read_d)(SSL *ssl, void *buf, int num);
extern int (*SSL_renegotiate_d)(SSL *s);
extern int (*SSL_renegotiate_abbreviated_d)(SSL *s);
extern int (*SSL_renegotiate_pending_d)(SSL *s);
extern const char *(*SSL_rstate_string_d)(const SSL *s);
extern const char *(*SSL_rstate_string_long_d)(const SSL *s);
extern int (*SSL_select_next_proto_d)(unsigned char **out, unsigned char *outlen, const unsigned char *in, unsigned int inlen, const unsigned char *client, unsigned int client_len);
extern int (*SSL_set1_param_d)(SSL *ssl, X509_VERIFY_PARAM *vpm);
extern SSL_CTX *(*SSL_set_SSL_CTX_d)(SSL *ssl, SSL_CTX *ctx);
extern void (*SSL_set_accept_state_d)(SSL *s);
extern int (*SSL_set_alpn_protos_d)(SSL *ssl, const unsigned char *protos, unsigned protos_len);
extern void (*SSL_set_bio_d)(SSL *s, BIO *rbio, BIO *wbio);
extern int (*SSL_set_cipher_list_d)(SSL *s, const char *str);
extern void (*SSL_set_connect_state_d)(SSL *s);
extern void (*SSL_set_debug_d)(SSL *s, int debug);
extern int (*SSL_set_ex_data_d)(SSL *ssl, int idx, void *data);
extern int (*SSL_set_fd_d)(SSL *s, int fd);
extern int (*SSL_set_generate_session_id_d)(SSL *, GEN_SESSION_CB);
extern void (*SSL_set_info_callback_d)(SSL *ssl, void (*cb) (const SSL *ssl, int type, int val));
extern void (*SSL_set_msg_callback_d)(SSL *ssl, void (*cb) (int write_p, int version, int content_type, const void *buf, size_t len, SSL *ssl, void *arg));
extern void (*SSL_set_psk_client_callback_d)(SSL *ssl, unsigned int (*psk_client_callback) (SSL *ssl, const char *hint, char *identity, unsigned int max_identity_len, unsigned char *psk, unsigned int max_psk_len));
extern void (*SSL_set_psk_server_callback_d)(SSL *ssl, unsigned int (*psk_server_callback) (SSL *ssl, const char *identity, unsigned char *psk, unsigned int max_psk_len));
extern int (*SSL_set_purpose_d)(SSL *s, int purpose);
extern void (*SSL_set_quiet_shutdown_d)(SSL *ssl, int mode);
extern void (*SSL_set_read_ahead_d)(SSL *s, int yes);
extern int (*SSL_set_rfd_d)(SSL *s, int fd);
extern int (*SSL_set_session_d)(SSL *to, SSL_SESSION *session);
extern int (*SSL_set_session_id_context_d)(SSL *ssl, const unsigned char *sid_ctx, unsigned int sid_ctx_len);
extern int (*SSL_set_session_secret_cb_d)(SSL *s, tls_session_secret_cb_fn tls_session_secret_cb, void *arg);
extern int (*SSL_set_session_ticket_ext_d)(SSL *s, void *ext_data, int ext_len);
extern int (*SSL_set_session_ticket_ext_cb_d)(SSL *s, tls_session_ticket_ext_cb_fn cb, void *arg);
extern void (*SSL_set_shutdown_d)(SSL *ssl, int mode);
extern int (*SSL_set_srp_server_param_d)(SSL *s, const BIGNUM *N, const BIGNUM *g, BIGNUM *sa, BIGNUM *v, char *info);
extern int (*SSL_set_srp_server_param_pw_d)(SSL *s, const char *user, const char *pass, const char *grp);
extern int (*SSL_set_ssl_method_d)(SSL *s, const SSL_METHOD *method);
extern void (*SSL_set_state_d)(SSL *ssl, int state);
extern int (*SSL_set_tlsext_use_srtp_d)(SSL *ctx, const char *profiles);
extern void (*SSL_set_tmp_dh_callback_d)(SSL *ssl, DH *(*dh) (SSL *ssl, int is_export, int keylength));
extern void (*SSL_set_tmp_ecdh_callback_d)(SSL *ssl, EC_KEY *(*ecdh) (SSL *ssl, int is_export, int keylength));
extern void (*SSL_set_tmp_rsa_callback_d)(SSL *ssl, RSA *(*cb) (SSL *ssl, int is_export, int keylength));
extern int (*SSL_set_trust_d)(SSL *s, int trust);
extern void (*SSL_set_verify_d)(SSL *s, int mode, int (*callback) (int ok, X509_STORE_CTX *ctx));
extern void (*SSL_set_verify_depth_d)(SSL *s, int depth);
extern void (*SSL_set_verify_result_d)(SSL *ssl, long v);
extern int (*SSL_set_wfd_d)(SSL *s, int fd);
extern int (*SSL_shutdown_d)(SSL *s);
extern int (*SSL_srp_server_param_with_username_d)(SSL *s, int *ad);
extern int (*SSL_state_d)(const SSL *ssl);
extern const char *(*SSL_state_string_d)(const SSL *s);
extern const char *(*SSL_state_string_long_d)(const SSL *s);
extern const struct openssl_ssl_test_functions *(*SSL_test_functions_d)(void);
extern void (*SSL_trace_d)(int write_p, int version, int content_type, const void *buf, size_t len, SSL *ssl, void *arg);
extern int (*SSL_use_PrivateKey_d)(SSL *ssl, EVP_PKEY *pkey);
extern int (*SSL_use_PrivateKey_ASN1_d)(int pk, SSL *ssl, const unsigned char *d, long len);
extern int (*SSL_use_PrivateKey_file_d)(SSL *ssl, const char *file, int type);
extern int (*SSL_use_RSAPrivateKey_d)(SSL *ssl, RSA *rsa);
extern int (*SSL_use_RSAPrivateKey_ASN1_d)(SSL *ssl, unsigned char *d, long len);
extern int (*SSL_use_RSAPrivateKey_file_d)(SSL *ssl, const char *file, int type);
extern int (*SSL_use_certificate_d)(SSL *ssl, X509 *x);
extern int (*SSL_use_certificate_ASN1_d)(SSL *ssl, const unsigned char *d, int len);
extern int (*SSL_use_certificate_file_d)(SSL *ssl, const char *file, int type);
extern int (*SSL_use_psk_identity_hint_d)(SSL *s, const char *identity_hint);
extern int (*SSL_version_d)(const SSL *ssl);
extern int (*SSL_want_d)(const SSL *s);
extern int (*SSL_write_d)(SSL *ssl, const void *buf, int num);
extern unsigned long (*SSLeay_d)(void);
extern const char *(*SSLeay_version_d)(int type);
extern const SSL_METHOD *(*SSLv23_client_method_d)(void);
extern const SSL_METHOD *(*SSLv23_method_d)(void);
extern const SSL_METHOD *(*SSLv23_server_method_d)(void);
extern const SSL_METHOD *(*SSLv2_client_method_d)(void);
extern const SSL_METHOD *(*SSLv2_method_d)(void);
extern const SSL_METHOD *(*SSLv2_server_method_d)(void);
extern const SSL_METHOD *(*SSLv3_client_method_d)(void);
extern const SSL_METHOD *(*SSLv3_method_d)(void);
extern const SSL_METHOD *(*SSLv3_server_method_d)(void);
struct stack_st_X509 *(*lookup_certs_d) (X509_STORE_CTX *ctx, X509_NAME *nm);
struct stack_st_X509 *(*lookup_certs_d) (X509_STORE_CTX *ctx, X509_NAME *nm);
struct stack_st_509_CRL *(*lookup_crls_d) (X509_STORE_CTX *ctx, X509_NAME *nm);
struct stack_st_509_CRL *(*lookup_crls_d) (X509_STORE_CTX *ctx, X509_NAME *nm);
extern int (*SXNET_add_id_INTEGER_d)(SXNET **psx, ASN1_INTEGER *izone, char *user, int userlen);
extern int (*SXNET_add_id_asc_d)(SXNET **psx, char *zone, char *user, int userlen);
extern int (*SXNET_add_id_ulong_d)(SXNET **psx, unsigned long lzone, char *user, int userlen);
extern ASN1_OCTET_STRING *(*SXNET_get_id_INTEGER_d)(SXNET *sx, ASN1_INTEGER *zone);
extern ASN1_OCTET_STRING *(*SXNET_get_id_asc_d)(SXNET *sx, char *zone);
extern ASN1_OCTET_STRING *(*SXNET_get_id_ulong_d)(SXNET *sx, unsigned long lzone);
extern const SSL_METHOD *(*TLSv1_1_client_method_d)(void);
extern const SSL_METHOD *(*TLSv1_1_method_d)(void);
extern const SSL_METHOD *(*TLSv1_1_server_method_d)(void);
extern const SSL_METHOD *(*TLSv1_2_client_method_d)(void);
extern const SSL_METHOD *(*TLSv1_2_method_d)(void);
extern const SSL_METHOD *(*TLSv1_2_server_method_d)(void);
extern const SSL_METHOD *(*TLSv1_client_method_d)(void);
extern const SSL_METHOD *(*TLSv1_method_d)(void);
extern const SSL_METHOD *(*TLSv1_server_method_d)(void);

extern UI_METHOD *(*UI_OpenSSL_d)(void);
extern int (*UI_UTIL_read_pw_d)(char *buf, char *buff, int size, const char *prompt, int verify);
extern int (*UI_UTIL_read_pw_string_d)(char *buf, int length, const char *prompt, int verify);
extern int (*UI_add_error_string_d)(UI *ui, const char *text);
extern int (*UI_add_info_string_d)(UI *ui, const char *text);
extern int (*UI_add_input_boolean_d)(UI *ui, const char *prompt, const char *action_desc, const char *ok_chars, const char *cancel_chars, int flags, char *result_buf);
extern int (*UI_add_input_string_d)(UI *ui, const char *prompt, int flags, char *result_buf, int minsize, int maxsize);
extern void *(*UI_add_user_data_d)(UI *ui, void *user_data);
extern int (*UI_add_verify_string_d)(UI *ui, const char *prompt, int flags, char *result_buf, int minsize, int maxsize, const char *test_buf);
extern char *(*UI_construct_prompt_d)(UI *ui_method, const char *object_desc, const char *object_name);
extern UI_METHOD *(*UI_create_method_d)(char *name);
extern void (*UI_destroy_method_d)(UI_METHOD *ui_method);
extern int (*UI_dup_error_string_d)(UI *ui, const char *text);
extern int (*UI_dup_info_string_d)(UI *ui, const char *text);
extern int (*UI_dup_input_boolean_d)(UI *ui, const char *prompt, const char *action_desc, const char *ok_chars, const char *cancel_chars, int flags, char *result_buf);
extern int (*UI_dup_input_string_d)(UI *ui, const char *prompt, int flags, char *result_buf, int minsize, int maxsize);
extern int (*UI_dup_verify_string_d)(UI *ui, const char *prompt, int flags, char *result_buf, int minsize, int maxsize, const char *test_buf);
extern void (*UI_free_d)(UI *ui);
extern const char *(*UI_get0_action_string_d)(UI_STRING *uis);
extern const char *(*UI_get0_output_string_d)(UI_STRING *uis);
extern const char *(*UI_get0_result_d)(UI *ui, int i);
extern const char *(*UI_get0_result_string_d)(UI_STRING *uis);
extern const char *(*UI_get0_test_string_d)(UI_STRING *uis);
extern void *(*UI_get0_user_data_d)(UI *ui);
extern const UI_METHOD *(*UI_get_default_method_d)(void);
extern void *(*UI_get_ex_data_d)(UI *r, int idx);
extern int (*UI_get_ex_new_index_d)(long argl, void *argp, CRYPTO_EX_new *new_func, CRYPTO_EX_dup *dup_func, CRYPTO_EX_free *free_func);
extern int (*UI_get_input_flags_d)(UI_STRING *uis);
extern const UI_METHOD *(*UI_get_method_d)(UI *ui);
extern int (*UI_get_result_maxsize_d)(UI_STRING *uis);
extern int (*UI_get_result_minsize_d)(UI_STRING *uis);
extern enum UI_string_types (*UI_get_string_type_d)(UI_STRING *uis);
extern int (*(*UI_method_get_closer_d)(UI_METHOD *method)) (UI_METHOD *method);
extern int (*(*UI_method_get_flusher_d)(UI_METHOD *method)) (UI_METHOD *method);
extern int (*(*UI_method_get_opener_d)(UI_METHOD *method)) (UI_METHOD *method);
extern char *(*(*UI_method_get_prompt_constructor_d)(UI_METHOD *method)) (UI_METHOD *method);
extern int (*(*UI_method_get_reader_d)(UI_METHOD *method)) (UI_METHOD *method);
extern int (*(*UI_method_get_writer_d)(UI_METHOD *method)) (UI_METHOD *method);

extern int (*UI_method_set_prompt_constructor_d)(UI_METHOD *method, char *(*prompt_constructor) (UI *ui, const char *object_desc, const char *object_name));
extern int (*UI_method_set_reader_d)(UI_METHOD *method, int (*reader) (UI *ui, UI_STRING *uis));
extern int (*UI_method_set_writer_d)(UI_METHOD *method, int (*writer) (UI *ui, UI_STRING *uis));
extern UI *(*UI_new_d)(void);
extern UI *(*UI_new_method_d)(const UI_METHOD *method);
extern int (*UI_process_d)(UI *ui);
extern void (*UI_set_default_method_d)(const UI_METHOD *meth);
extern int (*UI_set_ex_data_d)(UI *r, int idx, void *arg);
extern const UI_METHOD *(*UI_set_method_d)(UI *ui, const UI_METHOD *meth);
extern int (*UI_set_result_d)(UI *ui, UI_STRING *uis, const char *result);
extern int (*UTF8_getc_d)(const unsigned char *str, int len, unsigned long *val);
extern int (*UTF8_putc_d)(unsigned char *str, int len, unsigned long value);
extern unsigned char *(*WHIRLPOOL_d)(const void *inp, size_t bytes, unsigned char *md);

extern int (*X509V3_EXT_CRL_add_nconf_d)(CONF *conf, X509V3_CTX *ctx, char *section, X509_CRL *crl);
extern int (*X509V3_EXT_REQ_add_nconf_d)(CONF *conf, X509V3_CTX *ctx, char *section, X509_REQ *req);
extern int (*X509V3_EXT_add_d)(X509V3_EXT_METHOD *ext);
extern int (*X509V3_EXT_add_alias_d)(int nid_to, int nid_from);
extern int (*X509V3_EXT_add_list_d)(X509V3_EXT_METHOD *extlist);
extern int (*X509V3_EXT_add_nconf_d)(CONF *conf, X509V3_CTX *ctx, char *section, X509 *cert);
extern void (*X509V3_EXT_cleanup_d)(void);
extern void *(*X509V3_EXT_d2i_d)(X509_EXTENSION *ext);
extern int (*X509V3_EXT_free_d)(int nid, void *ext_data);
extern const X509V3_EXT_METHOD *(*X509V3_EXT_get_d)(X509_EXTENSION *ext);
extern const X509V3_EXT_METHOD *(*X509V3_EXT_get_nid_d)(int nid);
extern X509_EXTENSION *(*X509V3_EXT_i2d_d)(int ext_nid, int crit, void *ext_struc);
extern X509_EXTENSION *(*X509V3_EXT_nconf_d)(CONF *conf, X509V3_CTX *ctx, char *name, char *value);
extern X509_EXTENSION *(*X509V3_EXT_nconf_nid_d)(CONF *conf, X509V3_CTX *ctx, int ext_nid, char *value);
extern int (*X509V3_EXT_print_d)(BIO *out, X509_EXTENSION *ext, unsigned long flag, int indent);
extern int (*X509V3_EXT_print_fp_d)(FILE *out, X509_EXTENSION *ext, int flag, int indent);
extern void (*X509V3_EXT_val_prn_d)(BIO *out, struct stack_st_CONF_VALUE *val, int indent, int ml);
extern int (*X509V3_NAME_from_section_d)(X509_NAME *nm, struct stack_st_CONF_VALUE *dn_sk, unsigned long chtype);
extern int (*X509V3_add_standard_extensions_d)(void);
extern int (*X509V3_add_value_d)(const char *name, const char *value, struct stack_st_CONF_VALUE **extlist);
extern int (*X509V3_add_value_bool_d)(const char *name, int asn1_bool, struct stack_st_CONF_VALUE **extlist);
extern int (*X509V3_add_value_bool_nf_d)(char *name, int asn1_bool, struct stack_st_CONF_VALUE **extlist);
extern int (*X509V3_add_value_int_d)(const char *name, ASN1_INTEGER *aint, struct stack_st_CONF_VALUE **extlist);
extern int (*X509V3_add_value_uchar_d)(const char *name, const unsigned char *value, struct stack_st_CONF_VALUE **extlist);
extern void (*X509V3_conf_free_d)(CONF_VALUE *val);
extern struct stack_st_CONF_VALUE *(*X509V3_get_section_d)(X509V3_CTX *ctx, char *section);
extern char *(*X509V3_get_string_d)(X509V3_CTX *ctx, char *name, char *section);
extern int (*X509V3_get_value_bool_d)(CONF_VALUE *value, int *asn1_bool);
extern int (*X509V3_get_value_int_d)(CONF_VALUE *value, ASN1_INTEGER **aint);
extern struct stack_st_CONF_VALUE *(*X509V3_parse_list_d)(const char *line);
extern void (*X509V3_section_free_d)(X509V3_CTX *ctx, struct stack_st_CONF_VALUE *section);
extern void (*X509V3_set_ctx_d)(X509V3_CTX *ctx, X509 *issuer, X509 *subject, X509_REQ *req, X509_CRL *crl, int flags);
extern void (*X509V3_set_nconf_d)(X509V3_CTX *ctx, CONF *conf);
extern void (*X509V3_string_free_d)(X509V3_CTX *ctx, char *str);
extern int (*X509_ALGOR_cmp_d)(const X509_ALGOR *a, const X509_ALGOR *b);
extern X509_ALGOR *(*X509_ALGOR_dup_d)(X509_ALGOR *xn);
extern void (*X509_ALGOR_get0_d)(ASN1_OBJECT **paobj, int *pptype, void **ppval, X509_ALGOR *algor);
extern int (*X509_ALGOR_set0_d)(X509_ALGOR *alg, ASN1_OBJECT *aobj, int ptype, void *pval);
extern void (*X509_ALGOR_set_md_d)(X509_ALGOR *alg, const EVP_MD *md);
extern int (*X509_ATTRIBUTE_count_d)(X509_ATTRIBUTE *attr);
extern X509_ATTRIBUTE *(*X509_ATTRIBUTE_create_d)(int nid, int atrtype, void *value);
extern X509_ATTRIBUTE *(*X509_ATTRIBUTE_create_by_NID_d)(X509_ATTRIBUTE **attr, int nid, int atrtype, const void *data, int len);
extern X509_ATTRIBUTE *(*X509_ATTRIBUTE_create_by_OBJ_d)(X509_ATTRIBUTE **attr, const ASN1_OBJECT *obj, int atrtype, const void *data, int len);
extern X509_ATTRIBUTE *(*X509_ATTRIBUTE_create_by_txt_d)(X509_ATTRIBUTE **attr, const char *atrname, int type, const unsigned char *bytes, int len);
extern X509_ATTRIBUTE *(*X509_ATTRIBUTE_dup_d)(X509_ATTRIBUTE *xa);
extern void *(*X509_ATTRIBUTE_get0_data_d)(X509_ATTRIBUTE *attr, int idx, int atrtype, void *data);
extern ASN1_OBJECT *(*X509_ATTRIBUTE_get0_object_d)(X509_ATTRIBUTE *attr);
extern ASN1_TYPE *(*X509_ATTRIBUTE_get0_type_d)(X509_ATTRIBUTE *attr, int idx);
extern int (*X509_ATTRIBUTE_set1_data_d)(X509_ATTRIBUTE *attr, int attrtype, const void *data, int len);
extern int (*X509_ATTRIBUTE_set1_object_d)(X509_ATTRIBUTE *attr, const ASN1_OBJECT *obj);
extern int (*X509_CERT_AUX_print_d)(BIO *bp, X509_CERT_AUX *x, int indent);
extern void (*X509_CRL_METHOD_free_d)(X509_CRL_METHOD *m);
extern int (*X509_CRL_add0_revoked_d)(X509_CRL *crl, X509_REVOKED *rev);
extern int (*X509_CRL_add1_ext_i2d_d)(X509_CRL *x, int nid, void *value, int crit, unsigned long flags);
extern int (*X509_CRL_add_ext_d)(X509_CRL *x, X509_EXTENSION *ex, int loc);
extern int (*X509_CRL_check_suiteb_d)(X509_CRL *crl, EVP_PKEY *pk, unsigned long flags);
extern int (*X509_CRL_cmp_d)(const X509_CRL *a, const X509_CRL *b);
extern X509_EXTENSION *(*X509_CRL_delete_ext_d)(X509_CRL *x, int loc);
extern X509_CRL *(*X509_CRL_diff_d)(X509_CRL *base, X509_CRL *newer, EVP_PKEY *skey, const EVP_MD *md, unsigned int flags);
extern int (*X509_CRL_digest_d)(const X509_CRL *data, const EVP_MD *type, unsigned char *md, unsigned int *len);
extern X509_CRL *(*X509_CRL_dup_d)(X509_CRL *crl);
extern int (*X509_CRL_get0_by_cert_d)(X509_CRL *crl, X509_REVOKED **ret, X509 *x);
extern int (*X509_CRL_get0_by_serial_d)(X509_CRL *crl, X509_REVOKED **ret, ASN1_INTEGER *serial);
extern X509_EXTENSION *(*X509_CRL_get_ext_d)(X509_CRL *x, int loc);
extern int (*X509_CRL_get_ext_by_NID_d)(X509_CRL *x, int nid, int lastpos);
extern int (*X509_CRL_get_ext_by_OBJ_d)(X509_CRL *x, ASN1_OBJECT *obj, int lastpos);
extern int (*X509_CRL_get_ext_by_critical_d)(X509_CRL *x, int crit, int lastpos);
extern int (*X509_CRL_get_ext_count_d)(X509_CRL *x);
extern void *(*X509_CRL_get_ext_d2i_d)(X509_CRL *x, int nid, int *crit, int *idx);
extern void *(*X509_CRL_get_meth_data_d)(X509_CRL *crl);
extern int (*X509_CRL_http_nbio_d)(OCSP_REQ_CTX *rctx, X509_CRL **pcrl);
extern int (*X509_CRL_match_d)(const X509_CRL *a, const X509_CRL *b);
extern int (*X509_CRL_print_d)(BIO *bp, X509_CRL *x);
extern int (*X509_CRL_print_fp_d)(FILE *bp, X509_CRL *x);
extern void (*X509_CRL_set_default_method_d)(const X509_CRL_METHOD *meth);
extern int (*X509_CRL_set_issuer_name_d)(X509_CRL *x, X509_NAME *name);
extern int (*X509_CRL_set_lastUpdate_d)(X509_CRL *x, const ASN1_TIME *tm);
extern void (*X509_CRL_set_meth_data_d)(X509_CRL *crl, void *dat);
extern int (*X509_CRL_set_nextUpdate_d)(X509_CRL *x, const ASN1_TIME *tm);
extern int (*X509_CRL_set_version_d)(X509_CRL *x, long version);
extern int (*X509_CRL_sign_d)(X509_CRL *x, EVP_PKEY *pkey, const EVP_MD *md);
extern int (*X509_CRL_sign_ctx_d)(X509_CRL *x, EVP_MD_CTX *ctx);
extern int (*X509_CRL_sort_d)(X509_CRL *crl);
extern int (*X509_CRL_verify_d)(X509_CRL *a, EVP_PKEY *r);
extern X509_EXTENSION *(*X509_EXTENSION_create_by_NID_d)(X509_EXTENSION **ex, int nid, int crit, ASN1_OCTET_STRING *data);
extern X509_EXTENSION *(*X509_EXTENSION_create_by_OBJ_d)(X509_EXTENSION **ex, ASN1_OBJECT *obj, int crit, ASN1_OCTET_STRING *data);
extern X509_EXTENSION *(*X509_EXTENSION_dup_d)(X509_EXTENSION *ex);
extern int (*X509_EXTENSION_get_critical_d)(X509_EXTENSION *ex);
extern ASN1_OCTET_STRING *(*X509_EXTENSION_get_data_d)(X509_EXTENSION *ne);
extern ASN1_OBJECT *(*X509_EXTENSION_get_object_d)(X509_EXTENSION *ex);
extern int (*X509_EXTENSION_set_critical_d)(X509_EXTENSION *ex, int crit);
extern int (*X509_EXTENSION_set_data_d)(X509_EXTENSION *ex, ASN1_OCTET_STRING *data);
extern int (*X509_EXTENSION_set_object_d)(X509_EXTENSION *ex, ASN1_OBJECT *obj);
extern void (*X509_INFO_free_d)(X509_INFO *a);
extern X509_INFO *(*X509_INFO_new_d)(void);
extern int (*X509_LOOKUP_by_alias_d)(X509_LOOKUP *ctx, int type, char *str, int len, X509_OBJECT *ret);
extern int (*X509_LOOKUP_by_fingerprint_d)(X509_LOOKUP *ctx, int type, unsigned char *bytes, int len, X509_OBJECT *ret);
extern int (*X509_LOOKUP_by_issuer_serial_d)(X509_LOOKUP *ctx, int type, X509_NAME *name, ASN1_INTEGER *serial, X509_OBJECT *ret);
extern int (*X509_LOOKUP_by_subject_d)(X509_LOOKUP *ctx, int type, X509_NAME *name, X509_OBJECT *ret);
extern int (*X509_LOOKUP_ctrl_d)(X509_LOOKUP *ctx, int cmd, const char *argc, long argl, char **ret);
extern X509_LOOKUP_METHOD *(*X509_LOOKUP_file_d)(void);
extern void (*X509_LOOKUP_free_d)(X509_LOOKUP *ctx);
extern X509_LOOKUP_METHOD *(*X509_LOOKUP_hash_dir_d)(void);
extern int (*X509_LOOKUP_init_d)(X509_LOOKUP *ctx);
extern X509_LOOKUP *(*X509_LOOKUP_new_d)(X509_LOOKUP_METHOD *method);
extern int (*X509_LOOKUP_shutdown_d)(X509_LOOKUP *ctx);
extern X509_NAME_ENTRY *(*X509_NAME_ENTRY_create_by_NID_d)(X509_NAME_ENTRY **ne, int nid, int type, unsigned char *bytes, int len);
extern X509_NAME_ENTRY *(*X509_NAME_ENTRY_create_by_OBJ_d)(X509_NAME_ENTRY **ne, ASN1_OBJECT *obj, int type, const unsigned char *bytes, int len);
extern X509_NAME_ENTRY *(*X509_NAME_ENTRY_create_by_txt_d)(X509_NAME_ENTRY **ne, const char *field, int type, const unsigned char *bytes, int len);
extern X509_NAME_ENTRY *(*X509_NAME_ENTRY_dup_d)(X509_NAME_ENTRY *ne);
extern ASN1_STRING *(*X509_NAME_ENTRY_get_data_d)(X509_NAME_ENTRY *ne);
extern ASN1_OBJECT *(*X509_NAME_ENTRY_get_object_d)(X509_NAME_ENTRY *ne);
extern int (*X509_NAME_ENTRY_set_data_d)(X509_NAME_ENTRY *ne, int type, const unsigned char *bytes, int len);
extern int (*X509_NAME_ENTRY_set_object_d)(X509_NAME_ENTRY *ne, ASN1_OBJECT *obj);
extern int (*X509_NAME_add_entry_d)(X509_NAME *name, X509_NAME_ENTRY *ne, int loc, int set);
extern int (*X509_NAME_add_entry_by_NID_d)(X509_NAME *name, int nid, int type, unsigned char *bytes, int len, int loc, int set);
extern int (*X509_NAME_add_entry_by_OBJ_d)(X509_NAME *name, ASN1_OBJECT *obj, int type, unsigned char *bytes, int len, int loc, int set);
extern int (*X509_NAME_add_entry_by_txt_d)(X509_NAME *name, const char *field, int type, const unsigned char *bytes, int len, int loc, int set);
extern int (*X509_NAME_cmp_d)(const X509_NAME *a, const X509_NAME *b);
extern X509_NAME_ENTRY *(*X509_NAME_delete_entry_d)(X509_NAME *name, int loc);
extern int (*X509_NAME_digest_d)(const X509_NAME *data, const EVP_MD *type, unsigned char *md, unsigned int *len);
extern X509_NAME *(*X509_NAME_dup_d)(X509_NAME *xn);
extern int (*X509_NAME_entry_count_d)(X509_NAME *name);
extern X509_NAME_ENTRY *(*X509_NAME_get_entry_d)(X509_NAME *name, int loc);
extern int (*X509_NAME_get_index_by_NID_d)(X509_NAME *name, int nid, int lastpos);
extern int (*X509_NAME_get_index_by_OBJ_d)(X509_NAME *name, ASN1_OBJECT *obj, int lastpos);
extern int (*X509_NAME_get_text_by_NID_d)(X509_NAME *name, int nid, char *buf, int len);
extern int (*X509_NAME_get_text_by_OBJ_d)(X509_NAME *name, ASN1_OBJECT *obj, char *buf, int len);
extern unsigned long (*X509_NAME_hash_d)(X509_NAME *x);
extern unsigned long (*X509_NAME_hash_old_d)(X509_NAME *x);
extern char *(*X509_NAME_oneline_d)(X509_NAME *a, char *buf, int size);
extern int (*X509_NAME_print_d)(BIO *bp, X509_NAME *name, int obase);
extern int (*X509_NAME_print_ex_d)(BIO *out, X509_NAME *nm, int indent, unsigned long flags);
extern int (*X509_NAME_print_ex_fp_d)(FILE *fp, X509_NAME *nm, int indent, unsigned long flags);
extern int (*X509_NAME_set_d)(X509_NAME **xn, X509_NAME *name);
extern void (*X509_OBJECT_free_contents_d)(X509_OBJECT *a);
extern void (*X509_OBJECT_up_ref_count_d)(X509_OBJECT *a);
extern void (*X509_PKEY_free_d)(X509_PKEY *a);
extern X509_PKEY *(*X509_PKEY_new_d)(void);
extern void (*X509_POLICY_NODE_print_d)(BIO *out, X509_POLICY_NODE *node, int indent);
extern EVP_PKEY *(*X509_PUBKEY_get_d)(X509_PUBKEY *key);
extern int (*X509_PUBKEY_get0_param_d)(ASN1_OBJECT **ppkalg, const unsigned char **pk, int *ppklen, X509_ALGOR **pa, X509_PUBKEY *pub);
extern int (*X509_PUBKEY_set_d)(X509_PUBKEY **x, EVP_PKEY *pkey);
extern int (*X509_PUBKEY_set0_param_d)(X509_PUBKEY *pub, ASN1_OBJECT *aobj, int ptype, void *pval, unsigned char *penc, int penclen);
extern int (*X509_PURPOSE_add_d)(int id, int trust, int flags, int (*ck) (const X509_PURPOSE *, const X509 *, int), char *name, char *sname, void *arg);
extern void (*X509_PURPOSE_cleanup_d)(void);
extern X509_PURPOSE *(*X509_PURPOSE_get0_d)(int idx);
extern char *(*X509_PURPOSE_get0_name_d)(X509_PURPOSE *xp);
extern char *(*X509_PURPOSE_get0_sname_d)(X509_PURPOSE *xp);
extern int (*X509_PURPOSE_get_by_id_d)(int id);
extern int (*X509_PURPOSE_get_by_sname_d)(char *sname);
extern int (*X509_PURPOSE_get_count_d)(void);
extern int (*X509_PURPOSE_get_id_d)(X509_PURPOSE *);
extern int (*X509_PURPOSE_get_trust_d)(X509_PURPOSE *xp);
extern int (*X509_PURPOSE_set_d)(int *p, int purpose);
extern int (*X509_REQ_add1_attr_d)(X509_REQ *req, X509_ATTRIBUTE *attr);
extern int (*X509_REQ_add1_attr_by_NID_d)(X509_REQ *req, int nid, int type, const unsigned char *bytes, int len);
extern int (*X509_REQ_add1_attr_by_OBJ_d)(X509_REQ *req, const ASN1_OBJECT *obj, int type, const unsigned char *bytes, int len);
extern int (*X509_REQ_add1_attr_by_txt_d)(X509_REQ *req, const char *attrname, int type, const unsigned char *bytes, int len);

extern int (*X509_REQ_check_private_key_d)(X509_REQ *x509, EVP_PKEY *pkey);
extern X509_ATTRIBUTE *(*X509_REQ_delete_attr_d)(X509_REQ *req, int loc);
extern int (*X509_REQ_digest_d)(const X509_REQ *data, const EVP_MD *type, unsigned char *md, unsigned int *len);
extern X509_REQ *(*X509_REQ_dup_d)(X509_REQ *req);
extern int (*X509_REQ_extension_nid_d)(int nid);
extern struct stack_st_OPENSSL_STRING *(*X509_REQ_get1_email_d)(X509_REQ *x);
extern X509_ATTRIBUTE *(*X509_REQ_get_attr_d)(const X509_REQ *req, int loc);
extern int (*X509_REQ_get_attr_by_NID_d)(const X509_REQ *req, int nid, int lastpos);
extern int (*X509_REQ_get_attr_by_OBJ_d)(const X509_REQ *req, ASN1_OBJECT *obj, int lastpos);
extern int (*X509_REQ_get_attr_count_d)(const X509_REQ *req);
extern int *(*X509_REQ_get_extension_nids_d)(void);
extern EVP_PKEY *(*X509_REQ_get_pubkey_d)(X509_REQ *req);
extern int (*X509_REQ_print_d)(BIO *bp, X509_REQ *req);
extern int (*X509_REQ_print_ex_d)(BIO *bp, X509_REQ *x, unsigned long nmflag, unsigned long cflag);
extern int (*X509_REQ_print_fp_d)(FILE *bp, X509_REQ *req);
extern void (*X509_REQ_set_extension_nids_d)(int *nids);
extern int (*X509_REQ_set_pubkey_d)(X509_REQ *x, EVP_PKEY *pkey);
extern int (*X509_REQ_set_subject_name_d)(X509_REQ *req, X509_NAME *name);
extern int (*X509_REQ_set_version_d)(X509_REQ *x, long version);
extern int (*X509_REQ_sign_d)(X509_REQ *x, EVP_PKEY *pkey, const EVP_MD *md);
extern int (*X509_REQ_sign_ctx_d)(X509_REQ *x, EVP_MD_CTX *ctx);
extern X509 *(*X509_REQ_to_X509_d)(X509_REQ *r, int days, EVP_PKEY *pkey);
extern int (*X509_REQ_verify_d)(X509_REQ *a, EVP_PKEY *r);
extern int (*X509_REVOKED_add1_ext_i2d_d)(X509_REVOKED *x, int nid, void *value, int crit, unsigned long flags);
extern int (*X509_REVOKED_add_ext_d)(X509_REVOKED *x, X509_EXTENSION *ex, int loc);
extern X509_EXTENSION *(*X509_REVOKED_delete_ext_d)(X509_REVOKED *x, int loc);
extern X509_REVOKED *(*X509_REVOKED_dup_d)(X509_REVOKED *rev);
extern X509_EXTENSION *(*X509_REVOKED_get_ext_d)(X509_REVOKED *x, int loc);
extern int (*X509_REVOKED_get_ext_by_NID_d)(X509_REVOKED *x, int nid, int lastpos);
extern int (*X509_REVOKED_get_ext_by_OBJ_d)(X509_REVOKED *x, ASN1_OBJECT *obj, int lastpos);
extern int (*X509_REVOKED_get_ext_by_critical_d)(X509_REVOKED *x, int crit, int lastpos);
extern int (*X509_REVOKED_get_ext_count_d)(X509_REVOKED *x);
extern void *(*X509_REVOKED_get_ext_d2i_d)(X509_REVOKED *x, int nid, int *crit, int *idx);
extern int (*X509_REVOKED_set_revocationDate_d)(X509_REVOKED *r, ASN1_TIME *tm);
extern int (*X509_REVOKED_set_serialNumber_d)(X509_REVOKED *x, ASN1_INTEGER *serial);
extern void (*X509_STORE_CTX_cleanup_d)(X509_STORE_CTX *ctx);
extern void (*X509_STORE_CTX_free_d)(X509_STORE_CTX *ctx);
extern X509_CRL *(*X509_STORE_CTX_get0_current_crl_d)(X509_STORE_CTX *ctx);
extern X509 *(*X509_STORE_CTX_get0_current_issuer_d)(X509_STORE_CTX *ctx);
extern X509_VERIFY_PARAM *(*X509_STORE_CTX_get0_param_d)(X509_STORE_CTX *ctx);
extern X509_STORE_CTX *(*X509_STORE_CTX_get0_parent_ctx_d)(X509_STORE_CTX *ctx);
extern X509_POLICY_TREE *(*X509_STORE_CTX_get0_policy_tree_d)(X509_STORE_CTX *ctx);
extern X509_STORE *(*X509_STORE_CTX_get0_store_d)(X509_STORE_CTX *ctx);
extern int (*X509_STORE_CTX_get1_issuer_d)(X509 **issuer, X509_STORE_CTX *ctx, X509 *x);
extern X509 *(*X509_STORE_CTX_get_current_cert_d)(X509_STORE_CTX *ctx);
extern int (*X509_STORE_CTX_get_error_d)(X509_STORE_CTX *ctx);
extern int (*X509_STORE_CTX_get_error_depth_d)(X509_STORE_CTX *ctx);
extern void *(*X509_STORE_CTX_get_ex_data_d)(X509_STORE_CTX *ctx, int idx);
extern int (*X509_STORE_CTX_get_ex_new_index_d)(long argl, void *argp, CRYPTO_EX_new *new_func, CRYPTO_EX_dup *dup_func, CRYPTO_EX_free *free_func);
extern int (*X509_STORE_CTX_get_explicit_policy_d)(X509_STORE_CTX *ctx);
extern int (*X509_STORE_CTX_init_d)(X509_STORE_CTX *ctx, X509_STORE *store, X509 *x509,struct stack_st_X509 *chain);
extern X509_STORE_CTX *(*X509_STORE_CTX_new_d)(void);
extern int (*X509_STORE_CTX_purpose_inherit_d)(X509_STORE_CTX *ctx, int def_purpose, int purpose, int trust);
extern void (*X509_STORE_CTX_set0_param_d)(X509_STORE_CTX *ctx, X509_VERIFY_PARAM *param);
extern void (*X509_STORE_CTX_set_cert_d)(X509_STORE_CTX *c, X509 *x);
extern int (*X509_STORE_CTX_set_default_d)(X509_STORE_CTX *ctx, const char *name);
extern void (*X509_STORE_CTX_set_depth_d)(X509_STORE_CTX *ctx, int depth);
extern void (*X509_STORE_CTX_set_error_d)(X509_STORE_CTX *ctx, int s);
extern int (*X509_STORE_CTX_set_ex_data_d)(X509_STORE_CTX *ctx, int idx, void *data);
extern void (*X509_STORE_CTX_set_flags_d)(X509_STORE_CTX *ctx, unsigned long flags);
extern int (*X509_STORE_CTX_set_purpose_d)(X509_STORE_CTX *ctx, int purpose);
extern void (*X509_STORE_CTX_set_time_d)(X509_STORE_CTX *ctx, unsigned long flags, time_t t);
extern int (*X509_STORE_CTX_set_trust_d)(X509_STORE_CTX *ctx, int trust);
extern void (*X509_STORE_CTX_set_verify_cb_d)(X509_STORE_CTX *ctx, int (*verify_cb) (int, X509_STORE_CTX *));
extern int (*X509_STORE_add_cert_d)(X509_STORE *ctx, X509 *x);
extern int (*X509_STORE_add_crl_d)(X509_STORE *ctx, X509_CRL *x);
extern X509_LOOKUP *(*X509_STORE_add_lookup_d)(X509_STORE *v, X509_LOOKUP_METHOD *m);
extern void (*X509_STORE_free_d)(X509_STORE *v);
extern int (*X509_STORE_get_by_subject_d)(X509_STORE_CTX *vs, int type, X509_NAME *name, X509_OBJECT *ret);
extern int (*X509_STORE_load_locations_d)(X509_STORE *ctx, const char *file, const char *dir);
extern X509_STORE *(*X509_STORE_new_d)(void);
extern int (*X509_STORE_set1_param_d)(X509_STORE *ctx, X509_VERIFY_PARAM *pm);
extern int (*X509_STORE_set_default_paths_d)(X509_STORE *ctx);
extern int (*X509_STORE_set_depth_d)(X509_STORE *store, int depth);
extern int (*X509_STORE_set_flags_d)(X509_STORE *ctx, unsigned long flags);
extern void (*X509_STORE_set_lookup_crls_cb_d)(X509_STORE *ctx, struct stack_st_509_CRL *(*cb) (X509_STORE_CTX *ctx, X509_NAME *nm));
extern int (*X509_STORE_set_purpose_d)(X509_STORE *ctx, int purpose);
extern int (*X509_STORE_set_trust_d)(X509_STORE *ctx, int trust);
extern void (*X509_STORE_set_verify_cb_d)(X509_STORE *ctx, int (*verify_cb) (int, X509_STORE_CTX *));
extern void (*X509_TRUST_cleanup_d)(void);
extern X509_TRUST *(*X509_TRUST_get0_d)(int idx);
extern char *(*X509_TRUST_get0_name_d)(X509_TRUST *xp);
extern int (*X509_TRUST_get_by_id_d)(int id);
extern int (*X509_TRUST_get_count_d)(void);
extern int (*X509_TRUST_get_flags_d)(X509_TRUST *xp);
extern int (*X509_TRUST_get_trust_d)(X509_TRUST *xp);
extern int (*X509_TRUST_set_d)(int *t, int trust);
extern int (*(*X509_TRUST_set_default_d)(int (*trust) (int, X509 *, int))) (int (*trust) (int, X509 *, int));
extern int (*X509_VERIFY_PARAM_add0_policy_d)(X509_VERIFY_PARAM *param, ASN1_OBJECT *policy);
extern int (*X509_VERIFY_PARAM_add0_table_d)(X509_VERIFY_PARAM *param);
extern int (*X509_VERIFY_PARAM_add1_host_d)(X509_VERIFY_PARAM *param, const char *name, size_t namelen);
extern int (*X509_VERIFY_PARAM_clear_flags_d)(X509_VERIFY_PARAM *param, unsigned long flags);
extern void (*X509_VERIFY_PARAM_free_d)(X509_VERIFY_PARAM *param);
extern const X509_VERIFY_PARAM *(*X509_VERIFY_PARAM_get0_d)(int id);
extern const char *(*X509_VERIFY_PARAM_get0_name_d)(const X509_VERIFY_PARAM *param);
extern char *(*X509_VERIFY_PARAM_get0_peername_d)(X509_VERIFY_PARAM *);
extern int (*X509_VERIFY_PARAM_get_count_d)(void);
extern int (*X509_VERIFY_PARAM_get_depth_d)(const X509_VERIFY_PARAM *param);
extern unsigned long (*X509_VERIFY_PARAM_get_flags_d)(X509_VERIFY_PARAM *param);
extern int (*X509_VERIFY_PARAM_inherit_d)(X509_VERIFY_PARAM *to, const X509_VERIFY_PARAM *from);
extern const X509_VERIFY_PARAM *(*X509_VERIFY_PARAM_lookup_d)(const char *name);
extern X509_VERIFY_PARAM *(*X509_VERIFY_PARAM_new_d)(void);
extern int (*X509_VERIFY_PARAM_set1_d)(X509_VERIFY_PARAM *to, const X509_VERIFY_PARAM *from);
extern int (*X509_VERIFY_PARAM_set1_email_d)(X509_VERIFY_PARAM *param, const char *email, size_t emaillen);
extern int (*X509_VERIFY_PARAM_set1_host_d)(X509_VERIFY_PARAM *param, const char *name, size_t namelen);
extern int (*X509_VERIFY_PARAM_set1_ip_d)(X509_VERIFY_PARAM *param, const unsigned char *ip, size_t iplen);
extern int (*X509_VERIFY_PARAM_set1_ip_asc_d)(X509_VERIFY_PARAM *param, const char *ipasc);
extern int (*X509_VERIFY_PARAM_set1_name_d)(X509_VERIFY_PARAM *param, const char *name);
extern int (*X509_VERIFY_PARAM_set1_policies_d)(X509_VERIFY_PARAM *param, struct stack_st_ASN1_OBJECT *policies);
extern void (*X509_VERIFY_PARAM_set_depth_d)(X509_VERIFY_PARAM *param, int depth);
extern int (*X509_VERIFY_PARAM_set_flags_d)(X509_VERIFY_PARAM *param, unsigned long flags);
extern void (*X509_VERIFY_PARAM_set_hostflags_d)(X509_VERIFY_PARAM *param, unsigned int flags);
extern int (*X509_VERIFY_PARAM_set_purpose_d)(X509_VERIFY_PARAM *param, int purpose);
extern void (*X509_VERIFY_PARAM_set_time_d)(X509_VERIFY_PARAM *param, time_t t);
extern int (*X509_VERIFY_PARAM_set_trust_d)(X509_VERIFY_PARAM *param, int trust);
extern void (*X509_VERIFY_PARAM_table_cleanup_d)(void);
extern int (*X509_add1_ext_i2d_d)(X509 *x, int nid, void *value, int crit, unsigned long flags);
extern int (*X509_add1_reject_object_d)(X509 *x, ASN1_OBJECT *obj);
extern int (*X509_add1_trust_object_d)(X509 *x, ASN1_OBJECT *obj);
extern int (*X509_add_ext_d)(X509 *x, X509_EXTENSION *ex, int loc);
extern unsigned char *(*X509_alias_get0_d)(X509 *x, int *len);
extern int (*X509_alias_set1_d)(X509 *x, unsigned char *name, int len);
extern int (*X509_certificate_type_d)(X509 *x, EVP_PKEY *pubkey );
extern int (*X509_chain_check_suiteb_d)(int *perror_depth, X509 *x,struct stack_st_X509 *chain, unsigned long flags);
extern int (*X509_check_akid_d)(X509 *issuer, AUTHORITY_KEYID *akid);
extern int (*X509_check_ca_d)(X509 *x);
extern int (*X509_check_email_d)(X509 *x, const char *chk, size_t chklen, unsigned int flags);
extern int (*X509_check_host_d)(X509 *x, const char *chk, size_t chklen, unsigned int flags, char **peername);
extern int (*X509_check_ip_d)(X509 *x, const unsigned char *chk, size_t chklen, unsigned int flags);
extern int (*X509_check_ip_asc_d)(X509 *x, const char *ipasc, unsigned int flags);
extern int (*X509_check_issued_d)(X509 *issuer, X509 *subject);
extern int (*X509_check_private_key_d)(X509 *x509, EVP_PKEY *pkey);
extern int (*X509_check_purpose_d)(X509 *x, int id, int ca);
extern int (*X509_check_trust_d)(X509 *x, int id, int flags);
extern int (*X509_cmp_d)(const X509 *a, const X509 *b);
extern int (*X509_cmp_current_time_d)(const ASN1_TIME *s);
extern int (*X509_cmp_time_d)(const ASN1_TIME *s, time_t *t);
extern X509_EXTENSION *(*X509_delete_ext_d)(X509 *x, int loc);
extern int (*X509_digest_d)(const X509 *data, const EVP_MD *type, unsigned char *md, unsigned int *len);
extern X509 *(*X509_dup_d)(X509 *x509);
extern void (*X509_email_free_d)(struct stack_st_OPENSSL_STRING *sk);
extern ASN1_BIT_STRING *(*X509_get0_pubkey_bitstr_d)(const X509 *x);
extern void (*X509_get0_signature_d)(ASN1_BIT_STRING **psig, X509_ALGOR **palg, const X509 *x);
extern struct stack_st_OPENSSL_STRING *(*X509_get1_email_d)(X509 *x);
extern struct stack_st_OPENSSL_STRING *(*X509_get1_ocsp_d)(X509 *x);
extern const char *(*X509_get_default_cert_area_d)(void);
extern const char *(*X509_get_default_cert_dir_d)(void);
extern const char *(*X509_get_default_cert_dir_env_d)(void);
extern const char *(*X509_get_default_cert_file_d)(void);
extern const char *(*X509_get_default_cert_file_env_d)(void);
extern const char *(*X509_get_default_private_dir_d)(void);
extern void *(*X509_get_ex_data_d)(X509 *r, int idx);
extern int (*X509_get_ex_new_index_d)(long argl, void *argp, CRYPTO_EX_new *new_func, CRYPTO_EX_dup *dup_func, CRYPTO_EX_free *free_func);
extern X509_EXTENSION *(*X509_get_ext_d)(X509 *x, int loc);
extern int (*X509_get_ext_by_NID_d)(X509 *x, int nid, int lastpos);
extern int (*X509_get_ext_by_OBJ_d)(X509 *x, ASN1_OBJECT *obj, int lastpos);
extern int (*X509_get_ext_by_critical_d)(X509 *x, int crit, int lastpos);
extern int (*X509_get_ext_count_d)(X509 *x);
extern void *(*X509_get_ext_d2i_d)(X509 *x, int nid, int *crit, int *idx);
extern X509_NAME *(*X509_get_issuer_name_d)(X509 *a);
extern EVP_PKEY *(*X509_get_pubkey_d)(X509 *x);
extern ASN1_INTEGER *(*X509_get_serialNumber_d)(X509 *x);
extern int (*X509_get_signature_nid_d)(const X509 *x);
extern X509_NAME *(*X509_get_subject_name_d)(X509 *a);
extern ASN1_TIME *(*X509_gmtime_adj_d)(ASN1_TIME *s, long adj);
extern int (*X509_http_nbio_d)(OCSP_REQ_CTX *rctx, X509 **pcert);
extern int (*X509_issuer_and_serial_cmp_d)(const X509 *a, const X509 *b);
extern unsigned long (*X509_issuer_and_serial_hash_d)(X509 *a);
extern int (*X509_issuer_name_cmp_d)(const X509 *a, const X509 *b);
extern unsigned long (*X509_issuer_name_hash_d)(X509 *a);
extern unsigned long (*X509_issuer_name_hash_old_d)(X509 *a);
extern unsigned char *(*X509_keyid_get0_d)(X509 *x, int *len);
extern int (*X509_keyid_set1_d)(X509 *x, unsigned char *id, int len);
extern int (*X509_load_cert_crl_file_d)(X509_LOOKUP *ctx, const char *file, int type);
extern int (*X509_load_cert_file_d)(X509_LOOKUP *ctx, const char *file, int type);
extern int (*X509_load_crl_file_d)(X509_LOOKUP *ctx, const char *file, int type);
extern int (*X509_ocspid_print_d)(BIO *bp, X509 *x);
extern int (*X509_policy_check_d)(X509_POLICY_TREE **ptree, int *pexplicit_policy,struct stack_st_X509 *certs, struct stack_st_ASN1_OBJECT *policy_oids, unsigned int flags);
extern X509_POLICY_NODE *(*X509_policy_level_get0_node_d)(X509_POLICY_LEVEL *level, int i);
extern int (*X509_policy_level_node_count_d)(X509_POLICY_LEVEL *level);
extern const X509_POLICY_NODE *(*X509_policy_node_get0_parent_d)(const X509_POLICY_NODE *node);
extern const ASN1_OBJECT *(*X509_policy_node_get0_policy_d)(const X509_POLICY_NODE *node);
extern struct stack_st_POLICYQUALINFO *(*X509_policy_node_get0_qualifiers_d)(const X509_POLICY_NODE *node);
extern void (*X509_policy_tree_free_d)(X509_POLICY_TREE *tree);
extern X509_POLICY_LEVEL *(*X509_policy_tree_get0_level_d)(const X509_POLICY_TREE *tree, int i);
extern int (*X509_policy_tree_level_count_d)(const X509_POLICY_TREE *tree);
extern int (*X509_print_d)(BIO *bp, X509 *x);
extern int (*X509_print_ex_d)(BIO *bp, X509 *x, unsigned long nmflag, unsigned long cflag);
extern int (*X509_print_ex_fp_d)(FILE *bp, X509 *x, unsigned long nmflag, unsigned long cflag);
extern int (*X509_print_fp_d)(FILE *bp, X509 *x);
extern int (*X509_pubkey_digest_d)(const X509 *data, const EVP_MD *type, unsigned char *md, unsigned int *len);
extern void (*X509_reject_clear_d)(X509 *x);
extern int (*X509_set_ex_data_d)(X509 *r, int idx, void *arg);
extern int (*X509_set_issuer_name_d)(X509 *x, X509_NAME *name);
extern int (*X509_set_notAfter_d)(X509 *x, const ASN1_TIME *tm);
extern int (*X509_set_notBefore_d)(X509 *x, const ASN1_TIME *tm);
extern int (*X509_set_pubkey_d)(X509 *x, EVP_PKEY *pkey);
extern int (*X509_set_serialNumber_d)(X509 *x, ASN1_INTEGER *serial);
extern int (*X509_set_subject_name_d)(X509 *x, X509_NAME *name);
extern int (*X509_set_version_d)(X509 *x, long version);
extern int (*X509_sign_d)(X509 *x, EVP_PKEY *pkey, const EVP_MD *md);
extern int (*X509_sign_ctx_d)(X509 *x, EVP_MD_CTX *ctx);
extern int (*X509_signature_dump_d)(BIO *bp, const ASN1_STRING *sig, int indent);
extern int (*X509_signature_print_d)(BIO *bp, X509_ALGOR *alg, ASN1_STRING *sig);
extern int (*X509_subject_name_cmp_d)(const X509 *a, const X509 *b);
extern unsigned long (*X509_subject_name_hash_d)(X509 *x);
extern unsigned long (*X509_subject_name_hash_old_d)(X509 *x);
extern int (*X509_supported_extension_d)(X509_EXTENSION *ex);
extern ASN1_TIME *(*X509_time_adj_d)(ASN1_TIME *s, long adj, time_t *t);
extern ASN1_TIME *(*X509_time_adj_ex_d)(ASN1_TIME *s, int offset_day, long offset_sec, time_t *t);
extern X509_REQ *(*X509_to_X509_REQ_d)(X509 *x, EVP_PKEY *pkey, const EVP_MD *md);
extern void (*X509_trust_clear_d)(X509 *x);
extern int (*X509_verify_d)(X509 *a, EVP_PKEY *r);
extern int (*X509_verify_cert_d)(X509_STORE_CTX *ctx);
extern const char *(*X509_verify_cert_error_string_d)(long n);
extern int (*_CONF_add_string_d)(CONF *conf, CONF_VALUE *section, CONF_VALUE *value);
extern void (*_CONF_free_data_d)(CONF *conf);
extern long (*_CONF_get_number_d)(const CONF *conf, const char *section, const char *name);
extern CONF_VALUE *(*_CONF_get_section_d)(const CONF *conf, const char *section);
extern struct stack_st_CONF_VALUE *(*_CONF_get_section_values_d)(const CONF *conf, const char *section);
extern char *(*_CONF_get_string_d)(const CONF *conf, const char *section, const char *name);
extern int (*_CONF_new_data_d)(CONF *conf);
extern CONF_VALUE *(*_CONF_new_section_d)(CONF *conf, const char *section);
extern int (*a2i_ASN1_ENUMERATED_d)(BIO *bp, ASN1_ENUMERATED *bs, char *buf, int size);
extern int (*a2i_ASN1_INTEGER_d)(BIO *bp, ASN1_INTEGER *bs, char *buf, int size);
extern int (*a2i_ASN1_STRING_d)(BIO *bp, ASN1_STRING *bs, char *buf, int size);
extern GENERAL_NAME *(*a2i_GENERAL_NAME_d)(GENERAL_NAME *out, const X509V3_EXT_METHOD *method, X509V3_CTX *ctx, int gen_type, char *value, int is_nc);
extern ASN1_OCTET_STRING *(*a2i_IPADDRESS_d)(const char *ipasc);
extern ASN1_OCTET_STRING *(*a2i_IPADDRESS_NC_d)(const char *ipasc);
extern int (*a2i_ipadd_d)(unsigned char *ipout, const char *ipasc);
extern void *(*ascii2ebcdic_d)(void *dest, const void *srce, size_t count);
extern int (*asn1_Finish_d)(ASN1_CTX *c);
extern int (*asn1_GetSequence_d)(ASN1_const_CTX *c, long *length);
extern void (*asn1_add_error_d)(const unsigned char *address, int offset);
extern int (*asn1_const_Finish_d)(ASN1_const_CTX *c);
extern const ASN1_TEMPLATE *(*asn1_do_adb_d)(ASN1_VALUE **pval, const ASN1_TEMPLATE *tt, int nullerr);
extern int (*asn1_do_lock_d)(ASN1_VALUE **pval, int op, const ASN1_ITEM *it);
extern void (*asn1_enc_free_d)(ASN1_VALUE **pval, const ASN1_ITEM *it);
extern void (*asn1_enc_init_d)(ASN1_VALUE **pval, const ASN1_ITEM *it);
extern int (*asn1_enc_restore_d)(int *len, unsigned char **out, ASN1_VALUE **pval, const ASN1_ITEM *it);
extern int (*asn1_enc_save_d)(ASN1_VALUE **pval, const unsigned char *in, int inlen, const ASN1_ITEM *it);
extern int (*asn1_ex_c2i_d)(ASN1_VALUE **pval, const unsigned char *cont, int len, int utype, char *free_cont, const ASN1_ITEM *it);
extern int (*asn1_ex_i2c_d)(ASN1_VALUE **pval, unsigned char *cont, int *putype, const ASN1_ITEM *it);
extern int (*asn1_get_choice_selector_d)(ASN1_VALUE **pval, const ASN1_ITEM *it);
extern ASN1_VALUE **(*asn1_get_field_ptr_d)(ASN1_VALUE **pval, const ASN1_TEMPLATE *tt);
extern int (*asn1_set_choice_selector_d)(ASN1_VALUE **pval, int value, const ASN1_ITEM *it);
extern EVP_PKEY *(*b2i_PVK_bio_d)(BIO *in, pem_password_cb *cb, void *u);
extern EVP_PKEY *(*b2i_PrivateKey_d)(const unsigned char **in, long length);
extern EVP_PKEY *(*b2i_PrivateKey_bio_d)(BIO *in);
extern EVP_PKEY *(*b2i_PublicKey_d)(const unsigned char **in, long length);
extern EVP_PKEY *(*b2i_PublicKey_bio_d)(BIO *in);
extern BN_ULONG (*bn_add_words_d)(BN_ULONG *rp, const BN_ULONG *ap, const BN_ULONG *bp, int num);
extern BN_ULONG (*bn_div_words_d)(BN_ULONG h, BN_ULONG l, BN_ULONG d);
extern BIGNUM *(*bn_dup_expand_d)(const BIGNUM *a, int words);
extern BIGNUM *(*bn_expand2_d)(BIGNUM *a, int words);
extern BN_ULONG (*bn_mul_add_words_d)(BN_ULONG *rp, const BN_ULONG *ap, int num, BN_ULONG w);
extern BN_ULONG (*bn_mul_words_d)(BN_ULONG *rp, const BN_ULONG *ap, int num, BN_ULONG w);
extern void (*bn_sqr_words_d)(BN_ULONG *rp, const BN_ULONG *ap, int num);
extern BN_ULONG (*bn_sub_words_d)(BN_ULONG *rp, const BN_ULONG *ap, const BN_ULONG *bp, int num);
extern ASN1_BIT_STRING *(*c2i_ASN1_BIT_STRING_d)(ASN1_BIT_STRING **a, const unsigned char **pp, long length);
extern ASN1_INTEGER *(*c2i_ASN1_INTEGER_d)(ASN1_INTEGER **a, const unsigned char **pp, long length);
extern ASN1_OBJECT *(*c2i_ASN1_OBJECT_d)(ASN1_OBJECT **a, const unsigned char **pp, long length);
extern void (*check_defer_d)(int nid);
extern int (*d2i_ASN1_BOOLEAN_d)(int *a, const unsigned char **pp, long length);
extern ASN1_OBJECT *(*d2i_ASN1_OBJECT_d)(ASN1_OBJECT **a, const unsigned char **pp, long length);
extern ASN1_INTEGER *(*d2i_ASN1_UINTEGER_d)(ASN1_INTEGER **a, const unsigned char **pp, long length);
extern ASN1_STRING *(*d2i_ASN1_bytes_d)(ASN1_STRING **a, const unsigned char **pp, long length, int Ptag, int Pclass);
extern ASN1_STRING *(*d2i_ASN1_type_bytes_d)(ASN1_STRING **a, const unsigned char **pp, long length, int type);
extern EVP_PKEY *(*d2i_AutoPrivateKey_d)(EVP_PKEY **a, const unsigned char **pp, long length);
extern DH *(*d2i_DHparams_d)(DH **a, const unsigned char **pp, long length);
extern DH *(*d2i_DHxparams_d)(DH **a, const unsigned char **pp, long length);
extern DSA *(*d2i_DSAPrivateKey_d)(DSA **a, const unsigned char **pp, long length);
extern DSA *(*d2i_DSAPrivateKey_bio_d)(BIO *bp, DSA **dsa);
extern DSA *(*d2i_DSAPrivateKey_fp_d)(FILE *fp, DSA **dsa);
extern DSA *(*d2i_DSAPublicKey_d)(DSA **a, const unsigned char **pp, long length);
extern DSA *(*d2i_DSA_PUBKEY_d)(DSA **a, const unsigned char **pp, long length);
extern DSA *(*d2i_DSA_PUBKEY_bio_d)(BIO *bp, DSA **dsa);
extern DSA *(*d2i_DSA_PUBKEY_fp_d)(FILE *fp, DSA **dsa);
extern DSA_SIG *(*d2i_DSA_SIG_d)(DSA_SIG **v, const unsigned char **pp, long length);
extern DSA *(*d2i_DSAparams_d)(DSA **a, const unsigned char **pp, long length);
extern ECDSA_SIG *(*d2i_ECDSA_SIG_d)(ECDSA_SIG **sig, const unsigned char **pp, long len);
extern EC_GROUP *(*d2i_ECPKParameters_d)(EC_GROUP **, const unsigned char **in, long len);
extern EC_KEY *(*d2i_ECParameters_d)(EC_KEY **key, const unsigned char **in, long len);
extern EC_KEY *(*d2i_ECPrivateKey_d)(EC_KEY **key, const unsigned char **in, long len);
extern EC_KEY *(*d2i_ECPrivateKey_bio_d)(BIO *bp, EC_KEY **eckey);
extern EC_KEY *(*d2i_ECPrivateKey_fp_d)(FILE *fp, EC_KEY **eckey);
extern EC_KEY *(*d2i_EC_PUBKEY_d)(EC_KEY **a, const unsigned char **pp, long length);
extern EC_KEY *(*d2i_EC_PUBKEY_bio_d)(BIO *bp, EC_KEY **eckey);
extern EC_KEY *(*d2i_EC_PUBKEY_fp_d)(FILE *fp, EC_KEY **eckey);

extern RSA *(*d2i_Netscape_RSA_d)(RSA **a, const unsigned char **pp, long length, int (*cb) (char *buf, int len, const char *prompt, int verify));
extern PKCS7 *(*d2i_PKCS7_bio_d)(BIO *bp, PKCS7 **p7);
extern PKCS7 *(*d2i_PKCS7_fp_d)(FILE *fp, PKCS7 **p7);
extern EVP_PKEY *(*d2i_PKCS8PrivateKey_bio_d)(BIO *bp, EVP_PKEY **x, pem_password_cb *cb, void *u);
extern EVP_PKEY *(*d2i_PKCS8PrivateKey_fp_d)(FILE *fp, EVP_PKEY **x, pem_password_cb *cb, void *u);
extern PKCS8_PRIV_KEY_INFO *(*d2i_PKCS8_PRIV_KEY_INFO_bio_d)(BIO *bp, PKCS8_PRIV_KEY_INFO **p8inf);
extern PKCS8_PRIV_KEY_INFO *(*d2i_PKCS8_PRIV_KEY_INFO_fp_d)(FILE *fp, PKCS8_PRIV_KEY_INFO **p8inf);
extern X509_SIG *(*d2i_PKCS8_bio_d)(BIO *bp, X509_SIG **p8);
extern X509_SIG *(*d2i_PKCS8_fp_d)(FILE *fp, X509_SIG **p8);
extern EVP_PKEY *(*d2i_PUBKEY_d)(EVP_PKEY **a, const unsigned char **pp, long length);
extern EVP_PKEY *(*d2i_PUBKEY_bio_d)(BIO *bp, EVP_PKEY **a);
extern EVP_PKEY *(*d2i_PUBKEY_fp_d)(FILE *fp, EVP_PKEY **a);
extern EVP_PKEY *(*d2i_PrivateKey_d)(int type, EVP_PKEY **a, const unsigned char **pp, long length);
extern EVP_PKEY *(*d2i_PrivateKey_bio_d)(BIO *bp, EVP_PKEY **a);
extern EVP_PKEY *(*d2i_PrivateKey_fp_d)(FILE *fp, EVP_PKEY **a);
extern EVP_PKEY *(*d2i_PublicKey_d)(int type, EVP_PKEY **a, const unsigned char **pp, long length);
extern RSA *(*d2i_RSAPrivateKey_bio_d)(BIO *bp, RSA **rsa);
extern RSA *(*d2i_RSAPrivateKey_fp_d)(FILE *fp, RSA **rsa);
extern RSA *(*d2i_RSAPublicKey_bio_d)(BIO *bp, RSA **rsa);
extern RSA *(*d2i_RSAPublicKey_fp_d)(FILE *fp, RSA **rsa);
extern RSA *(*d2i_RSA_NET_d)(RSA **a, const unsigned char **pp, long length, int (*cb) (char *buf, int len, const char *prompt, int verify), int sgckey);
extern RSA *(*d2i_RSA_PUBKEY_d)(RSA **a, const unsigned char **pp, long length);
extern RSA *(*d2i_RSA_PUBKEY_bio_d)(BIO *bp, RSA **rsa);
extern RSA *(*d2i_RSA_PUBKEY_fp_d)(FILE *fp, RSA **rsa);
extern SSL_SESSION *(*d2i_SSL_SESSION_d)(SSL_SESSION **a, const unsigned char **pp, long length);

extern X509 *(*d2i_X509_AUX_d)(X509 **a, const unsigned char **pp, long length);
extern X509_CRL *(*d2i_X509_CRL_bio_d)(BIO *bp, X509_CRL **crl);
extern X509_CRL *(*d2i_X509_CRL_fp_d)(FILE *fp, X509_CRL **crl);
extern X509_PKEY *(*d2i_X509_PKEY_d)(X509_PKEY **a, const unsigned char **pp, long length);
extern X509_REQ *(*d2i_X509_REQ_bio_d)(BIO *bp, X509_REQ **req);
extern X509_REQ *(*d2i_X509_REQ_fp_d)(FILE *fp, X509_REQ **req);
extern X509 *(*d2i_X509_bio_d)(BIO *bp, X509 **x509);
extern X509 *(*d2i_X509_fp_d)(FILE *fp, X509 **x509);
extern void *(*ebcdic2ascii_d)(void *dest, const void *srce, size_t count);
extern BIGNUM *(*get_rfc2409_prime_1024_d)(BIGNUM *bn);
extern BIGNUM *(*get_rfc2409_prime_768_d)(BIGNUM *bn);
extern BIGNUM *(*get_rfc3526_prime_1536_d)(BIGNUM *bn);
extern BIGNUM *(*get_rfc3526_prime_2048_d)(BIGNUM *bn);
extern BIGNUM *(*get_rfc3526_prime_3072_d)(BIGNUM *bn);
extern BIGNUM *(*get_rfc3526_prime_4096_d)(BIGNUM *bn);
extern BIGNUM *(*get_rfc3526_prime_6144_d)(BIGNUM *bn);
extern BIGNUM *(*get_rfc3526_prime_8192_d)(BIGNUM *bn);
extern char *(*hex_to_string_d)(const unsigned char *buffer, long len);
extern int (*i2a_ACCESS_DESCRIPTION_d)(BIO *bp, ACCESS_DESCRIPTION *a);
extern int (*i2a_ASN1_ENUMERATED_d)(BIO *bp, ASN1_ENUMERATED *a);
extern int (*i2a_ASN1_INTEGER_d)(BIO *bp, ASN1_INTEGER *a);
extern int (*i2a_ASN1_OBJECT_d)(BIO *bp, ASN1_OBJECT *a);
extern int (*i2a_ASN1_STRING_d)(BIO *bp, ASN1_STRING *a, int type);
extern int (*i2b_PVK_bio_d)(BIO *out, EVP_PKEY *pk, int enclevel, pem_password_cb *cb, void *u);
extern int (*i2b_PrivateKey_bio_d)(BIO *out, EVP_PKEY *pk);
extern int (*i2b_PublicKey_bio_d)(BIO *out, EVP_PKEY *pk);
extern int (*i2c_ASN1_BIT_STRING_d)(ASN1_BIT_STRING *a, unsigned char **pp);
extern int (*i2c_ASN1_INTEGER_d)(ASN1_INTEGER *a, unsigned char **pp);
extern int (*i2d_ASN1_BOOLEAN_d)(int a, unsigned char **pp);
extern int (*i2d_ASN1_OBJECT_d)(ASN1_OBJECT *a, unsigned char **pp);
extern int (*i2d_ASN1_SET_d)(struct stack_st_OPENSSL_BLOCK *a, unsigned char **pp, i2d_of_void *i2d, int ex_tag, int ex_class, int is_set);
extern int (*i2d_ASN1_bio_stream_d)(BIO *out, ASN1_VALUE *val, BIO *in, int flags, const ASN1_ITEM *it);
extern int (*i2d_ASN1_bytes_d)(ASN1_STRING *a, unsigned char **pp, int tag, int xclass);

extern int (*i2d_DHparams_d)(const DH *a, unsigned char **pp);
extern int (*i2d_DHxparams_d)(const DH *a, unsigned char **pp);
extern int (*i2d_DSAPrivateKey_d)(const DSA *a, unsigned char **pp);
extern int (*i2d_DSAPrivateKey_bio_d)(BIO *bp, DSA *dsa);
extern int (*i2d_DSAPrivateKey_fp_d)(FILE *fp, DSA *dsa);
extern int (*i2d_DSAPublicKey_d)(const DSA *a, unsigned char **pp);
extern int (*i2d_DSA_PUBKEY_d)(DSA *a, unsigned char **pp);
extern int (*i2d_DSA_PUBKEY_bio_d)(BIO *bp, DSA *dsa);
extern int (*i2d_DSA_PUBKEY_fp_d)(FILE *fp, DSA *dsa);
extern int (*i2d_DSA_SIG_d)(const DSA_SIG *a, unsigned char **pp);
extern int (*i2d_DSAparams_d)(const DSA *a, unsigned char **pp);
extern int (*i2d_ECDSA_SIG_d)(const ECDSA_SIG *sig, unsigned char **pp);
extern int (*i2d_ECPKParameters_d)(const EC_GROUP *, unsigned char **out);
extern int (*i2d_ECParameters_d)(EC_KEY *key, unsigned char **out);
extern int (*i2d_ECPrivateKey_d)(EC_KEY *key, unsigned char **out);
extern int (*i2d_ECPrivateKey_bio_d)(BIO *bp, EC_KEY *eckey);
extern int (*i2d_ECPrivateKey_fp_d)(FILE *fp, EC_KEY *eckey);
extern int (*i2d_EC_PUBKEY_d)(EC_KEY *a, unsigned char **pp);
extern int (*i2d_EC_PUBKEY_bio_d)(BIO *bp, EC_KEY *eckey);
extern int (*i2d_EC_PUBKEY_fp_d)(FILE *fp, EC_KEY *eckey);

extern int (*i2d_PKCS7_bio_d)(BIO *bp, PKCS7 *p7);
extern int (*i2d_PKCS7_bio_stream_d)(BIO *out, PKCS7 *p7, BIO *in, int flags);
extern int (*i2d_PKCS7_fp_d)(FILE *fp, PKCS7 *p7);
extern int (*i2d_PKCS8PrivateKeyInfo_bio_d)(BIO *bp, EVP_PKEY *key);
extern int (*i2d_PKCS8PrivateKeyInfo_fp_d)(FILE *fp, EVP_PKEY *key);
extern int (*i2d_PKCS8PrivateKey_bio_d)(BIO *bp, EVP_PKEY *x, const EVP_CIPHER *enc, char *kstr, int klen, pem_password_cb *cb, void *u);
extern int (*i2d_PKCS8PrivateKey_fp_d)(FILE *fp, EVP_PKEY *x, const EVP_CIPHER *enc, char *kstr, int klen, pem_password_cb *cb, void *u);
extern int (*i2d_PKCS8PrivateKey_nid_bio_d)(BIO *bp, EVP_PKEY *x, int nid, char *kstr, int klen, pem_password_cb *cb, void *u);
extern int (*i2d_PKCS8PrivateKey_nid_fp_d)(FILE *fp, EVP_PKEY *x, int nid, char *kstr, int klen, pem_password_cb *cb, void *u);
extern int (*i2d_PKCS8_PRIV_KEY_INFO_bio_d)(BIO *bp, PKCS8_PRIV_KEY_INFO *p8inf);
extern int (*i2d_PKCS8_PRIV_KEY_INFO_fp_d)(FILE *fp, PKCS8_PRIV_KEY_INFO *p8inf);
extern int (*i2d_PKCS8_bio_d)(BIO *bp, X509_SIG *p8);
extern int (*i2d_PKCS8_fp_d)(FILE *fp, X509_SIG *p8);
extern int (*i2d_PUBKEY_d)(EVP_PKEY *a, unsigned char **pp);
extern int (*i2d_PUBKEY_bio_d)(BIO *bp, EVP_PKEY *pkey);
extern int (*i2d_PUBKEY_fp_d)(FILE *fp, EVP_PKEY *pkey);
extern int (*i2d_PrivateKey_d)(EVP_PKEY *a, unsigned char **pp);
extern int (*i2d_PrivateKey_bio_d)(BIO *bp, EVP_PKEY *pkey);
extern int (*i2d_PrivateKey_fp_d)(FILE *fp, EVP_PKEY *pkey);
extern int (*i2d_PublicKey_d)(EVP_PKEY *a, unsigned char **pp);
extern int (*i2d_RSAPrivateKey_bio_d)(BIO *bp, RSA *rsa);
extern int (*i2d_RSAPrivateKey_fp_d)(FILE *fp, RSA *rsa);
extern int (*i2d_RSAPublicKey_bio_d)(BIO *bp, RSA *rsa);
extern int (*i2d_RSAPublicKey_fp_d)(FILE *fp, RSA *rsa);
extern int (*i2d_RSA_NET_d)(const RSA *a, unsigned char **pp, int (*cb) (char *buf, int len, const char *prompt, int verify), int sgckey);
extern int (*i2d_RSA_PUBKEY_d)(RSA *a, unsigned char **pp);
extern int (*i2d_RSA_PUBKEY_bio_d)(BIO *bp, RSA *rsa);
extern int (*i2d_RSA_PUBKEY_fp_d)(FILE *fp, RSA *rsa);
extern int (*i2d_SSL_SESSION_d)(SSL_SESSION *in, unsigned char **pp);


extern int (*i2d_X509_AUX_d)(X509 *a, unsigned char **pp);
extern int (*i2d_X509_CRL_bio_d)(BIO *bp, X509_CRL *crl);
extern int (*i2d_X509_CRL_fp_d)(FILE *fp, X509_CRL *crl);
extern int (*i2d_X509_PKEY_d)(X509_PKEY *a, unsigned char **pp);
extern int (*i2d_X509_REQ_bio_d)(BIO *bp, X509_REQ *req);
extern int (*i2d_X509_REQ_fp_d)(FILE *fp, X509_REQ *req);
extern int (*i2d_X509_bio_d)(BIO *bp, X509 *x509);
extern int (*i2d_X509_fp_d)(FILE *fp, X509 *x509);
extern int (*i2d_re_X509_tbs_d)(X509 *x, unsigned char **pp);
extern int (*i2o_ECPublicKey_d)(EC_KEY *key, unsigned char **out);
extern char *(*i2s_ASN1_ENUMERATED_d)(X509V3_EXT_METHOD *meth, ASN1_ENUMERATED *aint);
extern char *(*i2s_ASN1_ENUMERATED_TABLE_d)(X509V3_EXT_METHOD *meth, ASN1_ENUMERATED *aint);
extern char *(*i2s_ASN1_INTEGER_d)(X509V3_EXT_METHOD *meth, ASN1_INTEGER *aint);
extern char *(*i2s_ASN1_OCTET_STRING_d)(X509V3_EXT_METHOD *method, ASN1_OCTET_STRING *ia5);
extern int (*i2t_ASN1_OBJECT_d)(char *buf, int buf_len, ASN1_OBJECT *a);
extern struct stack_st_CONF_VALUE *(*i2v_ASN1_BIT_STRING_d)(X509V3_EXT_METHOD *method, ASN1_BIT_STRING *bits, struct stack_st_CONF_VALUE *extlist);
extern struct stack_st_CONF_VALUE *(*i2v_GENERAL_NAME_d)(X509V3_EXT_METHOD *method, GENERAL_NAME *gen, struct stack_st_CONF_VALUE *ret);
extern struct stack_st_CONF_VALUE *(*i2v_GENERAL_NAMES_d)(X509V3_EXT_METHOD *method, GENERAL_NAMES *gen, struct stack_st_CONF_VALUE *extlist);

extern int (*name_cmp_d)(const char *name, const char *cmp);
extern EC_KEY *(*o2i_ECPublicKey_d)(EC_KEY **key, const unsigned char **in, long len);
extern void (*pitem_free_d)(pitem *item);
extern pitem *(*pitem_new_d)(unsigned char *prio64be, void *data);
extern pitem *(*pqueue_find_d)(pqueue pq, unsigned char *prio64be);
extern void (*pqueue_free_d)(pqueue pq);
extern pitem *(*pqueue_insert_d)(pqueue pq, pitem *item);
extern pitem *(*pqueue_iterator_d)(pqueue pq);
extern pqueue (*pqueue_new_d)(void);
extern pitem *(*pqueue_next_d)(piterator *iter);
extern pitem *(*pqueue_peek_d)(pqueue pq);
extern pitem *(*pqueue_pop_d)(pqueue pq);
extern void (*pqueue_print_d)(pqueue pq);
extern int (*pqueue_size_d)(pqueue pq);

extern ASN1_INTEGER *(*s2i_ASN1_INTEGER_d)(X509V3_EXT_METHOD *meth, char *value);
extern ASN1_OCTET_STRING *(*s2i_ASN1_OCTET_STRING_d)(X509V3_EXT_METHOD *method, X509V3_CTX *ctx, char *str);
extern void *(*sk_delete_d)(_STACK *st, int loc);
extern void *(*sk_delete_ptr_d)(_STACK *st, void *p);
extern _STACK *(*sk_dup_d)(_STACK *st);
extern int (*sk_find_d)(_STACK *st, void *data);
extern int (*sk_find_ex_d)(_STACK *st, void *data);
extern void (*sk_free_d)(_STACK *);
extern int (*sk_insert_d)(_STACK *sk, void *data, int where);
extern int (*sk_is_sorted_d)(const _STACK *st);
extern _STACK *(*sk_new_null_d)(void);
extern int (*sk_num_d)(const _STACK *);
extern void *(*sk_pop_d)(_STACK *st);
extern int (*sk_push_d)(_STACK *st, void *data);
extern void *(*sk_set_d)(_STACK *, int, void *);
extern void *(*sk_shift_d)(_STACK *st);
extern void (*sk_sort_d)(_STACK *st);
extern int (*sk_unshift_d)(_STACK *st, void *data);
extern void *(*sk_value_d)(const _STACK *, int);
extern void (*sk_zero_d)(_STACK *st);
extern unsigned char *(*string_to_hex_d)(const char *str, long *len);
extern ASN1_BIT_STRING *(*v2i_ASN1_BIT_STRING_d)(X509V3_EXT_METHOD *method, X509V3_CTX *ctx, struct stack_st_CONF_VALUE *nval);
extern GENERAL_NAME *(*v2i_GENERAL_NAME_d)(const X509V3_EXT_METHOD *method, X509V3_CTX *ctx, CONF_VALUE *cnf);
extern GENERAL_NAMES *(*v2i_GENERAL_NAMES_d)(const X509V3_EXT_METHOD *method, X509V3_CTX *ctx, struct stack_st_CONF_VALUE *nval);
extern GENERAL_NAME *(*v2i_GENERAL_NAME_ex_d)(GENERAL_NAME *out, const X509V3_EXT_METHOD *method, X509V3_CTX *ctx, CONF_VALUE *cnf, int is_nc);

*/

//! PNG
extern png_uint_32 (*png_access_version_number_d)(void);

//! SPF
extern void (*SPF_server_free_d)(SPF_server_t *sp);
extern void (*SPF_request_free_d)(SPF_request_t *sr);
extern void (*SPF_response_free_d)(SPF_response_t *rp);
extern const char * (*SPF_strreason_d)(SPF_reason_t reason);
extern const char * (*SPF_strresult_d)(SPF_result_t result);
extern const char * (*SPF_strerror_d)(SPF_errcode_t spf_err);
extern SPF_reason_t (*SPF_response_reason_d)(SPF_response_t *rp);
extern SPF_result_t (*SPF_response_result_d)(SPF_response_t *rp);
extern SPF_request_t * (*SPF_request_new_d)(SPF_server_t * spf_server);
extern void (*SPF_get_lib_version_d)(int *major, int *minor, int *patch);
extern int (*SPF_request_set_env_from_d)(SPF_request_t *sr, const char *from);
extern SPF_server_t * (*SPF_server_new_d)(SPF_server_dnstype_t dnstype, int debug);
extern SPF_errcode_t (*SPF_request_set_helo_dom_d)(SPF_request_t *sr, const char *dom);
extern SPF_errcode_t	(*SPF_request_set_ipv4_d)(SPF_request_t *sr, struct in_addr addr);
extern SPF_errcode_t	(*SPF_request_set_ipv6_d)(SPF_request_t *sr, struct in6_addr addr);
extern SPF_dns_server_t * (*SPF_dns_zone_new_d)(SPF_dns_server_t *layer_below, const char *name, int debug);
extern SPF_errcode_t (*SPF_request_query_mailfrom_d)(SPF_request_t *spf_request, SPF_response_t **spf_responsep);
extern SPF_errcode_t (*SPF_dns_zone_add_str_d)(SPF_dns_server_t *spf_dns_server, const char *domain, ns_type rr_type, SPF_dns_stat_t herrno, const char *data);

//! TOKYO
extern char **tcversion_d;
extern TCHDB * (*tchdbnew_d)(void);
extern void (*tcfree_d)(void *ptr);
extern void (*tchdbdel_d)(TCHDB *hdb);
extern bool (*tchdbsync_d)(TCHDB *hdb);
extern int (*tchdbecode_d)(TCHDB *hdb);
extern void (*tcndbdel_d)(TCNDB *tree);
extern bool (*tchdbclose_d)(TCHDB *hdb);
extern void (*tclistdel_d)(TCLIST *list);
extern TCNDB * (*tcndbdup_d)(TCNDB *ndb);
extern bool (*tchdbsetmutex_d)(TCHDB *hdb);
extern uint64_t (*tchdbfsiz_d)(TCHDB *hdb);
extern uint64_t (*tchdbrnum_d)(TCHDB *hdb);
extern uint64_t (*tcndbrnum_d)(TCNDB *ndb);
extern void (*tcndbiterinit_d)(TCNDB *ndb);
extern char * (*tcndbiternext2_d)(TCNDB *ndb);
extern int (*tclistnum_d)(const TCLIST *list);
extern const char * (*tchdberrmsg_d)(int ecode);
extern const char * (*tchdbpath_d)(TCHDB * hdb);
extern TCLIST * (*tctreekeys_d)(const TCTREE * tree);
extern TCLIST * (*tctreevals_d)(const TCTREE * tree);
extern TCNDB * (*tcndbnew2_d)(TCCMP cmp, void *cmpop);
extern bool (*tchdbdefrag_d)(TCHDB *hdb, int64_t step);
extern bool (*tchdbsetdfunit_d)(TCHDB *hdb, int32_t dfunit);
extern bool (*tchdbout_d)(TCHDB *hdb, const void *kbuf, int ksiz);
extern bool (*tcndbout_d)(TCNDB *ndb, const void *kbuf, int ksiz);
extern bool (*tchdbopen_d)(TCHDB *hdb, const char *path, int omode);
extern const void * (*tclistval_d)(const TCLIST * list, int index, int *sp);
extern void * (*tchdbget_d)(TCHDB * hdb, const void *kbuf, int ksiz, int *sp);
extern void * (*tcndbget3_d)(TCNDB *ndb, const void *kbuf, int ksiz, int *sp);
extern void * (*tcndbget_d)(TCNDB * ndb, const void *kbuf, int ksiz, int *sp);
extern TCLIST * (*tcndbfwmkeys_d)(TCNDB * ndb, const void *pbuf, int psiz, int max);
extern bool (*tchdbtune_d)(TCHDB *hdb, int64_t bnum, int8_t apow, int8_t fpow, uint8_t opts);
extern bool (*tchdboptimize_d)(TCHDB *hdb, int64_t bnum, int8_t apow, int8_t fpow, uint8_t opts);
extern bool (*tcndbputkeep_d)(TCNDB *ndb, const void *kbuf, int ksiz, const void *vbuf, int vsiz);
extern bool (*tchdbputasync_d)(TCHDB *hdb, const void *kbuf, int ksiz, const void *vbuf, int vsiz);
extern bool (*tcndbgetboth_d)(TCNDB *ndb, const void *kbuf, int ksiz, void **rkbuf, int *rksiz, void **rvbuf, int *rvsiz);

//! Jansson
extern const char * (*jansson_version_d)(void);
extern int (*json_array_append_d)(json_t *array, json_t *value);
extern int (*json_array_insert_d)(json_t *array, size_t index, json_t *value);
extern int (*json_array_set_d)(json_t *array, size_t index, json_t *value);
extern json_t * (*json_array_d)(void);
extern int (*json_array_append_new_d)(json_t *array, json_t *value);
extern int (*json_array_clear_d)(json_t *array);
extern int (*json_array_extend_d)(json_t *array, json_t *other);
extern json_t * (*json_array_get_d)(const json_t *array, size_t index);
extern int (*json_array_insert_new_d)(json_t *array, size_t index, json_t *value);
extern int (*json_array_remove_d)(json_t *array, size_t index);
extern int (*json_array_set_new_d)(json_t *array, size_t index, json_t *value);
extern size_t (*json_array_size_d)(const json_t *array);
extern json_t * (*json_copy_d)(json_t *value);
extern void (*json_decref_d)(json_t *json);
extern json_t * (*json_deep_copy_d)(json_t *value);
extern void (*json_delete_d)(json_t *json);
extern int (*json_dump_file_d)(const json_t *json, const char *path, size_t flags);
extern int (*json_dumpf_d)(const json_t *json, FILE *output, size_t flags);
extern char * (*json_dumps_d)(const json_t *json, size_t flags);
extern int (*json_equal_d)(json_t *value1, json_t *value2);
extern json_t * (*json_false_d)(void);
extern const char * (*json_type_string_d)(json_t *json);
extern json_t * (*json_incref_d)(json_t *json);
extern json_t * (*json_integer_d)(json_int_t value);
extern int (*json_integer_set_d)(json_t *integer, json_int_t value);
extern json_int_t (*json_integer_value_d)(const json_t *integer);
extern json_t * (*json_load_file_d)(const char *path, size_t flags, json_error_t *error);
extern json_t * (*json_loadf_d)(FILE *input, size_t flags, json_error_t *error);
extern json_t * (*json_loads_d)(const char *input, size_t flags, json_error_t *error);
extern json_t * (*json_null_d)(void);
extern double (*json_number_value_d)(const json_t *json);
extern json_t * (*json_object_d)(void);
extern int (*json_object_clear_d)(json_t *object);
extern int (*json_object_del_d)(json_t *object, const char *key);
extern json_t * (*json_object_get_d)(const json_t *object, const char *key);
extern void * (*json_object_iter_d)(json_t *object);
extern void * (*json_object_iter_at_d)(json_t *object, const char *key);
extern const char * (*json_object_iter_key_d)(void *iter);
extern void * (*json_object_iter_next_d)(json_t *object, void *iter);
extern int (*json_object_iter_set_d)(json_t *object, void *iter, json_t *value);
extern int (*json_object_iter_set_new_d)(json_t *object, void *iter, json_t *value);
extern json_t * (*json_object_iter_value_d)(void *iter);
extern int (*json_object_set_d)(json_t *object, const char *key, json_t *value);
extern int (*json_object_set_new_d)(json_t *object, const char *key, json_t *value);
extern int (*json_object_set_new_nocheck_d)(json_t *object, const char *key, json_t *value);
extern int (*json_object_set_nocheck_d)(json_t *object, const char *key, json_t *value);
extern size_t (*json_object_size_d)(const json_t *object);
extern int (*json_object_update_d)(json_t *object, json_t *other);
extern json_t * (*json_pack_d)(const char *fmt, ...);
extern json_t * (*json_pack_ex_d)(json_error_t *error, size_t flags, const char *fmt, ...);
extern json_t * (*json_real_d)(double value);
extern int (*json_real_set_d)(json_t *real, double value);
extern double (*json_real_value_d)(const json_t *real);
extern void (*json_set_alloc_funcs_d)(json_malloc_t malloc_fn, json_free_t free_fn);
extern json_t * (*json_string_d)(const char *value);
extern json_t * (*json_string_nocheck_d)(const char *value);
extern int (*json_string_set_d)(json_t *string, const char *value);
extern int (*json_string_set_nocheck_d)(json_t *string, const char *value);
extern const char * (*json_string_value_d)(const json_t *string);
extern json_t * (*json_true_d)(void);
extern int (*json_unpack_d)(json_t *root, const char *fmt, ...);
extern int (*json_unpack_ex_d)(json_t *root, json_error_t *error, size_t flags, const char *fmt, ...);
extern json_t * (*json_vpack_ex_d)(json_error_t *error, size_t flags, const char *fmt, va_list ap);
extern int (*json_vunpack_ex_d)(json_t *root, json_error_t *error, size_t flags, const char *fmt, va_list ap);

//! UTF8
extern const char * (*utf8proc_release_d)(void);
extern const char * (*utf8proc_errmsg_d)(utf8proc_ssize_t errcode);
extern const char * (*utf8proc_category_string_d)(utf8proc_int32_t c);
extern utf8proc_category_t (*utf8proc_category_d)(utf8proc_int32_t c);
extern const utf8proc_property_t * (*utf8proc_get_property_d)(utf8proc_int32_t uc);
extern utf8proc_ssize_t (*utf8proc_iterate_d)(const utf8proc_uint8_t *str, utf8proc_ssize_t strlen, utf8proc_int32_t *codepoint_ref);

//! XML
extern char **xmlParserVersion_d;
extern void (*xmlInitParser_d)(void);
extern void (*xmlMemoryDump_d)(void);
extern void (*xmlCleanupParser_d)(void);
extern void (*xmlCleanupGlobals_d)(void);
extern void (*xmlFreeDoc_d)(xmlDocPtr doc);
extern void (*xmlFreeNode_d)(xmlNodePtr cur);
extern xmlBufferPtr (*xmlBufferCreate_d)(void);
extern void (*xmlBufferFree_d)(xmlBufferPtr buf);
extern xmlParserCtxtPtr (*xmlNewParserCtxt_d)(void);
extern int (*xmlBufferLength_d)(const xmlBufferPtr buf);
extern void (*xmlFreeParserCtxt_d)(xmlParserCtxtPtr ctx);
extern void (*xmlXPathFreeObject_d)(xmlXPathObjectPtr obj);
extern void (*xmlXPathFreeContext_d)(xmlXPathContextPtr ctx);
extern xmlXPathContextPtr (*xmlXPathNewContext_d)(xmlDocPtr doc);
extern xmlNodePtr (*xmlNewNode_d)(xmlNsPtr ns, const xmlChar *name);
extern const xmlChar * (*xmlBufferContent_d)(const xmlBufferPtr buf);
extern xmlNodePtr (*xmlAddSibling_d)(xmlNodePtr cur, xmlNodePtr elem);
extern int (*xmlNodeBufGetContent_d)(xmlBufferPtr buffer, xmlNodePtr cur);
extern void (*xmlNodeSetContent_d)(xmlNodePtr cur, const xmlChar *content);
extern xmlChar * (*xmlEncodeEntitiesReentrant_d)(xmlDocPtr doc, const xmlChar * input);
extern void (*xmlDocDumpFormatMemory_d)(xmlDocPtr cur, xmlChar **mem, int *size, int format);
extern xmlAttrPtr (*xmlSetProp_d)(xmlNodePtr node, const xmlChar *name, const xmlChar *value);
extern xmlXPathObjectPtr (*xmlXPathEvalExpression_d)(const xmlChar *xpath, xmlXPathContextPtr ctx);
extern int (*xmlXPathRegisterNs_d)(xmlXPathContextPtr ctxt, const xmlChar *prefix, const xmlChar *ns_uri);
extern xmlDocPtr (*xmlCtxtReadMemory_d)(xmlParserCtxtPtr ctxt, const char *buffer, int size, const char *url, const char *encoding, int options);

//! ZLIB
extern const char * (*zlibVersion_d)(void);
extern uLong (*compressBound_d)(uLong sourceLen);
extern int (*uncompress_d)(Bytef *dest, uLongf *destLen, const Bytef *source, uLong sourceLen);
extern int (*compress2_d)(Bytef *dest, uLongf *destLen, const Bytef *source, uLong sourceLen, int level);

#endif

